
littleFS_W25Qxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0b4  0800b0b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0b4  0800b0b4  0001b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0bc  0800b0bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b0bc  0800b0bc  0001b0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0c4  0800b0c4  0001b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000a4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100c1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002585  00000000  00000000  00030161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d50  00000000  00000000  000326e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00033438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027610  00000000  00000000  000342e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f16b  00000000  00000000  0005b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d94b1  00000000  00000000  0006aa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143f14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004188  00000000  00000000  00143f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a490 	.word	0x0800a490

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800a490 	.word	0x0800a490

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9d08      	ldr	r5, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	468e      	mov	lr, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d14d      	bne.n	80003a2 <__udivmoddi4+0xaa>
 8000306:	428a      	cmp	r2, r1
 8000308:	4694      	mov	ip, r2
 800030a:	d969      	bls.n	80003e0 <__udivmoddi4+0xe8>
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	b152      	cbz	r2, 8000328 <__udivmoddi4+0x30>
 8000312:	fa01 f302 	lsl.w	r3, r1, r2
 8000316:	f1c2 0120 	rsb	r1, r2, #32
 800031a:	fa20 f101 	lsr.w	r1, r0, r1
 800031e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000322:	ea41 0e03 	orr.w	lr, r1, r3
 8000326:	4094      	lsls	r4, r2
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	0c21      	lsrs	r1, r4, #16
 800032e:	fbbe f6f8 	udiv	r6, lr, r8
 8000332:	fa1f f78c 	uxth.w	r7, ip
 8000336:	fb08 e316 	mls	r3, r8, r6, lr
 800033a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800033e:	fb06 f107 	mul.w	r1, r6, r7
 8000342:	4299      	cmp	r1, r3
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x64>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800034e:	f080 811f 	bcs.w	8000590 <__udivmoddi4+0x298>
 8000352:	4299      	cmp	r1, r3
 8000354:	f240 811c 	bls.w	8000590 <__udivmoddi4+0x298>
 8000358:	3e02      	subs	r6, #2
 800035a:	4463      	add	r3, ip
 800035c:	1a5b      	subs	r3, r3, r1
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800036c:	fb00 f707 	mul.w	r7, r0, r7
 8000370:	42a7      	cmp	r7, r4
 8000372:	d90a      	bls.n	800038a <__udivmoddi4+0x92>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037c:	f080 810a 	bcs.w	8000594 <__udivmoddi4+0x29c>
 8000380:	42a7      	cmp	r7, r4
 8000382:	f240 8107 	bls.w	8000594 <__udivmoddi4+0x29c>
 8000386:	4464      	add	r4, ip
 8000388:	3802      	subs	r0, #2
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	1be4      	subs	r4, r4, r7
 8000390:	2600      	movs	r6, #0
 8000392:	b11d      	cbz	r5, 800039c <__udivmoddi4+0xa4>
 8000394:	40d4      	lsrs	r4, r2
 8000396:	2300      	movs	r3, #0
 8000398:	e9c5 4300 	strd	r4, r3, [r5]
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0xc2>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	f000 80ef 	beq.w	800058a <__udivmoddi4+0x292>
 80003ac:	2600      	movs	r6, #0
 80003ae:	e9c5 0100 	strd	r0, r1, [r5]
 80003b2:	4630      	mov	r0, r6
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	fab3 f683 	clz	r6, r3
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d14a      	bne.n	8000458 <__udivmoddi4+0x160>
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xd4>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80f9 	bhi.w	80005be <__udivmoddi4+0x2c6>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb61 0303 	sbc.w	r3, r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	469e      	mov	lr, r3
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d0e0      	beq.n	800039c <__udivmoddi4+0xa4>
 80003da:	e9c5 4e00 	strd	r4, lr, [r5]
 80003de:	e7dd      	b.n	800039c <__udivmoddi4+0xa4>
 80003e0:	b902      	cbnz	r2, 80003e4 <__udivmoddi4+0xec>
 80003e2:	deff      	udf	#255	; 0xff
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	2a00      	cmp	r2, #0
 80003ea:	f040 8092 	bne.w	8000512 <__udivmoddi4+0x21a>
 80003ee:	eba1 010c 	sub.w	r1, r1, ip
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2601      	movs	r6, #1
 80003fc:	0c20      	lsrs	r0, r4, #16
 80003fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000402:	fb07 1113 	mls	r1, r7, r3, r1
 8000406:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040a:	fb0e f003 	mul.w	r0, lr, r3
 800040e:	4288      	cmp	r0, r1
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x12c>
 8000412:	eb1c 0101 	adds.w	r1, ip, r1
 8000416:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x12a>
 800041c:	4288      	cmp	r0, r1
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2c0>
 8000422:	4643      	mov	r3, r8
 8000424:	1a09      	subs	r1, r1, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1110 	mls	r1, r7, r0, r1
 8000430:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x156>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x154>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2ca>
 800044c:	4608      	mov	r0, r1
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000456:	e79c      	b.n	8000392 <__udivmoddi4+0x9a>
 8000458:	f1c6 0720 	rsb	r7, r6, #32
 800045c:	40b3      	lsls	r3, r6
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa20 f407 	lsr.w	r4, r0, r7
 800046a:	fa01 f306 	lsl.w	r3, r1, r6
 800046e:	431c      	orrs	r4, r3
 8000470:	40f9      	lsrs	r1, r7
 8000472:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000476:	fa00 f306 	lsl.w	r3, r0, r6
 800047a:	fbb1 f8f9 	udiv	r8, r1, r9
 800047e:	0c20      	lsrs	r0, r4, #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fb09 1118 	mls	r1, r9, r8, r1
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	fb08 f00e 	mul.w	r0, r8, lr
 8000490:	4288      	cmp	r0, r1
 8000492:	fa02 f206 	lsl.w	r2, r2, r6
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b8>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2bc>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2bc>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1a09      	subs	r1, r1, r0
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b8:	fb09 1110 	mls	r1, r9, r0, r1
 80004bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c4:	458e      	cmp	lr, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1e2>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2b4>
 80004d2:	458e      	cmp	lr, r1
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2b4>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4461      	add	r1, ip
 80004da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004de:	fba0 9402 	umull	r9, r4, r0, r2
 80004e2:	eba1 010e 	sub.w	r1, r1, lr
 80004e6:	42a1      	cmp	r1, r4
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46a6      	mov	lr, r4
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x2a4>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x2a0>
 80004f0:	b15d      	cbz	r5, 800050a <__udivmoddi4+0x212>
 80004f2:	ebb3 0208 	subs.w	r2, r3, r8
 80004f6:	eb61 010e 	sbc.w	r1, r1, lr
 80004fa:	fa01 f707 	lsl.w	r7, r1, r7
 80004fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000502:	40f1      	lsrs	r1, r6
 8000504:	431f      	orrs	r7, r3
 8000506:	e9c5 7100 	strd	r7, r1, [r5]
 800050a:	2600      	movs	r6, #0
 800050c:	4631      	mov	r1, r6
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	f1c2 0320 	rsb	r3, r2, #32
 8000516:	40d8      	lsrs	r0, r3
 8000518:	fa0c fc02 	lsl.w	ip, ip, r2
 800051c:	fa21 f303 	lsr.w	r3, r1, r3
 8000520:	4091      	lsls	r1, r2
 8000522:	4301      	orrs	r1, r0
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000530:	fb07 3610 	mls	r6, r7, r0, r3
 8000534:	0c0b      	lsrs	r3, r1, #16
 8000536:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800053a:	fb00 f60e 	mul.w	r6, r0, lr
 800053e:	429e      	cmp	r6, r3
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x260>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b8>
 8000550:	429e      	cmp	r6, r3
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b8>
 8000554:	3802      	subs	r0, #2
 8000556:	4463      	add	r3, ip
 8000558:	1b9b      	subs	r3, r3, r6
 800055a:	b289      	uxth	r1, r1
 800055c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000560:	fb07 3316 	mls	r3, r7, r6, r3
 8000564:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000568:	fb06 f30e 	mul.w	r3, r6, lr
 800056c:	428b      	cmp	r3, r1
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x28a>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2b0>
 800057a:	428b      	cmp	r3, r1
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2b0>
 800057e:	3e02      	subs	r6, #2
 8000580:	4461      	add	r1, ip
 8000582:	1ac9      	subs	r1, r1, r3
 8000584:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0x104>
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e705      	b.n	800039c <__udivmoddi4+0xa4>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e3      	b.n	800035c <__udivmoddi4+0x64>
 8000594:	4618      	mov	r0, r3
 8000596:	e6f8      	b.n	800038a <__udivmoddi4+0x92>
 8000598:	454b      	cmp	r3, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f8>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f8>
 80005a8:	4646      	mov	r6, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x28a>
 80005ac:	4620      	mov	r0, r4
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1e2>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x260>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b8>
 80005b8:	3b02      	subs	r3, #2
 80005ba:	4461      	add	r1, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x12c>
 80005be:	4630      	mov	r0, r6
 80005c0:	e709      	b.n	80003d6 <__udivmoddi4+0xde>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x156>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fae4 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f806 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f864 	bl	80006a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  main_cpp();
 80005dc:	f008 fe16 	bl	800920c <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x14>
	...

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 ff3c 	bl	8009470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xb8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <SystemClock_Config+0xb8>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <SystemClock_Config+0xb8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemClock_Config+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <SystemClock_Config+0xbc>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemClock_Config+0xbc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fdbd 	bl	80011d8 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000664:	f000 f940 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f001 f81f 	bl	80016c8 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000690:	f000 f92a 	bl	80008e8 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	4b84      	ldr	r3, [pc, #528]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a83      	ldr	r2, [pc, #524]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b81      	ldr	r3, [pc, #516]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	4b7d      	ldr	r3, [pc, #500]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a7c      	ldr	r2, [pc, #496]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b7a      	ldr	r3, [pc, #488]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b76      	ldr	r3, [pc, #472]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a75      	ldr	r2, [pc, #468]	; (80008d0 <MX_GPIO_Init+0x22c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b73      	ldr	r3, [pc, #460]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b6f      	ldr	r3, [pc, #444]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a6e      	ldr	r2, [pc, #440]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b6c      	ldr	r3, [pc, #432]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a67      	ldr	r2, [pc, #412]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b65      	ldr	r3, [pc, #404]	; (80008d0 <MX_GPIO_Init+0x22c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b61      	ldr	r3, [pc, #388]	; (80008d0 <MX_GPIO_Init+0x22c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a60      	ldr	r2, [pc, #384]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b5e      	ldr	r3, [pc, #376]	; (80008d0 <MX_GPIO_Init+0x22c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f244 0181 	movw	r1, #16513	; 0x4081
 8000768:	485a      	ldr	r0, [pc, #360]	; (80008d4 <MX_GPIO_Init+0x230>)
 800076a:	f000 fd1b 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	4859      	ldr	r0, [pc, #356]	; (80008d8 <MX_GPIO_Init+0x234>)
 8000774:	f000 fd16 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4853      	ldr	r0, [pc, #332]	; (80008dc <MX_GPIO_Init+0x238>)
 8000790:	f000 fb5c 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000794:	2332      	movs	r3, #50	; 0x32
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a4:	230b      	movs	r3, #11
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	484b      	ldr	r0, [pc, #300]	; (80008dc <MX_GPIO_Init+0x238>)
 80007b0:	f000 fb4c 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007b4:	2386      	movs	r3, #134	; 0x86
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4844      	ldr	r0, [pc, #272]	; (80008e0 <MX_GPIO_Init+0x23c>)
 80007d0:	f000 fb3c 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007d4:	f244 0381 	movw	r3, #16513	; 0x4081
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4839      	ldr	r0, [pc, #228]	; (80008d4 <MX_GPIO_Init+0x230>)
 80007ee:	f000 fb2d 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4831      	ldr	r0, [pc, #196]	; (80008d4 <MX_GPIO_Init+0x230>)
 8000810:	f000 fb1c 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000814:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000826:	2307      	movs	r3, #7
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	482c      	ldr	r0, [pc, #176]	; (80008e4 <MX_GPIO_Init+0x240>)
 8000832:	f000 fb0b 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4822      	ldr	r0, [pc, #136]	; (80008d8 <MX_GPIO_Init+0x234>)
 800084e:	f000 fafd 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	481c      	ldr	r0, [pc, #112]	; (80008d8 <MX_GPIO_Init+0x234>)
 8000866:	f000 faf1 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800086a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800087c:	230a      	movs	r3, #10
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <MX_GPIO_Init+0x23c>)
 8000888:	f000 fae0 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800088c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <MX_GPIO_Init+0x23c>)
 80008a2:	f000 fad3 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b8:	230b      	movs	r3, #11
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_GPIO_Init+0x234>)
 80008c4:	f000 fac2 	bl	8000e4c <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3730      	adds	r7, #48	; 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020400 	.word	0x40020400
 80008d8:	40021800 	.word	0x40021800
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020c00 	.word	0x40020c00

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f956 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	return 1;
 800099c:	2301      	movs	r3, #1
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_kill>:

int _kill(int pid, int sig)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009b2:	f008 fcf3 	bl	800939c <__errno>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2216      	movs	r2, #22
 80009ba:	601a      	str	r2, [r3, #0]
	return -1;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_exit>:

void _exit (int status)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffe7 	bl	80009a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009da:	e7fe      	b.n	80009da <_exit+0x12>

080009dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00a      	b.n	8000a04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ee:	f3af 8000 	nop.w
 80009f2:	4601      	mov	r1, r0
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	b2ca      	uxtb	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf0      	blt.n	80009ee <_read+0x12>
	}

return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e009      	b.n	8000a3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf1      	blt.n	8000a28 <_write+0x12>
	}
	return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_close>:

int _close(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	return -1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a76:	605a      	str	r2, [r3, #4]
	return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_isatty>:

int _isatty(int file)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f008 fc58 	bl	800939c <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <_sbrk+0x64>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20030000 	.word	0x20030000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	2000008c 	.word	0x2000008c
 8000b20:	20000118 	.word	0x20000118

08000b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b80 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b4e:	490e      	ldr	r1, [pc, #56]	; (8000b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b64:	4c0b      	ldr	r4, [pc, #44]	; (8000b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b72:	f7ff ffd7 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f008 fc29 	bl	80093cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fd27 	bl	80005cc <main>
  bx  lr    
 8000b7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b8c:	0800b0c8 	.word	0x0800b0c8
  ldr r2, =_sbss
 8000b90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b94:	20000114 	.word	0x20000114

08000b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_Init+0x40>)
 8000ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_Init+0x40>)
 8000bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_Init+0x40>)
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 f90d 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 f808 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff fe90 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023c00 	.word	0x40023c00

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x54>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f917 	bl	8000e32 <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 f8ed 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <HAL_InitTick+0x5c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000090 	.word	0x20000090

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000090 	.word	0x20000090

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff47 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff5c 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffb0 	bl	8000da0 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e177      	b.n	8001158 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8166 	bne.w	8001152 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d005      	beq.n	8000e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d130      	bne.n	8000f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d017      	beq.n	8000f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	69b9      	ldr	r1, [r7, #24]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80c0 	beq.w	8001152 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b66      	ldr	r3, [pc, #408]	; (8001170 <HAL_GPIO_Init+0x324>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a65      	ldr	r2, [pc, #404]	; (8001170 <HAL_GPIO_Init+0x324>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b63      	ldr	r3, [pc, #396]	; (8001170 <HAL_GPIO_Init+0x324>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fee:	4a61      	ldr	r2, [pc, #388]	; (8001174 <HAL_GPIO_Init+0x328>)
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a58      	ldr	r2, [pc, #352]	; (8001178 <HAL_GPIO_Init+0x32c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d037      	beq.n	800108a <HAL_GPIO_Init+0x23e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a57      	ldr	r2, [pc, #348]	; (800117c <HAL_GPIO_Init+0x330>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d031      	beq.n	8001086 <HAL_GPIO_Init+0x23a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a56      	ldr	r2, [pc, #344]	; (8001180 <HAL_GPIO_Init+0x334>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d02b      	beq.n	8001082 <HAL_GPIO_Init+0x236>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a55      	ldr	r2, [pc, #340]	; (8001184 <HAL_GPIO_Init+0x338>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d025      	beq.n	800107e <HAL_GPIO_Init+0x232>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a54      	ldr	r2, [pc, #336]	; (8001188 <HAL_GPIO_Init+0x33c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01f      	beq.n	800107a <HAL_GPIO_Init+0x22e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a53      	ldr	r2, [pc, #332]	; (800118c <HAL_GPIO_Init+0x340>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x22a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a52      	ldr	r2, [pc, #328]	; (8001190 <HAL_GPIO_Init+0x344>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x226>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a51      	ldr	r2, [pc, #324]	; (8001194 <HAL_GPIO_Init+0x348>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x222>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a50      	ldr	r2, [pc, #320]	; (8001198 <HAL_GPIO_Init+0x34c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x21e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x350>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x21a>
 8001062:	2309      	movs	r3, #9
 8001064:	e012      	b.n	800108c <HAL_GPIO_Init+0x240>
 8001066:	230a      	movs	r3, #10
 8001068:	e010      	b.n	800108c <HAL_GPIO_Init+0x240>
 800106a:	2308      	movs	r3, #8
 800106c:	e00e      	b.n	800108c <HAL_GPIO_Init+0x240>
 800106e:	2307      	movs	r3, #7
 8001070:	e00c      	b.n	800108c <HAL_GPIO_Init+0x240>
 8001072:	2306      	movs	r3, #6
 8001074:	e00a      	b.n	800108c <HAL_GPIO_Init+0x240>
 8001076:	2305      	movs	r3, #5
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x240>
 800107a:	2304      	movs	r3, #4
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x240>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x240>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x240>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x240>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_GPIO_Init+0x328>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_GPIO_Init+0x354>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ce:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <HAL_GPIO_Init+0x354>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_GPIO_Init+0x354>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f8:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_GPIO_Init+0x354>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_GPIO_Init+0x354>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001122:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <HAL_GPIO_Init+0x354>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_GPIO_Init+0x354>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_GPIO_Init+0x354>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f ae84 	bls.w	8000e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40013800 	.word	0x40013800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40021400 	.word	0x40021400
 8001190:	40021800 	.word	0x40021800
 8001194:	40021c00 	.word	0x40021c00
 8001198:	40022000 	.word	0x40022000
 800119c:	40022400 	.word	0x40022400
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e267      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d075      	beq.n	80012e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d00c      	beq.n	800121c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001202:	4b85      	ldr	r3, [pc, #532]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120a:	2b08      	cmp	r3, #8
 800120c:	d112      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b7e      	ldr	r3, [pc, #504]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d05b      	beq.n	80012e0 <HAL_RCC_OscConfig+0x108>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d157      	bne.n	80012e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e242      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x74>
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a75      	ldr	r2, [pc, #468]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6f      	ldr	r2, [pc, #444]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6c      	ldr	r2, [pc, #432]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 8001270:	4b69      	ldr	r3, [pc, #420]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a68      	ldr	r2, [pc, #416]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a65      	ldr	r2, [pc, #404]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fcea 	bl	8000c68 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fce6 	bl	8000c68 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e207      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xc0>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcd6 	bl	8000c68 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcd2 	bl	8000c68 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1f3      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b51      	ldr	r3, [pc, #324]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0xe8>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d063      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1c7      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4937      	ldr	r1, [pc, #220]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e03a      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d020      	beq.n	800138a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_RCC_OscConfig+0x244>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fc8b 	bl	8000c68 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc87 	bl	8000c68 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1a8      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4925      	ldr	r1, [pc, #148]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_OscConfig+0x244>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fc6a 	bl	8000c68 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fc66 	bl	8000c68 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e187      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d036      	beq.n	8001430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d016      	beq.n	80013f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_RCC_OscConfig+0x248>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fc4a 	bl	8000c68 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc46 	bl	8000c68 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e167      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x200>
 80013f6:	e01b      	b.n	8001430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_OscConfig+0x248>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fc33 	bl	8000c68 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	e00e      	b.n	8001424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fc2f 	bl	8000c68 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d907      	bls.n	8001424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e150      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001418:	40023800 	.word	0x40023800
 800141c:	42470000 	.word	0x42470000
 8001420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b88      	ldr	r3, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ea      	bne.n	8001406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8097 	beq.w	800156c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001442:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b7d      	ldr	r3, [pc, #500]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a7c      	ldr	r2, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b7a      	ldr	r3, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b77      	ldr	r3, [pc, #476]	; (800164c <HAL_RCC_OscConfig+0x474>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b74      	ldr	r3, [pc, #464]	; (800164c <HAL_RCC_OscConfig+0x474>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a73      	ldr	r2, [pc, #460]	; (800164c <HAL_RCC_OscConfig+0x474>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fbef 	bl	8000c68 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fbeb 	bl	8000c68 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e10c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x474>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
 80014b4:	4b64      	ldr	r3, [pc, #400]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	e01c      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x30c>
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6713      	str	r3, [r2, #112]	; 0x70
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a5b      	ldr	r2, [pc, #364]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014e4:	4b58      	ldr	r3, [pc, #352]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	4a57      	ldr	r2, [pc, #348]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	; 0x70
 80014f0:	4b55      	ldr	r3, [pc, #340]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d015      	beq.n	8001530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fbb0 	bl	8000c68 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fbac 	bl	8000c68 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0cb      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ee      	beq.n	800150c <HAL_RCC_OscConfig+0x334>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fb9a 	bl	8000c68 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fb96 	bl	8000c68 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0b5      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ee      	bne.n	8001538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a38      	ldr	r2, [pc, #224]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a1 	beq.w	80016b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d05c      	beq.n	800163c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d141      	bne.n	800160e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fb6a 	bl	8000c68 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fb66 	bl	8000c68 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e087      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	491b      	ldr	r1, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb3f 	bl	8000c68 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fb3b 	bl	8000c68 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e05c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x416>
 800160c:	e054      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb28 	bl	8000c68 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb24 	bl	8000c68 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e045      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x444>
 800163a:	e03d      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e038      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000
 8001650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x4ec>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d028      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d121      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168c:	4293      	cmp	r3, r2
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0cc      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d90c      	bls.n	8001704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b8      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001734:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	494d      	ldr	r1, [pc, #308]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d044      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d119      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	2b03      	cmp	r3, #3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e067      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 0203 	bic.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4934      	ldr	r1, [pc, #208]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7ff fa56 	bl	8000c68 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7ff fa52 	bl	8000c68 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 020c 	and.w	r2, r3, #12
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1eb      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d20c      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e032      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490e      	ldr	r1, [pc, #56]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f821 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490a      	ldr	r1, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f9b6 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00
 8001884:	40023800 	.word	0x40023800
 8001888:	0800ae10 	.word	0x0800ae10
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001898:	b094      	sub	sp, #80	; 0x50
 800189a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
 80018a0:	2300      	movs	r3, #0
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d00d      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x40>
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	f200 80e1 	bhi.w	8001a80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x34>
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x3a>
 80018c6:	e0db      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018cc:	e0db      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x208>)
 80018d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018d2:	e0d8      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d4:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4b6d      	ldr	r3, [pc, #436]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d063      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	2200      	movs	r2, #0
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
 8001902:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001906:	4622      	mov	r2, r4
 8001908:	462b      	mov	r3, r5
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	0159      	lsls	r1, r3, #5
 8001914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001918:	0150      	lsls	r0, r2, #5
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4621      	mov	r1, r4
 8001920:	1a51      	subs	r1, r2, r1
 8001922:	6139      	str	r1, [r7, #16]
 8001924:	4629      	mov	r1, r5
 8001926:	eb63 0301 	sbc.w	r3, r3, r1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001938:	4659      	mov	r1, fp
 800193a:	018b      	lsls	r3, r1, #6
 800193c:	4651      	mov	r1, sl
 800193e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001942:	4651      	mov	r1, sl
 8001944:	018a      	lsls	r2, r1, #6
 8001946:	4651      	mov	r1, sl
 8001948:	ebb2 0801 	subs.w	r8, r2, r1
 800194c:	4659      	mov	r1, fp
 800194e:	eb63 0901 	sbc.w	r9, r3, r1
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800195e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001966:	4690      	mov	r8, r2
 8001968:	4699      	mov	r9, r3
 800196a:	4623      	mov	r3, r4
 800196c:	eb18 0303 	adds.w	r3, r8, r3
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	462b      	mov	r3, r5
 8001974:	eb49 0303 	adc.w	r3, r9, r3
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001986:	4629      	mov	r1, r5
 8001988:	024b      	lsls	r3, r1, #9
 800198a:	4621      	mov	r1, r4
 800198c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001990:	4621      	mov	r1, r4
 8001992:	024a      	lsls	r2, r1, #9
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199a:	2200      	movs	r2, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
 800199e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a4:	f7fe fc7c 	bl	80002a0 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b0:	e058      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	2200      	movs	r2, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	4611      	mov	r1, r2
 80019be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
 80019c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019cc:	4642      	mov	r2, r8
 80019ce:	464b      	mov	r3, r9
 80019d0:	f04f 0000 	mov.w	r0, #0
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	0159      	lsls	r1, r3, #5
 80019da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019de:	0150      	lsls	r0, r2, #5
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4641      	mov	r1, r8
 80019e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ea:	4649      	mov	r1, r9
 80019ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a04:	ebb2 040a 	subs.w	r4, r2, sl
 8001a08:	eb63 050b 	sbc.w	r5, r3, fp
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	00eb      	lsls	r3, r5, #3
 8001a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a1a:	00e2      	lsls	r2, r4, #3
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	461d      	mov	r5, r3
 8001a20:	4643      	mov	r3, r8
 8001a22:	18e3      	adds	r3, r4, r3
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	464b      	mov	r3, r9
 8001a28:	eb45 0303 	adc.w	r3, r5, r3
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	028b      	lsls	r3, r1, #10
 8001a3e:	4621      	mov	r1, r4
 8001a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a44:	4621      	mov	r1, r4
 8001a46:	028a      	lsls	r2, r1, #10
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	61fa      	str	r2, [r7, #28]
 8001a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a58:	f7fe fc22 	bl	80002a0 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	0c1b      	lsrs	r3, r3, #16
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3750      	adds	r7, #80	; 0x50
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	00f42400 	.word	0x00f42400
 8001a9c:	007a1200 	.word	0x007a1200

08001aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07b      	b.n	8001baa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d108      	bne.n	8001acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ac2:	d009      	beq.n	8001ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
 8001aca:	e005      	b.n	8001ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f007 fa56 	bl	8008fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5c:	ea42 0103 	orr.w	r1, r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	f003 0104 	and.w	r1, r3, #4
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	f003 0210 	and.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b088      	sub	sp, #32
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_SPI_Transmit+0x22>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e126      	b.n	8001e22 <HAL_SPI_Transmit+0x270>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bdc:	f7ff f844 	bl	8000c68 <HAL_GetTick>
 8001be0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d002      	beq.n	8001bf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bf6:	e10b      	b.n	8001e10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_SPI_Transmit+0x52>
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c08:	e102      	b.n	8001e10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c50:	d10f      	bne.n	8001c72 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	2b40      	cmp	r3, #64	; 0x40
 8001c7e:	d007      	beq.n	8001c90 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c98:	d14b      	bne.n	8001d32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_SPI_Transmit+0xf6>
 8001ca2:	8afb      	ldrh	r3, [r7, #22]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d13e      	bne.n	8001d26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	881a      	ldrh	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	1c9a      	adds	r2, r3, #2
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ccc:	e02b      	b.n	8001d26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d112      	bne.n	8001d02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	1c9a      	adds	r2, r3, #2
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d00:	e011      	b.n	8001d26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d02:	f7fe ffb1 	bl	8000c68 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d803      	bhi.n	8001d1a <HAL_SPI_Transmit+0x168>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d18:	d102      	bne.n	8001d20 <HAL_SPI_Transmit+0x16e>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d24:	e074      	b.n	8001e10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ce      	bne.n	8001cce <HAL_SPI_Transmit+0x11c>
 8001d30:	e04c      	b.n	8001dcc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_SPI_Transmit+0x18e>
 8001d3a:	8afb      	ldrh	r3, [r7, #22]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d140      	bne.n	8001dc2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d66:	e02c      	b.n	8001dc2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d113      	bne.n	8001d9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d9c:	e011      	b.n	8001dc2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d9e:	f7fe ff63 	bl	8000c68 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d803      	bhi.n	8001db6 <HAL_SPI_Transmit+0x204>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db4:	d102      	bne.n	8001dbc <HAL_SPI_Transmit+0x20a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dc0:	e026      	b.n	8001e10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1cd      	bne.n	8001d68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	6839      	ldr	r1, [r7, #0]
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 fbcb 	bl	800256c <SPI_EndRxTxTransaction>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10a      	bne.n	8001e00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	77fb      	strb	r3, [r7, #31]
 8001e0c:	e000      	b.n	8001e10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3720      	adds	r7, #32
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b088      	sub	sp, #32
 8001e2e:	af02      	add	r7, sp, #8
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e46:	d112      	bne.n	8001e6e <HAL_SPI_Receive+0x44>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10e      	bne.n	8001e6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2204      	movs	r2, #4
 8001e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e58:	88fa      	ldrh	r2, [r7, #6]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f8f1 	bl	800204c <HAL_SPI_TransmitReceive>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	e0ea      	b.n	8002044 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_SPI_Receive+0x52>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e0e3      	b.n	8002044 <HAL_SPI_Receive+0x21a>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e84:	f7fe fef0 	bl	8000c68 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d002      	beq.n	8001e9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e9a:	e0ca      	b.n	8002032 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_SPI_Receive+0x7e>
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001eac:	e0c1      	b.n	8002032 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	88fa      	ldrh	r2, [r7, #6]
 8001ecc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef4:	d10f      	bne.n	8001f16 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d007      	beq.n	8001f34 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d162      	bne.n	8002002 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f3c:	e02e      	b.n	8001f9c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d115      	bne.n	8001f78 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f103 020c 	add.w	r2, r3, #12
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f76:	e011      	b.n	8001f9c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f78:	f7fe fe76 	bl	8000c68 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d803      	bhi.n	8001f90 <HAL_SPI_Receive+0x166>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8e:	d102      	bne.n	8001f96 <HAL_SPI_Receive+0x16c>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f9a:	e04a      	b.n	8002032 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1cb      	bne.n	8001f3e <HAL_SPI_Receive+0x114>
 8001fa6:	e031      	b.n	800200c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d113      	bne.n	8001fde <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	b292      	uxth	r2, r2
 8001fc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	1c9a      	adds	r2, r3, #2
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fdc:	e011      	b.n	8002002 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fde:	f7fe fe43 	bl	8000c68 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d803      	bhi.n	8001ff6 <HAL_SPI_Receive+0x1cc>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff4:	d102      	bne.n	8001ffc <HAL_SPI_Receive+0x1d2>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002000:	e017      	b.n	8002032 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1cd      	bne.n	8001fa8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 fa45 	bl	80024a0 <SPI_EndRxTransaction>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
 800202e:	e000      	b.n	8002032 <HAL_SPI_Receive+0x208>
  }

error :
 8002030:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800205a:	2301      	movs	r3, #1
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_SPI_TransmitReceive+0x26>
 800206e:	2302      	movs	r3, #2
 8002070:	e18a      	b.n	8002388 <HAL_SPI_TransmitReceive+0x33c>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800207a:	f7fe fdf5 	bl	8000c68 <HAL_GetTick>
 800207e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002094:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002098:	2b01      	cmp	r3, #1
 800209a:	d00f      	beq.n	80020bc <HAL_SPI_TransmitReceive+0x70>
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020a2:	d107      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x68>
 80020ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d003      	beq.n	80020bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020ba:	e15b      	b.n	8002374 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_SPI_TransmitReceive+0x82>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_SPI_TransmitReceive+0x82>
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020d4:	e14e      	b.n	8002374 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d003      	beq.n	80020ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2205      	movs	r2, #5
 80020e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	887a      	ldrh	r2, [r7, #2]
 8002112:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d007      	beq.n	800213e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002146:	d178      	bne.n	800223a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x10a>
 8002150:	8b7b      	ldrh	r3, [r7, #26]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d166      	bne.n	8002224 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	1c9a      	adds	r2, r3, #2
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002170:	b29b      	uxth	r3, r3
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800217a:	e053      	b.n	8002224 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d11b      	bne.n	80021c2 <HAL_SPI_TransmitReceive+0x176>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d016      	beq.n	80021c2 <HAL_SPI_TransmitReceive+0x176>
 8002194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002196:	2b01      	cmp	r3, #1
 8002198:	d113      	bne.n	80021c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	881a      	ldrh	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	1c9a      	adds	r2, r3, #2
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d119      	bne.n	8002204 <HAL_SPI_TransmitReceive+0x1b8>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d014      	beq.n	8002204 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	b292      	uxth	r2, r2
 80021e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	1c9a      	adds	r2, r3, #2
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002204:	f7fe fd30 	bl	8000c68 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002210:	429a      	cmp	r2, r3
 8002212:	d807      	bhi.n	8002224 <HAL_SPI_TransmitReceive+0x1d8>
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221a:	d003      	beq.n	8002224 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002222:	e0a7      	b.n	8002374 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1a6      	bne.n	800217c <HAL_SPI_TransmitReceive+0x130>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1a1      	bne.n	800217c <HAL_SPI_TransmitReceive+0x130>
 8002238:	e07c      	b.n	8002334 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_SPI_TransmitReceive+0x1fc>
 8002242:	8b7b      	ldrh	r3, [r7, #26]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d16b      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	330c      	adds	r3, #12
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800226e:	e057      	b.n	8002320 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d11c      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x26c>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_SPI_TransmitReceive+0x26c>
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	2b01      	cmp	r3, #1
 800228c:	d114      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d119      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x2ae>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d014      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022f6:	2301      	movs	r3, #1
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022fa:	f7fe fcb5 	bl	8000c68 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002306:	429a      	cmp	r2, r3
 8002308:	d803      	bhi.n	8002312 <HAL_SPI_TransmitReceive+0x2c6>
 800230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002310:	d102      	bne.n	8002318 <HAL_SPI_TransmitReceive+0x2cc>
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	2b00      	cmp	r3, #0
 8002316:	d103      	bne.n	8002320 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800231e:	e029      	b.n	8002374 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1a2      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x224>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d19d      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f917 	bl	800256c <SPI_EndRxTxTransaction>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002350:	e010      	b.n	8002374 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	e000      	b.n	8002374 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002372:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002384:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002388:	4618      	mov	r0, r3
 800238a:	3730      	adds	r7, #48	; 0x30
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023a0:	f7fe fc62 	bl	8000c68 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023b0:	f7fe fc5a 	bl	8000c68 <HAL_GetTick>
 80023b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023b6:	4b39      	ldr	r3, [pc, #228]	; (800249c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	0d1b      	lsrs	r3, r3, #20
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023c6:	e054      	b.n	8002472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ce:	d050      	beq.n	8002472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023d0:	f7fe fc4a 	bl	8000c68 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d902      	bls.n	80023e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d13d      	bne.n	8002462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023fe:	d111      	bne.n	8002424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002408:	d004      	beq.n	8002414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002412:	d107      	bne.n	8002424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242c:	d10f      	bne.n	800244e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e017      	b.n	8002492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3b01      	subs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4013      	ands	r3, r2
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	429a      	cmp	r2, r3
 8002480:	bf0c      	ite	eq
 8002482:	2301      	moveq	r3, #1
 8002484:	2300      	movne	r3, #0
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	429a      	cmp	r2, r3
 800248e:	d19b      	bne.n	80023c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000000 	.word	0x20000000

080024a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b4:	d111      	bne.n	80024da <SPI_EndRxTransaction+0x3a>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024be:	d004      	beq.n	80024ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c8:	d107      	bne.n	80024da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e2:	d12a      	bne.n	800253a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ec:	d012      	beq.n	8002514 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff ff49 	bl	8002390 <SPI_WaitFlagStateUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d02d      	beq.n	8002560 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e026      	b.n	8002562 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	2101      	movs	r1, #1
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff ff36 	bl	8002390 <SPI_WaitFlagStateUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01a      	beq.n	8002560 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e013      	b.n	8002562 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2200      	movs	r2, #0
 8002542:	2101      	movs	r1, #1
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f7ff ff23 	bl	8002390 <SPI_WaitFlagStateUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e000      	b.n	8002562 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <SPI_EndRxTxTransaction+0x7c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <SPI_EndRxTxTransaction+0x80>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0d5b      	lsrs	r3, r3, #21
 8002584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002596:	d112      	bne.n	80025be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2200      	movs	r2, #0
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff fef4 	bl	8002390 <SPI_WaitFlagStateUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e00f      	b.n	80025de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d0f2      	beq.n	80025be <SPI_EndRxTxTransaction+0x52>
 80025d8:	e000      	b.n	80025dc <SPI_EndRxTxTransaction+0x70>
        break;
 80025da:	bf00      	nop
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000
 80025ec:	165e9f81 	.word	0x165e9f81

080025f0 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4293      	cmp	r3, r2
 8002600:	bf38      	it	cc
 8002602:	4613      	movcc	r3, r2
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4293      	cmp	r3, r2
 8002620:	bf28      	it	cs
 8002622:	4613      	movcs	r3, r2
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	fb01 f202 	mul.w	r2, r1, r2
 8002648:	1a9b      	subs	r3, r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	1ad3      	subs	r3, r2, r3
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	4413      	add	r3, r2
 800266a:	3b01      	subs	r3, #1
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ffde 	bl	8002630 <lfs_aligndown>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3b01      	subs	r3, #1
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7fd fe03 	bl	80002d0 <__popcountsi2>
 80026ca:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	1ad3      	subs	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80026f8:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffee 	bl	80026f0 <lfs_fromle32>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffed 	bl	800271e <lfs_frombe32>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f006 fe5c 	bl	8009414 <malloc>
 800275c:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f006 fe58 	bl	8009424 <free>
#else
    (void)p;
#endif
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800278c:	601a      	str	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68d8      	ldr	r0, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	461a      	mov	r2, r3
 80027b0:	21ff      	movs	r1, #255	; 0xff
 80027b2:	f006 fe5d 	bl	8009470 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027bc:	601a      	str	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d208      	bcs.n	80027f8 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 80027e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ea:	441a      	add	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f0:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	f240 811b 	bls.w	8002a2e <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 80027f8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80027fc:	e11c      	b.n	8002a38 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80027fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002800:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d03f      	beq.n	8002888 <lfs_bd_read+0xc0>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	429a      	cmp	r2, r3
 8002810:	d13a      	bne.n	8002888 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800281c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281e:	429a      	cmp	r2, r3
 8002820:	d232      	bcs.n	8002888 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002828:	429a      	cmp	r2, r3
 800282a:	d324      	bcc.n	8002876 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	1acb      	subs	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	4619      	mov	r1, r3
 800283c:	69b8      	ldr	r0, [r7, #24]
 800283e:	f7ff fee7 	bl	8002610 <lfs_min>
 8002842:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800284e:	1acb      	subs	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4619      	mov	r1, r3
 8002856:	69f8      	ldr	r0, [r7, #28]
 8002858:	f006 fdfc 	bl	8009454 <memcpy>

                data += diff;
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4413      	add	r3, r2
 8002862:	61fb      	str	r3, [r7, #28]
                off += diff;
 8002864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800286c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8002874:	e0db      	b.n	8002a2e <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	4619      	mov	r1, r3
 8002880:	69b8      	ldr	r0, [r7, #24]
 8002882:	f7ff fec5 	bl	8002610 <lfs_min>
 8002886:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288e:	429a      	cmp	r2, r3
 8002890:	d13a      	bne.n	8002908 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4413      	add	r3, r2
        if (block == rcache->block &&
 800289c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800289e:	429a      	cmp	r2, r3
 80028a0:	d232      	bcs.n	8002908 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d324      	bcc.n	80028f6 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	1acb      	subs	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	69b8      	ldr	r0, [r7, #24]
 80028be:	f7ff fea7 	bl	8002610 <lfs_min>
 80028c2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80028ce:	1acb      	subs	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4619      	mov	r1, r3
 80028d6:	69f8      	ldr	r0, [r7, #28]
 80028d8:	f006 fdbc 	bl	8009454 <memcpy>

                data += diff;
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4413      	add	r3, r2
 80028e2:	61fb      	str	r3, [r7, #28]
                off += diff;
 80028e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4413      	add	r3, r2
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80028ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80028f4:	e09b      	b.n	8002a2e <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	69b8      	ldr	r0, [r7, #24]
 8002902:	f7ff fe85 	bl	8002610 <lfs_min>
 8002906:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8002908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d336      	bcc.n	800297e <lfs_bd_read+0x1b6>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002918:	fbb3 f1f2 	udiv	r1, r3, r2
 800291c:	fb01 f202 	mul.w	r2, r1, r2
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d12b      	bne.n	800297e <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800292a:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800292c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800292e:	429a      	cmp	r2, r3
 8002930:	d325      	bcc.n	800297e <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	4619      	mov	r1, r3
 800293a:	69b8      	ldr	r0, [r7, #24]
 800293c:	f7ff fe78 	bl	8002630 <lfs_aligndown>
 8002940:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002946:	685c      	ldr	r4, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002956:	47a0      	blx	r4
 8002958:	6178      	str	r0, [r7, #20]
            if (err) {
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <lfs_bd_read+0x19c>
                return err;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	e069      	b.n	8002a38 <lfs_bd_read+0x270>
            }

            data += diff;
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4413      	add	r3, r2
 800296a:	61fb      	str	r3, [r7, #28]
            off += diff;
 800296c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8002974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 800297c:	e057      	b.n	8002a2e <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002986:	429a      	cmp	r2, r3
 8002988:	d305      	bcc.n	8002996 <lfs_bd_read+0x1ce>
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <lfs_bd_read+0x278>)
 800298c:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <lfs_bd_read+0x27c>)
 800298e:	216b      	movs	r1, #107	; 0x6b
 8002990:	482d      	ldr	r0, [pc, #180]	; (8002a48 <lfs_bd_read+0x280>)
 8002992:	f006 fce5 	bl	8009360 <__assert_func>
        rcache->block = block;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299a:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4619      	mov	r1, r3
 80029a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029a6:	f7ff fe43 	bl	8002630 <lfs_aligndown>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80029b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f7ff fe4b 	bl	800265a <lfs_alignup>
 80029c4:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f7ff fe1e 	bl	8002610 <lfs_min>
 80029d4:	4602      	mov	r2, r0
                - rcache->off,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80029da:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7ff fe13 	bl	8002610 <lfs_min>
 80029ea:	4602      	mov	r2, r0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f4:	685c      	ldr	r4, [r3, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	47a0      	blx	r4
 8002a10:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dd05      	ble.n	8002a24 <lfs_bd_read+0x25c>
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <lfs_bd_read+0x284>)
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <lfs_bd_read+0x27c>)
 8002a1c:	2176      	movs	r1, #118	; 0x76
 8002a1e:	480a      	ldr	r0, [pc, #40]	; (8002a48 <lfs_bd_read+0x280>)
 8002a20:	f006 fc9e 	bl	8009360 <__assert_func>
        if (err) {
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <lfs_bd_read+0x266>
            return err;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	e004      	b.n	8002a38 <lfs_bd_read+0x270>
    while (size > 0) {
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f47f aee4 	bne.w	80027fe <lfs_bd_read+0x36>
        }
    }

    return 0;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a40:	0800a4a8 	.word	0x0800a4a8
 8002a44:	0800ae20 	.word	0x0800ae20
 8002a48:	0800a4c8 	.word	0x0800a4c8
 8002a4c:	0800a4ec 	.word	0x0800a4ec

08002a50 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	; 0x38
 8002a54:	af04      	add	r7, sp, #16
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8002a66:	2300      	movs	r3, #0
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6a:	e039      	b.n	8002ae0 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8002a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2108      	movs	r1, #8
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fdcb 	bl	8002610 <lfs_min>
 8002a7a:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	1ad1      	subs	r1, r2, r3
 8002a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	4413      	add	r3, r2
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	9203      	str	r2, [sp, #12]
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	9202      	str	r2, [sp, #8]
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff fe92 	bl	80027c8 <lfs_bd_read>
 8002aa4:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <lfs_bd_cmp+0x60>
            return res;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	e01c      	b.n	8002aea <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	18d1      	adds	r1, r2, r3
 8002ab6:	f107 0310 	add.w	r3, r7, #16
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f006 fcb9 	bl	8009434 <memcmp>
 8002ac2:	61b8      	str	r0, [r7, #24]
        if (res) {
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	da01      	bge.n	8002ad4 <lfs_bd_cmp+0x84>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e00a      	b.n	8002aea <lfs_bd_cmp+0x9a>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e008      	b.n	8002aea <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d3c1      	bcc.n	8002a6c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3728      	adds	r7, #40	; 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002af4:	b5b0      	push	{r4, r5, r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af04      	add	r7, sp, #16
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0a:	d061      	beq.n	8002bd0 <lfs_bd_flush+0xdc>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f113 0f02 	cmn.w	r3, #2
 8002b14:	d05c      	beq.n	8002bd0 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d305      	bcc.n	8002b30 <lfs_bd_flush+0x3c>
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <lfs_bd_flush+0xe8>)
 8002b26:	4a2e      	ldr	r2, [pc, #184]	; (8002be0 <lfs_bd_flush+0xec>)
 8002b28:	219e      	movs	r1, #158	; 0x9e
 8002b2a:	482e      	ldr	r0, [pc, #184]	; (8002be4 <lfs_bd_flush+0xf0>)
 8002b2c:	f006 fc18 	bl	8009360 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f7ff fd8c 	bl	800265a <lfs_alignup>
 8002b42:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b48:	689c      	ldr	r4, [r3, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	462b      	mov	r3, r5
 8002b60:	47a0      	blx	r4
 8002b62:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	dd05      	ble.n	8002b76 <lfs_bd_flush+0x82>
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <lfs_bd_flush+0xf4>)
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <lfs_bd_flush+0xec>)
 8002b6e:	21a2      	movs	r1, #162	; 0xa2
 8002b70:	481c      	ldr	r0, [pc, #112]	; (8002be4 <lfs_bd_flush+0xf0>)
 8002b72:	f006 fbf5 	bl	8009360 <__assert_func>
        if (err) {
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <lfs_bd_flush+0x8c>
            return err;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	e028      	b.n	8002bd2 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d020      	beq.n	8002bc8 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff fdf7 	bl	800277c <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8002b9a:	69f8      	ldr	r0, [r7, #28]
 8002b9c:	9003      	str	r0, [sp, #12]
 8002b9e:	9102      	str	r1, [sp, #8]
 8002ba0:	9201      	str	r2, [sp, #4]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	2100      	movs	r1, #0
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff ff50 	bl	8002a50 <lfs_bd_cmp>
 8002bb0:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da01      	bge.n	8002bbc <lfs_bd_flush+0xc8>
                return res;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	e00a      	b.n	8002bd2 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8002bc2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002bc6:	e004      	b.n	8002bd2 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7ff fde5 	bl	800279a <lfs_cache_zero>
    }

    return 0;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	0800a4f8 	.word	0x0800a4f8
 8002be0:	0800ae2c 	.word	0x0800ae2c
 8002be4:	0800a4c8 	.word	0x0800a4c8
 8002be8:	0800a4ec 	.word	0x0800a4ec

08002bec <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff fdbd 	bl	800277c <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff ff73 	bl	8002af4 <lfs_bd_flush>
 8002c0e:	6178      	str	r0, [r7, #20]
    if (err) {
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <lfs_bd_sync+0x2e>
        return err;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	e011      	b.n	8002c3e <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c24:	4610      	mov	r0, r2
 8002c26:	4798      	blx	r3
 8002c28:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	dd05      	ble.n	8002c3c <lfs_bd_sync+0x50>
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <lfs_bd_sync+0x5c>)
 8002c32:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <lfs_bd_sync+0x60>)
 8002c34:	21c8      	movs	r1, #200	; 0xc8
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <lfs_bd_sync+0x64>)
 8002c38:	f006 fb92 	bl	8009360 <__assert_func>
    return err;
 8002c3c:	697b      	ldr	r3, [r7, #20]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	0800a4ec 	.word	0x0800a4ec
 8002c4c:	0800ae3c 	.word	0x0800ae3c
 8002c50:	0800a4c8 	.word	0x0800a4c8

08002c54 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	f113 0f02 	cmn.w	r3, #2
 8002c6c:	d00b      	beq.n	8002c86 <lfs_bd_prog+0x32>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d305      	bcc.n	8002c86 <lfs_bd_prog+0x32>
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <lfs_bd_prog+0x144>)
 8002c7c:	4a47      	ldr	r2, [pc, #284]	; (8002d9c <lfs_bd_prog+0x148>)
 8002c7e:	21d3      	movs	r1, #211	; 0xd3
 8002c80:	4847      	ldr	r0, [pc, #284]	; (8002da0 <lfs_bd_prog+0x14c>)
 8002c82:	f006 fb6d 	bl	8009360 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8002c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8a:	441a      	add	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d977      	bls.n	8002d86 <lfs_bd_prog+0x132>
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <lfs_bd_prog+0x150>)
 8002c98:	4a40      	ldr	r2, [pc, #256]	; (8002d9c <lfs_bd_prog+0x148>)
 8002c9a:	21d4      	movs	r1, #212	; 0xd4
 8002c9c:	4840      	ldr	r0, [pc, #256]	; (8002da0 <lfs_bd_prog+0x14c>)
 8002c9e:	f006 fb5f 	bl	8009360 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d151      	bne.n	8002d50 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8002cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d34c      	bcc.n	8002d50 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	4413      	add	r3, r2
                off >= pcache->off &&
 8002cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d243      	bcs.n	8002d50 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cdc:	f7ff fc98 	bl	8002610 <lfs_min>
 8002ce0:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cec:	1acb      	subs	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	69f9      	ldr	r1, [r7, #28]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f006 fbad 	bl	8009454 <memcpy>

            data += diff;
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	61fb      	str	r3, [r7, #28]
            off += diff;
 8002d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4413      	add	r3, r2
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8002d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6898      	ldr	r0, [r3, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7ff fc66 	bl	80025f0 <lfs_max>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d126      	bne.n	8002d86 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff fed8 	bl	8002af4 <lfs_bd_flush>
 8002d44:	6178      	str	r0, [r7, #20]
                if (err) {
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01c      	beq.n	8002d86 <lfs_bd_prog+0x132>
                    return err;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	e01e      	b.n	8002d8e <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d58:	d005      	beq.n	8002d66 <lfs_bd_prog+0x112>
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <lfs_bd_prog+0x154>)
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <lfs_bd_prog+0x148>)
 8002d5e:	21f1      	movs	r1, #241	; 0xf1
 8002d60:	480f      	ldr	r0, [pc, #60]	; (8002da0 <lfs_bd_prog+0x14c>)
 8002d62:	f006 fafd 	bl	8009360 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6a:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	4619      	mov	r1, r3
 8002d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d76:	f7ff fc5b 	bl	8002630 <lfs_aligndown>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d18a      	bne.n	8002ca2 <lfs_bd_prog+0x4e>
    }

    return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	0800a520 	.word	0x0800a520
 8002d9c:	0800ae48 	.word	0x0800ae48
 8002da0:	0800a4c8 	.word	0x0800a4c8
 8002da4:	0800a55c 	.word	0x0800a55c
 8002da8:	0800a580 	.word	0x0800a580

08002dac <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d305      	bcc.n	8002dce <lfs_bd_erase+0x22>
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <lfs_bd_erase+0x54>)
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <lfs_bd_erase+0x58>)
 8002dc6:	21ff      	movs	r1, #255	; 0xff
 8002dc8:	480f      	ldr	r0, [pc, #60]	; (8002e08 <lfs_bd_erase+0x5c>)
 8002dca:	f006 fac9 	bl	8009360 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dd8:	6839      	ldr	r1, [r7, #0]
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4798      	blx	r3
 8002dde:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dd06      	ble.n	8002df4 <lfs_bd_erase+0x48>
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <lfs_bd_erase+0x60>)
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <lfs_bd_erase+0x58>)
 8002dea:	f240 1101 	movw	r1, #257	; 0x101
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <lfs_bd_erase+0x5c>)
 8002df0:	f006 fab6 	bl	8009360 <__assert_func>
    return err;
 8002df4:	68fb      	ldr	r3, [r7, #12]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	0800a4a8 	.word	0x0800a4a8
 8002e04:	0800ae54 	.word	0x0800ae54
 8002e08:	0800a4c8 	.word	0x0800a4c8
 8002e0c:	0800a4ec 	.word	0x0800a4ec

08002e10 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4a:	d005      	beq.n	8002e58 <lfs_pair_isnull+0x1e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e56:	d101      	bne.n	8002e5c <lfs_pair_isnull+0x22>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <lfs_pair_isnull+0x24>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d017      	beq.n	8002eb6 <lfs_pair_cmp+0x46>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d00f      	beq.n	8002eb6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d008      	beq.n	8002eb6 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <lfs_pair_cmp+0x46>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <lfs_pair_cmp+0x48>
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d107      	bne.n	8002eea <lfs_pair_sync+0x26>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d00d      	beq.n	8002f06 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d108      	bne.n	8002f0a <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d101      	bne.n	8002f0a <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <lfs_pair_sync+0x48>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8002f1e:	b590      	push	{r4, r7, lr}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fbe0 	bl	80026f0 <lfs_fromle32>
 8002f30:	4602      	mov	r2, r0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1d1c      	adds	r4, r3, #4
 8002f40:	4610      	mov	r0, r2
 8002f42:	f7ff fbd5 	bl	80026f0 <lfs_fromle32>
 8002f46:	4603      	mov	r3, r0
 8002f48:	6023      	str	r3, [r4, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}

08002f52 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8002f52:	b590      	push	{r4, r7, lr}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fbd1 	bl	8002706 <lfs_tole32>
 8002f64:	4602      	mov	r2, r0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1d1c      	adds	r4, r3, #4
 8002f74:	4610      	mov	r0, r2
 8002f76:	f7ff fbc6 	bl	8002706 <lfs_tole32>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6023      	str	r3, [r4, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd90      	pop	{r4, r7, pc}

08002f86 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	0fdb      	lsrs	r3, r3, #31
 8002f94:	b2db      	uxtb	r3, r3
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	059b      	lsls	r3, r3, #22
 8002fae:	159b      	asrs	r3, r3, #22
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0d1b      	lsrs	r3, r3, #20
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fda:	b29b      	uxth	r3, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0d1b      	lsrs	r3, r3, #20
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffa:	b29b      	uxth	r3, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0d1b      	lsrs	r3, r3, #20
 8003014:	b2db      	uxtb	r3, r3
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ffec 	bl	8003008 <lfs_tag_chunk>
 8003030:	4603      	mov	r3, r0
 8003032:	b25b      	sxtb	r3, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	b29b      	uxth	r3, r3
 800304a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304e:	b29b      	uxth	r3, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ff8f 	bl	8002fa2 <lfs_tag_isdelete>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ffe5 	bl	800305c <lfs_tag_size>
 8003092:	4603      	mov	r3, r0
 8003094:	3304      	adds	r3, #4
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e012      	b.n	80030d4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4403      	add	r3, r0
 80030ca:	404a      	eors	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	dde9      	ble.n	80030ae <lfs_gstate_xor+0x10>
    }
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e00b      	b.n	800310e <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <lfs_gstate_iszero+0x20>
            return false;
 8003104:	2300      	movs	r3, #0
 8003106:	e006      	b.n	8003116 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b02      	cmp	r3, #2
 8003112:	ddf0      	ble.n	80030f6 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff94 	bl	800305c <lfs_tag_size>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff81 	bl	800305c <lfs_tag_size>
 800315a:	4603      	mov	r3, r0
 800315c:	b2db      	uxtb	r3, r3
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff28 	bl	8002fc8 <lfs_tag_type1>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ff14 	bl	8002fc8 <lfs_tag_type1>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <lfs_gstate_hasmovehere+0x30>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe5f 	bl	8002e70 <lfs_pair_cmp>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <lfs_gstate_hasmovehere+0x30>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <lfs_gstate_hasmovehere+0x32>
 80031bc:	2300      	movs	r3, #0
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fa89 	bl	80026f0 <lfs_fromle32>
 80031de:	4602      	mov	r2, r0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fa81 	bl	80026f0 <lfs_fromle32>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fa79 	bl	80026f0 <lfs_fromle32>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fa74 	bl	8002706 <lfs_tole32>
 800321e:	4602      	mov	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fa6c 	bl	8002706 <lfs_tole32>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fa64 	bl	8002706 <lfs_tole32>
 800323e:	4602      	mov	r2, r0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fa49 	bl	80026f0 <lfs_fromle32>
 800325e:	4602      	mov	r2, r0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fa41 	bl	80026f0 <lfs_fromle32>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	605a      	str	r2, [r3, #4]
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fa3c 	bl	8002706 <lfs_tole32>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fa34 	bl	8002706 <lfs_tole32>
 800329e:	4602      	mov	r2, r0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	605a      	str	r2, [r3, #4]
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fa19 	bl	80026f0 <lfs_fromle32>
 80032be:	4602      	mov	r2, r0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fa11 	bl	80026f0 <lfs_fromle32>
 80032ce:	4602      	mov	r2, r0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fa09 	bl	80026f0 <lfs_fromle32>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fa01 	bl	80026f0 <lfs_fromle32>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff f9f9 	bl	80026f0 <lfs_fromle32>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff f9f1 	bl	80026f0 <lfs_fromle32>
 800330e:	4602      	mov	r2, r0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	615a      	str	r2, [r3, #20]
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f9ec 	bl	8002706 <lfs_tole32>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff f9e4 	bl	8002706 <lfs_tole32>
 800333e:	4602      	mov	r2, r0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff f9dc 	bl	8002706 <lfs_tole32>
 800334e:	4602      	mov	r2, r0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f9d4 	bl	8002706 <lfs_tole32>
 800335e:	4602      	mov	r2, r0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f9cc 	bl	8002706 <lfs_tole32>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f9c4 	bl	8002706 <lfs_tole32>
 800337e:	4602      	mov	r2, r0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	615a      	str	r2, [r3, #20]
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	e009      	b.n	80033b0 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d101      	bne.n	80033aa <lfs_mlist_isopen+0x1e>
            return true;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f1      	bne.n	800339c <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3328      	adds	r3, #40	; 0x28
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	e00d      	b.n	80033f4 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d105      	bne.n	80033ee <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	601a      	str	r2, [r3, #0]
            break;
 80033ec:	e007      	b.n	80033fe <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ed      	bne.n	80033d8 <lfs_mlist_remove+0x12>
        }
    }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4413      	add	r3, r2
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003450:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8003452:	fbb3 f1f2 	udiv	r1, r3, r2
 8003456:	fb01 f202 	mul.w	r2, r1, r2
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	d212      	bcs.n	800348e <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	009a      	lsls	r2, r3, #2
 8003472:	440a      	add	r2, r1
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	f002 021f 	and.w	r2, r2, #31
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4403      	add	r3, r0
 800348a:	430a      	orrs	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ffe4 	bl	800349c <lfs_alloc_ack>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80034e6:	e04f      	b.n	8003588 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d132      	bne.n	8003588 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800352e:	6a12      	ldr	r2, [r2, #32]
 8003530:	fbb3 f1f2 	udiv	r1, r3, r2
 8003534:	fb01 f202 	mul.w	r2, r1, r2
 8003538:	1a9a      	subs	r2, r3, r2
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800353e:	e009      	b.n	8003554 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354e:	1e5a      	subs	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	429a      	cmp	r2, r3
 800355e:	d011      	beq.n	8003584 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1dd      	bne.n	8003540 <lfs_alloc+0x64>
                }

                return 0;
 8003584:	2300      	movs	r3, #0
 8003586:	e050      	b.n	800362a <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	429a      	cmp	r2, r3
 8003592:	d1a9      	bne.n	80034e8 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10f      	bne.n	80035bc <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	4413      	add	r3, r2
 80035a6:	4a23      	ldr	r2, [pc, #140]	; (8003634 <lfs_alloc+0x158>)
 80035a8:	9200      	str	r2, [sp, #0]
 80035aa:	f240 2247 	movw	r2, #583	; 0x247
 80035ae:	4922      	ldr	r1, [pc, #136]	; (8003638 <lfs_alloc+0x15c>)
 80035b0:	4822      	ldr	r0, [pc, #136]	; (800363c <lfs_alloc+0x160>)
 80035b2:	f006 fb33 	bl	8009c1c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80035b6:	f06f 031b 	mvn.w	r3, #27
 80035ba:	e036      	b.n	800362a <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80035ca:	6a12      	ldr	r2, [r2, #32]
 80035cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80035d0:	fb01 f202 	mul.w	r2, r1, r2
 80035d4:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	00da      	lsls	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f7ff f811 	bl	8002610 <lfs_min>
 80035ee:	4602      	mov	r2, r0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	461a      	mov	r2, r3
 8003606:	2100      	movs	r1, #0
 8003608:	f005 ff32 	bl	8009470 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800360c:	2301      	movs	r3, #1
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	490b      	ldr	r1, [pc, #44]	; (8003640 <lfs_alloc+0x164>)
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f004 fc96 	bl	8007f44 <lfs_fs_rawtraverse>
 8003618:	60f8      	str	r0, [r7, #12]
        if (err) {
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f43f af62 	beq.w	80034e6 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ff49 	bl	80034ba <lfs_alloc_drop>
            return err;
 8003628:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	0800a5cc 	.word	0x0800a5cc
 8003638:	0800a4c8 	.word	0x0800a4c8
 800363c:	0800a5a4 	.word	0x0800a5a4
 8003640:	0800342f 	.word	0x0800342f

08003644 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b08f      	sub	sp, #60	; 0x3c
 8003648:	af04      	add	r7, sp, #16
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	333c      	adds	r3, #60	; 0x3c
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fd8e 	bl	800318c <lfs_gstate_hasmovehere>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80b9 	beq.w	80037ea <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fcdf 	bl	800303c <lfs_tag_id>
 800367e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80b2 	beq.w	80037ea <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fcd6 	bl	800303c <lfs_tag_id>
 8003690:	4603      	mov	r3, r0
 8003692:	461c      	mov	r4, r3
 8003694:	6838      	ldr	r0, [r7, #0]
 8003696:	f7ff fcd1 	bl	800303c <lfs_tag_id>
 800369a:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800369c:	429c      	cmp	r4, r3
 800369e:	f200 80a4 	bhi.w	80037ea <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80036a8:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80036aa:	e09e      	b.n	80037ea <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fce1 	bl	8003076 <lfs_tag_dsize>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	9203      	str	r2, [sp, #12]
 80036ca:	f107 0210 	add.w	r2, r7, #16
 80036ce:	9202      	str	r2, [sp, #8]
 80036d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d2:	9201      	str	r2, [sp, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2304      	movs	r3, #4
 80036d8:	460a      	mov	r2, r1
 80036da:	2100      	movs	r1, #0
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff f873 	bl	80027c8 <lfs_bd_read>
 80036e2:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <lfs_dir_getslice+0xaa>
            return err;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	e089      	b.n	8003802 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff f814 	bl	800271e <lfs_frombe32>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4053      	eors	r3, r2
 80036fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003700:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fc9a 	bl	800303c <lfs_tag_id>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d02b      	beq.n	8003766 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800370e:	69f8      	ldr	r0, [r7, #28]
 8003710:	f7ff fc5a 	bl	8002fc8 <lfs_tag_type1>
 8003714:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8003716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371a:	d124      	bne.n	8003766 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800371c:	69f8      	ldr	r0, [r7, #28]
 800371e:	f7ff fc8d 	bl	800303c <lfs_tag_id>
 8003722:	4603      	mov	r3, r0
 8003724:	461c      	mov	r4, r3
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fc85 	bl	800303c <lfs_tag_id>
 8003732:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003734:	429c      	cmp	r4, r3
 8003736:	d816      	bhi.n	8003766 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	1ad2      	subs	r2, r2, r3
 800373e:	4b33      	ldr	r3, [pc, #204]	; (800380c <lfs_dir_getslice+0x1c8>)
 8003740:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8003742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	429a      	cmp	r2, r3
 800374e:	d102      	bne.n	8003756 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8003750:	f06f 0301 	mvn.w	r3, #1
 8003754:	e055      	b.n	8003802 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003756:	69f8      	ldr	r0, [r7, #28]
 8003758:	f7ff fc63 	bl	8003022 <lfs_tag_splice>
 800375c:	4603      	mov	r3, r0
 800375e:	029a      	lsls	r2, r3, #10
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	4413      	add	r3, r2
 8003764:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	1ad2      	subs	r2, r2, r3
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	405a      	eors	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4013      	ands	r3, r2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d138      	bne.n	80037ea <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 8003778:	69f8      	ldr	r0, [r7, #28]
 800377a:	f7ff fc12 	bl	8002fa2 <lfs_tag_isdelete>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 8003784:	f06f 0301 	mvn.w	r3, #1
 8003788:	e03b      	b.n	8003802 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800378a:	69f8      	ldr	r0, [r7, #28]
 800378c:	f7ff fc66 	bl	800305c <lfs_tag_size>
 8003790:	4603      	mov	r3, r0
 8003792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe ff3b 	bl	8002610 <lfs_min>
 800379a:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80037a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037a6:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80037a8:	3204      	adds	r2, #4
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	9103      	str	r1, [sp, #12]
 80037ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b0:	9102      	str	r1, [sp, #8]
 80037b2:	9201      	str	r2, [sp, #4]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4602      	mov	r2, r0
 80037ba:	2100      	movs	r1, #0
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff f803 	bl	80027c8 <lfs_bd_read>
 80037c2:	61b8      	str	r0, [r7, #24]
            if (err) {
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <lfs_dir_getslice+0x18a>
                return err;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	e019      	b.n	8003802 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80037ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	18d0      	adds	r0, r2, r3
 80037d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	2100      	movs	r1, #0
 80037de:	f005 fe47 	bl	8009470 <memset>

            return tag + gdiff;
 80037e2:	6a3a      	ldr	r2, [r7, #32]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	e00b      	b.n	8003802 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fc42 	bl	8003076 <lfs_tag_dsize>
 80037f2:	4603      	mov	r3, r0
 80037f4:	3304      	adds	r3, #4
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f4bf af57 	bcs.w	80036ac <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 80037fe:	f06f 0301 	mvn.w	r3, #1
}
 8003802:	4618      	mov	r0, r3
 8003804:	372c      	adds	r7, #44	; 0x2c
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}
 800380a:	bf00      	nop
 800380c:	000ffc00 	.word	0x000ffc00

08003810 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af04      	add	r7, sp, #16
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800381e:	6838      	ldr	r0, [r7, #0]
 8003820:	f7ff fc1c 	bl	800305c <lfs_tag_size>
 8003824:	4603      	mov	r3, r0
 8003826:	9302      	str	r3, [sp, #8]
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	2300      	movs	r3, #0
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f7ff ff04 	bl	8003644 <lfs_dir_getslice>
 800383c:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8003846:	b580      	push	{r7, lr}
 8003848:	b08c      	sub	sp, #48	; 0x30
 800384a:	af04      	add	r7, sp, #16
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8003858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	441a      	add	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	429a      	cmp	r2, r3
 8003866:	f240 80c0 	bls.w	80039ea <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800386a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800386e:	e0c1      	b.n	80039f4 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003872:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d03f      	beq.n	80038fa <lfs_dir_getread+0xb4>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f113 0f02 	cmn.w	r3, #2
 8003882:	d13a      	bne.n	80038fa <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800388e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003890:	429a      	cmp	r2, r3
 8003892:	d232      	bcs.n	80038fa <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389a:	429a      	cmp	r2, r3
 800389c:	d324      	bcc.n	80038e8 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	1acb      	subs	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f7fe feae 	bl	8002610 <lfs_min>
 80038b4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038c0:	1acb      	subs	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4619      	mov	r1, r3
 80038c8:	69f8      	ldr	r0, [r7, #28]
 80038ca:	f005 fdc3 	bl	8009454 <memcpy>

                data += diff;
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	61fb      	str	r3, [r7, #28]
                off += diff;
 80038d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80038de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80038e6:	e080      	b.n	80039ea <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	69b8      	ldr	r0, [r7, #24]
 80038f4:	f7fe fe8c 	bl	8002610 <lfs_min>
 80038f8:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f113 0f02 	cmn.w	r3, #2
 8003902:	d13a      	bne.n	800397a <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800390e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003910:	429a      	cmp	r2, r3
 8003912:	d232      	bcs.n	800397a <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391a:	429a      	cmp	r2, r3
 800391c:	d324      	bcc.n	8003968 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
 8003926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003928:	1acb      	subs	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	4619      	mov	r1, r3
 800392e:	69b8      	ldr	r0, [r7, #24]
 8003930:	f7fe fe6e 	bl	8002610 <lfs_min>
 8003934:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003940:	1acb      	subs	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4619      	mov	r1, r3
 8003948:	69f8      	ldr	r0, [r7, #28]
 800394a:	f005 fd83 	bl	8009454 <memcpy>

                data += diff;
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	4413      	add	r3, r2
 8003954:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800395e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003966:	e040      	b.n	80039ea <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	4619      	mov	r1, r3
 8003972:	69b8      	ldr	r0, [r7, #24]
 8003974:	f7fe fe4c 	bl	8002610 <lfs_min>
 8003978:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f06f 0201 	mvn.w	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	4619      	mov	r1, r3
 800398a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800398c:	f7fe fe50 	bl	8002630 <lfs_aligndown>
 8003990:	4602      	mov	r2, r0
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	441a      	add	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f7fe fe58 	bl	800265a <lfs_alignup>
 80039aa:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fe fe2b 	bl	8002610 <lfs_min>
 80039ba:	4602      	mov	r2, r0
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	6889      	ldr	r1, [r1, #8]
 80039cc:	9102      	str	r1, [sp, #8]
 80039ce:	9201      	str	r2, [sp, #4]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fe33 	bl	8003644 <lfs_dir_getslice>
 80039de:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da01      	bge.n	80039ea <lfs_dir_getread+0x1a4>
            return err;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	e004      	b.n	80039f4 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80039ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f47f af3f 	bne.w	8003870 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <lfs_dir_traverse_filter+0x1e>
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <lfs_dir_traverse_filter+0xac>)
 8003a18:	e000      	b.n	8003a1c <lfs_dir_traverse_filter+0x20>
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8003a1c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	405a      	eors	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d014      	beq.n	8003a58 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fab5 	bl	8002fa2 <lfs_tag_isdelete>
 8003a38:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <lfs_dir_traverse_filter+0xac>)
 8003a42:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <lfs_dir_traverse_filter+0xb4>)
 8003a4a:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003a4c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8003a50:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d104      	bne.n	8003a62 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
        return true;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e01e      	b.n	8003aa0 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003a62:	68b8      	ldr	r0, [r7, #8]
 8003a64:	f7ff fab0 	bl	8002fc8 <lfs_tag_type1>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6e:	d116      	bne.n	8003a9e <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8003a70:	68b8      	ldr	r0, [r7, #8]
 8003a72:	f7ff fae3 	bl	800303c <lfs_tag_id>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461c      	mov	r4, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fadc 	bl	800303c <lfs_tag_id>
 8003a84:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8003a86:	429c      	cmp	r4, r3
 8003a88:	d809      	bhi.n	8003a9e <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003a8a:	68b8      	ldr	r0, [r7, #8]
 8003a8c:	f7ff fac9 	bl	8003022 <lfs_tag_splice>
 8003a90:	4603      	mov	r3, r0
 8003a92:	029a      	lsls	r2, r3, #10
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	441a      	add	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]
    }

    return false;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd90      	pop	{r4, r7, pc}
 8003aa8:	7ffffc00 	.word	0x7ffffc00
 8003aac:	700ffc00 	.word	0x700ffc00
 8003ab0:	000ffc00 	.word	0x000ffc00

08003ab4 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b0c1      	sub	sp, #260	; 0x104
 8003ab8:	af04      	add	r7, sp, #16
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8003ac8:	6838      	ldr	r0, [r7, #0]
 8003aca:	f7ff fad4 	bl	8003076 <lfs_tag_dsize>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	441a      	add	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d237      	bcs.n	8003b4c <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8003adc:	6838      	ldr	r0, [r7, #0]
 8003ade:	f7ff faca 	bl	8003076 <lfs_tag_dsize>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2204      	movs	r2, #4
 8003af2:	9203      	str	r2, [sp, #12]
 8003af4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003af8:	9202      	str	r2, [sp, #8]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	9201      	str	r2, [sp, #4]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2304      	movs	r3, #4
 8003b02:	460a      	mov	r2, r1
 8003b04:	2100      	movs	r1, #0
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7fe fe5e 	bl	80027c8 <lfs_bd_read>
 8003b0c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8003b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <lfs_dir_traverse+0x6a>
                    return err;
 8003b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b1c:	e3a6      	b.n	800426c <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fdfc 	bl	800271e <lfs_frombe32>
 8003b26:	4602      	mov	r2, r0
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4053      	eors	r3, r2
 8003b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b30:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8003b3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8003b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	e01b      	b.n	8003b84 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8003b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	dd13      	ble.n	8003b7c <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8003b54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8003b5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8003b66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8003b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b74:	3b01      	subs	r3, #1
 8003b76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b7a:	e003      	b.n	8003b84 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8003b82:	e2a2      	b.n	80040ca <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8003b84:	4b7e      	ldr	r3, [pc, #504]	; (8003d80 <lfs_dir_traverse+0x2cc>)
 8003b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8003b8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b90:	405a      	eors	r2, r3
 8003b92:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003b96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b9a:	400b      	ands	r3, r1
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 8285 	bne.w	80040ae <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8003ba4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003ba8:	f7ff fa48 	bl	800303c <lfs_tag_id>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80f0 	beq.w	8003d94 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8003bb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d906      	bls.n	8003bca <lfs_dir_traverse+0x116>
 8003bbc:	4b71      	ldr	r3, [pc, #452]	; (8003d84 <lfs_dir_traverse+0x2d0>)
 8003bbe:	4a72      	ldr	r2, [pc, #456]	; (8003d88 <lfs_dir_traverse+0x2d4>)
 8003bc0:	f240 314e 	movw	r1, #846	; 0x34e
 8003bc4:	4871      	ldr	r0, [pc, #452]	; (8003d8c <lfs_dir_traverse+0x2d8>)
 8003bc6:	f005 fbcb 	bl	8009360 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8003bca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bcc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	33f0      	adds	r3, #240	; 0xf0
 8003bda:	443b      	add	r3, r7
 8003bdc:	3b98      	subs	r3, #152	; 0x98
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	33f0      	adds	r3, #240	; 0xf0
 8003bf0:	443b      	add	r3, r7
 8003bf2:	3b94      	subs	r3, #148	; 0x94
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	33f0      	adds	r3, #240	; 0xf0
 8003c06:	443b      	add	r3, r7
 8003c08:	3b90      	subs	r3, #144	; 0x90
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	33f0      	adds	r3, #240	; 0xf0
 8003c1c:	443b      	add	r3, r7
 8003c1e:	3b8c      	subs	r3, #140	; 0x8c
 8003c20:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	33f0      	adds	r3, #240	; 0xf0
 8003c34:	443b      	add	r3, r7
 8003c36:	3b88      	subs	r3, #136	; 0x88
 8003c38:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	33f0      	adds	r3, #240	; 0xf0
 8003c4c:	443b      	add	r3, r7
 8003c4e:	3b84      	subs	r3, #132	; 0x84
 8003c50:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	33f0      	adds	r3, #240	; 0xf0
 8003c64:	443b      	add	r3, r7
 8003c66:	3b80      	subs	r3, #128	; 0x80
 8003c68:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	33f0      	adds	r3, #240	; 0xf0
 8003c7c:	443b      	add	r3, r7
 8003c7e:	3b7c      	subs	r3, #124	; 0x7c
 8003c80:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	33f0      	adds	r3, #240	; 0xf0
 8003c94:	443b      	add	r3, r7
 8003c96:	3b7a      	subs	r3, #122	; 0x7a
 8003c98:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	33f0      	adds	r3, #240	; 0xf0
 8003cac:	443b      	add	r3, r7
 8003cae:	3b78      	subs	r3, #120	; 0x78
 8003cb0:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003cba:	4613      	mov	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	33f0      	adds	r3, #240	; 0xf0
 8003cc4:	443b      	add	r3, r7
 8003cc6:	3b74      	subs	r3, #116	; 0x74
 8003cc8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	33f0      	adds	r3, #240	; 0xf0
 8003cdc:	443b      	add	r3, r7
 8003cde:	3b70      	subs	r3, #112	; 0x70
 8003ce0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	33f0      	adds	r3, #240	; 0xf0
 8003cf4:	443b      	add	r3, r7
 8003cf6:	3b6c      	subs	r3, #108	; 0x6c
 8003cf8:	6019      	str	r1, [r3, #0]
 8003cfa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	33f0      	adds	r3, #240	; 0xf0
 8003d08:	443b      	add	r3, r7
 8003d0a:	3b68      	subs	r3, #104	; 0x68
 8003d0c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	33f0      	adds	r3, #240	; 0xf0
 8003d20:	443b      	add	r3, r7
 8003d22:	3b68      	subs	r3, #104	; 0x68
 8003d24:	3304      	adds	r3, #4
 8003d26:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003d2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d2e:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8003d32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003d36:	3301      	adds	r3, #1
 8003d38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <lfs_dir_traverse+0x2dc>)
 8003d5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8003d60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	3328      	adds	r3, #40	; 0x28
 8003d74:	440b      	add	r3, r1
 8003d76:	3304      	adds	r3, #4
 8003d78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d7c:	e6a4      	b.n	8003ac8 <lfs_dir_traverse+0x14>
 8003d7e:	bf00      	nop
 8003d80:	7ff00000 	.word	0x7ff00000
 8003d84:	0800a5d0 	.word	0x0800a5d0
 8003d88:	0800ae64 	.word	0x0800ae64
 8003d8c:	0800a4c8 	.word	0x0800a4c8
 8003d90:	080039fd 	.word	0x080039fd
                continue;
            }
        }

popped:
 8003d94:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8003d96:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003d9a:	f7ff f94f 	bl	800303c <lfs_tag_id>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d015      	beq.n	8003dd0 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff f948 	bl	800303c <lfs_tag_id>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8003db0:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8003db4:	4293      	cmp	r3, r2
 8003db6:	f200 817c 	bhi.w	80040b2 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8003dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff f93d 	bl	800303c <lfs_tag_id>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	f240 8171 	bls.w	80040b2 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff f908 	bl	8002fe8 <lfs_tag_type3>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f43f ae74 	beq.w	8003ac8 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8003de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff f900 	bl	8002fe8 <lfs_tag_type3>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	f240 1301 	movw	r3, #257	; 0x101
 8003df0:	429a      	cmp	r2, r3
 8003df2:	f040 80e0 	bne.w	8003fb6 <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8003df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dfa:	4ab1      	ldr	r2, [pc, #708]	; (80040c0 <lfs_dir_traverse+0x60c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	f000 815a 	beq.w	80040b6 <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8003e02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	33f0      	adds	r3, #240	; 0xf0
 8003e10:	443b      	add	r3, r7
 8003e12:	3b98      	subs	r3, #152	; 0x98
 8003e14:	4618      	mov	r0, r3
 8003e16:	233c      	movs	r3, #60	; 0x3c
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f005 fb28 	bl	8009470 <memset>
 8003e20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	33f0      	adds	r3, #240	; 0xf0
 8003e2e:	443b      	add	r3, r7
 8003e30:	3b98      	subs	r3, #152	; 0x98
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	33f0      	adds	r3, #240	; 0xf0
 8003e44:	443b      	add	r3, r7
 8003e46:	3b94      	subs	r3, #148	; 0x94
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	33f0      	adds	r3, #240	; 0xf0
 8003e5a:	443b      	add	r3, r7
 8003e5c:	3b90      	subs	r3, #144	; 0x90
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	33f0      	adds	r3, #240	; 0xf0
 8003e70:	443b      	add	r3, r7
 8003e72:	3b8c      	subs	r3, #140	; 0x8c
 8003e74:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	33f0      	adds	r3, #240	; 0xf0
 8003e88:	443b      	add	r3, r7
 8003e8a:	3b88      	subs	r3, #136	; 0x88
 8003e8c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	33f0      	adds	r3, #240	; 0xf0
 8003ea0:	443b      	add	r3, r7
 8003ea2:	3b84      	subs	r3, #132	; 0x84
 8003ea4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	33f0      	adds	r3, #240	; 0xf0
 8003eb8:	443b      	add	r3, r7
 8003eba:	3b80      	subs	r3, #128	; 0x80
 8003ebc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	33f0      	adds	r3, #240	; 0xf0
 8003ed0:	443b      	add	r3, r7
 8003ed2:	3b7c      	subs	r3, #124	; 0x7c
 8003ed4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	33f0      	adds	r3, #240	; 0xf0
 8003ee8:	443b      	add	r3, r7
 8003eea:	3b7a      	subs	r3, #122	; 0x7a
 8003eec:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	33f0      	adds	r3, #240	; 0xf0
 8003f00:	443b      	add	r3, r7
 8003f02:	3b78      	subs	r3, #120	; 0x78
 8003f04:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	33f0      	adds	r3, #240	; 0xf0
 8003f18:	443b      	add	r3, r7
 8003f1a:	3b74      	subs	r3, #116	; 0x74
 8003f1c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	33f0      	adds	r3, #240	; 0xf0
 8003f30:	443b      	add	r3, r7
 8003f32:	3b70      	subs	r3, #112	; 0x70
 8003f34:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003f38:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8003f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8003f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff f888 	bl	800305c <lfs_tag_size>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8003f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff f871 	bl	800303c <lfs_tag_id>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8003f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f64:	60bb      	str	r3, [r7, #8]
            off = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f6e:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8003f7c:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <lfs_dir_traverse+0x610>)
 8003f7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8003f82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8003f8a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003f8e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8003f92:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003f96:	3301      	adds	r3, #1
 8003f98:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8003f9c:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8003fa0:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8003fac:	4413      	add	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8003fb4:	e588      	b.n	8003ac8 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff f815 	bl	8002fe8 <lfs_tag_type3>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8003fc4:	d159      	bne.n	800407a <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fcc:	e04b      	b.n	8004066 <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8003fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003ff0:	051c      	lsls	r4, r3, #20
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff f821 	bl	800303c <lfs_tag_id>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8004002:	4413      	add	r3, r2
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	ea44 0103 	orr.w	r1, r4, r3
 800400a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	461a      	mov	r2, r3
 8004018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800401c:	4413      	add	r3, r2
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8004022:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	461a      	mov	r2, r3
 8004030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004034:	4413      	add	r3, r2
 8004036:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8004038:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800403c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004040:	4798      	blx	r3
 8004042:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8004046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800404a:	2b00      	cmp	r3, #0
 800404c:	da02      	bge.n	8004054 <lfs_dir_traverse+0x5a0>
                    return res;
 800404e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004052:	e10b      	b.n	800426c <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8004054:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d12e      	bne.n	80040ba <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004060:	3301      	adds	r3, #1
 8004062:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fff7 	bl	800305c <lfs_tag_size>
 800406e:	4602      	mov	r2, r0
 8004070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004074:	4293      	cmp	r3, r2
 8004076:	d3aa      	bcc.n	8003fce <lfs_dir_traverse+0x51a>
 8004078:	e526      	b.n	8003ac8 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800407a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800407e:	029a      	lsls	r2, r3, #10
 8004080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004082:	18d1      	adds	r1, r2, r3
 8004084:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004088:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800408c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004090:	4798      	blx	r3
 8004092:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8004096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800409a:	2b00      	cmp	r3, #0
 800409c:	da02      	bge.n	80040a4 <lfs_dir_traverse+0x5f0>
                return res;
 800409e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040a2:	e0e3      	b.n	800426c <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 80040a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <lfs_dir_traverse+0x614>
 80040ac:	e50c      	b.n	8003ac8 <lfs_dir_traverse+0x14>
                continue;
 80040ae:	bf00      	nop
 80040b0:	e50a      	b.n	8003ac8 <lfs_dir_traverse+0x14>
            continue;
 80040b2:	bf00      	nop
 80040b4:	e508      	b.n	8003ac8 <lfs_dir_traverse+0x14>
                continue;
 80040b6:	bf00      	nop
 80040b8:	e506      	b.n	8003ac8 <lfs_dir_traverse+0x14>
                    break;
 80040ba:	bf00      	nop
        {
 80040bc:	e504      	b.n	8003ac8 <lfs_dir_traverse+0x14>
 80040be:	bf00      	nop
 80040c0:	080039fd 	.word	0x080039fd
 80040c4:	600ffc00 	.word	0x600ffc00
                break;
 80040c8:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80040ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80ca 	beq.w	8004268 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80040d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	33f0      	adds	r3, #240	; 0xf0
 80040e4:	443b      	add	r3, r7
 80040e6:	3b98      	subs	r3, #152	; 0x98
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80040ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040f0:	1e5a      	subs	r2, r3, #1
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	33f0      	adds	r3, #240	; 0xf0
 80040fc:	443b      	add	r3, r7
 80040fe:	3b94      	subs	r3, #148	; 0x94
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8004104:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004108:	1e5a      	subs	r2, r3, #1
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	33f0      	adds	r3, #240	; 0xf0
 8004114:	443b      	add	r3, r7
 8004116:	3b90      	subs	r3, #144	; 0x90
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800411c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004120:	1e5a      	subs	r2, r3, #1
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	33f0      	adds	r3, #240	; 0xf0
 800412c:	443b      	add	r3, r7
 800412e:	3b8c      	subs	r3, #140	; 0x8c
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8004136:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	33f0      	adds	r3, #240	; 0xf0
 8004146:	443b      	add	r3, r7
 8004148:	3b88      	subs	r3, #136	; 0x88
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8004150:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004154:	1e5a      	subs	r2, r3, #1
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	33f0      	adds	r3, #240	; 0xf0
 8004160:	443b      	add	r3, r7
 8004162:	3b84      	subs	r3, #132	; 0x84
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 800416a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800416e:	1e5a      	subs	r2, r3, #1
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	33f0      	adds	r3, #240	; 0xf0
 800417a:	443b      	add	r3, r7
 800417c:	3b80      	subs	r3, #128	; 0x80
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8004184:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004188:	1e5a      	subs	r2, r3, #1
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	33f0      	adds	r3, #240	; 0xf0
 8004194:	443b      	add	r3, r7
 8004196:	3b7c      	subs	r3, #124	; 0x7c
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800419e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041a2:	1e5a      	subs	r2, r3, #1
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	33f0      	adds	r3, #240	; 0xf0
 80041ae:	443b      	add	r3, r7
 80041b0:	3b7a      	subs	r3, #122	; 0x7a
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80041b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041bc:	1e5a      	subs	r2, r3, #1
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	33f0      	adds	r3, #240	; 0xf0
 80041c8:	443b      	add	r3, r7
 80041ca:	3b78      	subs	r3, #120	; 0x78
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80041d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041d6:	1e5a      	subs	r2, r3, #1
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	33f0      	adds	r3, #240	; 0xf0
 80041e2:	443b      	add	r3, r7
 80041e4:	3b74      	subs	r3, #116	; 0x74
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80041ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80041f0:	1e5a      	subs	r2, r3, #1
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	33f0      	adds	r3, #240	; 0xf0
 80041fc:	443b      	add	r3, r7
 80041fe:	3b70      	subs	r3, #112	; 0x70
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8004206:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800420a:	1e5a      	subs	r2, r3, #1
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	33f0      	adds	r3, #240	; 0xf0
 8004216:	443b      	add	r3, r7
 8004218:	3b6c      	subs	r3, #108	; 0x6c
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 800421e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004222:	1e5a      	subs	r2, r3, #1
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	33f0      	adds	r3, #240	; 0xf0
 800422e:	443b      	add	r3, r7
 8004230:	3b68      	subs	r3, #104	; 0x68
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8004238:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	33f0      	adds	r3, #240	; 0xf0
 8004248:	443b      	add	r3, r7
 800424a:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 800424e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004252:	3204      	adds	r2, #4
 8004254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004258:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800425c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004260:	3b01      	subs	r3, #1
 8004262:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8004266:	e596      	b.n	8003d96 <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 8004268:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 800426c:	4618      	mov	r0, r3
 800426e:	37f4      	adds	r7, #244	; 0xf4
 8004270:	46bd      	mov	sp, r7
 8004272:	bd90      	pop	{r4, r7, pc}

08004274 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b09f      	sub	sp, #124	; 0x7c
 8004278:	af04      	add	r7, sp, #16
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004286:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	429a      	cmp	r2, r3
 8004294:	d207      	bcs.n	80042a6 <lfs_dir_fetchmatch+0x32>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 80042a6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80042aa:	e342      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80042ac:	2300      	movs	r3, #0
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
 80042b0:	2300      	movs	r3, #0
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80042b8:	2300      	movs	r3, #0
 80042ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042bc:	e052      	b.n	8004364 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 80042be:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80042c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80042c8:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80042ca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80042ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042d0:	0092      	lsls	r2, r2, #2
 80042d2:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80042d4:	2104      	movs	r1, #4
 80042d6:	9103      	str	r1, [sp, #12]
 80042d8:	9202      	str	r2, [sp, #8]
 80042da:	2200      	movs	r2, #0
 80042dc:	9201      	str	r2, [sp, #4]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2304      	movs	r3, #4
 80042e2:	4602      	mov	r2, r0
 80042e4:	2100      	movs	r1, #0
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7fe fa6e 	bl	80027c8 <lfs_bd_read>
 80042ec:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 80042ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	3368      	adds	r3, #104	; 0x68
 80042f4:	443b      	add	r3, r7
 80042f6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe f9f8 	bl	80026f0 <lfs_fromle32>
 8004300:	4602      	mov	r2, r0
 8004302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	3368      	adds	r3, #104	; 0x68
 8004308:	443b      	add	r3, r7
 800430a:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <lfs_dir_fetchmatch+0xac>
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800431a:	d001      	beq.n	8004320 <lfs_dir_fetchmatch+0xac>
            return err;
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	e308      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004326:	d01a      	beq.n	800435e <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8004328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	3368      	adds	r3, #104	; 0x68
 800432e:	443b      	add	r3, r7
 8004330:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004336:	3301      	adds	r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	bfb8      	it	lt
 8004340:	425b      	neglt	r3, r3
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	3368      	adds	r3, #104	; 0x68
 8004346:	443b      	add	r3, r7
 8004348:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f7fe f9c0 	bl	80026d4 <lfs_scmp>
 8004354:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8004356:	2b00      	cmp	r3, #0
 8004358:	dd01      	ble.n	800435e <lfs_dir_fetchmatch+0xea>
            r = i;
 800435a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800435c:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800435e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004360:	3301      	adds	r3, #1
 8004362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004366:	2b01      	cmp	r3, #1
 8004368:	dda9      	ble.n	80042be <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800436a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436c:	2b00      	cmp	r3, #0
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	bfb8      	it	lt
 8004374:	425b      	neglt	r3, r3
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4413      	add	r3, r2
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8004382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004384:	3301      	adds	r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	bfb8      	it	lt
 800438e:	425b      	neglt	r3, r3
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800439c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	bfb8      	it	lt
 80043a6:	425b      	neglt	r3, r3
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	3368      	adds	r3, #104	; 0x68
 80043ac:	443b      	add	r3, r7
 80043ae:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80043bc:	2300      	movs	r3, #0
 80043be:	65bb      	str	r3, [r7, #88]	; 0x58
 80043c0:	e2a3      	b.n	800490a <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ca:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80043d2:	4a96      	ldr	r2, [pc, #600]	; (800462c <lfs_dir_fetchmatch+0x3b8>)
 80043d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043dc:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80043e0:	2300      	movs	r3, #0
 80043e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 80043e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e8:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe f989 	bl	8002706 <lfs_tole32>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3308      	adds	r3, #8
 80043fe:	2204      	movs	r2, #4
 8004400:	4619      	mov	r1, r3
 8004402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004406:	f004 fb69 	bl	8008adc <lfs_crc>
 800440a:	4603      	mov	r3, r0
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe f96c 	bl	80026f0 <lfs_fromle32>
 8004418:	4602      	mov	r2, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800441e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004420:	f7fe fe29 	bl	8003076 <lfs_tag_dsize>
 8004424:	4602      	mov	r2, r0
 8004426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004428:	4413      	add	r3, r2
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800442c:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8004432:	69d8      	ldr	r0, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2204      	movs	r2, #4
 800443a:	9203      	str	r2, [sp, #12]
 800443c:	f107 0220 	add.w	r2, r7, #32
 8004440:	9202      	str	r2, [sp, #8]
 8004442:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004444:	9201      	str	r2, [sp, #4]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	4603      	mov	r3, r0
 800444a:	460a      	mov	r2, r1
 800444c:	2100      	movs	r1, #0
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7fe f9ba 	bl	80027c8 <lfs_bd_read>
 8004454:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8004456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800445c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004462:	d103      	bne.n	800446c <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	759a      	strb	r2, [r3, #22]
                    break;
 800446a:	e1d6      	b.n	800481a <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 800446c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446e:	e260      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f107 0120 	add.w	r1, r7, #32
 8004476:	2204      	movs	r2, #4
 8004478:	4618      	mov	r0, r3
 800447a:	f004 fb2f 	bl	8008adc <lfs_crc>
 800447e:	4603      	mov	r3, r0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe f94a 	bl	800271e <lfs_frombe32>
 800448a:	4602      	mov	r2, r0
 800448c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448e:	4053      	eors	r3, r2
 8004490:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe fd76 	bl	8002f86 <lfs_tag_isvalid>
 800449a:	4603      	mov	r3, r0
 800449c:	f083 0301 	eor.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01b      	beq.n	80044de <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80044a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80044a8:	f7fe fd8e 	bl	8002fc8 <lfs_tag_type1>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80044b2:	d10d      	bne.n	80044d0 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044bc:	6992      	ldr	r2, [r2, #24]
 80044be:	fbb3 f1f2 	udiv	r1, r3, r2
 80044c2:	fb01 f202 	mul.w	r2, r1, r2
 80044c6:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <lfs_dir_fetchmatch+0x25c>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <lfs_dir_fetchmatch+0x25e>
 80044d0:	2300      	movs	r3, #0
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	759a      	strb	r2, [r3, #22]
                break;
 80044dc:	e19d      	b.n	800481a <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fdc8 	bl	8003076 <lfs_tag_dsize>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d903      	bls.n	80044fe <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2200      	movs	r2, #0
 80044fa:	759a      	strb	r2, [r3, #22]
                break;
 80044fc:	e18d      	b.n	800481a <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fd5f 	bl	8002fc8 <lfs_tag_type1>
 800450a:	4603      	mov	r3, r0
 800450c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004510:	d164      	bne.n	80045dc <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8004512:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004518:	69dc      	ldr	r4, [r3, #28]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004520:	3204      	adds	r2, #4
 8004522:	2104      	movs	r1, #4
 8004524:	9103      	str	r1, [sp, #12]
 8004526:	f107 011c 	add.w	r1, r7, #28
 800452a:	9102      	str	r1, [sp, #8]
 800452c:	9201      	str	r2, [sp, #4]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	4623      	mov	r3, r4
 8004532:	4602      	mov	r2, r0
 8004534:	2100      	movs	r1, #0
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7fe f946 	bl	80027c8 <lfs_bd_read>
 800453c:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800453e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 8004544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004546:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800454a:	d103      	bne.n	8004554 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	759a      	strb	r2, [r3, #22]
                        break;
 8004552:	e162      	b.n	800481a <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8004554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8004556:	e1ec      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe f8c8 	bl	80026f0 <lfs_fromle32>
 8004560:	4603      	mov	r3, r0
 8004562:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8004564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	429a      	cmp	r2, r3
 800456a:	d003      	beq.n	8004574 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	759a      	strb	r2, [r3, #22]
                    break;
 8004572:	e152      	b.n	800481a <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fd46 	bl	8003008 <lfs_tag_chunk>
 800457c:	4603      	mov	r3, r0
 800457e:	07db      	lsls	r3, r3, #31
 8004580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004582:	4053      	eors	r3, r2
 8004584:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800458e:	2204      	movs	r2, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f004 faa3 	bl	8008adc <lfs_crc>
 8004596:	4602      	mov	r2, r0
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800459c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459e:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe fd67 	bl	8003076 <lfs_tag_dsize>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ac:	441a      	add	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045b6:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80045be:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80045c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80045c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80045d2:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 80045d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	e720      	b.n	800441e <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80045dc:	2304      	movs	r3, #4
 80045de:	647b      	str	r3, [r7, #68]	; 0x44
 80045e0:	e032      	b.n	8004648 <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 80045e2:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80045e8:	69dc      	ldr	r4, [r3, #28]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f2:	440a      	add	r2, r1
 80045f4:	2101      	movs	r1, #1
 80045f6:	9103      	str	r1, [sp, #12]
 80045f8:	f107 011b 	add.w	r1, r7, #27
 80045fc:	9102      	str	r1, [sp, #8]
 80045fe:	9201      	str	r2, [sp, #4]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4623      	mov	r3, r4
 8004604:	4602      	mov	r2, r0
 8004606:	2100      	movs	r1, #0
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7fe f8dd 	bl	80027c8 <lfs_bd_read>
 800460e:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8004610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 8004616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004618:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800461c:	d103      	bne.n	8004626 <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2200      	movs	r2, #0
 8004622:	759a      	strb	r2, [r3, #22]
 8004624:	e018      	b.n	8004658 <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 8004626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8004628:	e183      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
 800462a:	bf00      	nop
 800462c:	0800a610 	.word	0x0800a610
                }

                crc = lfs_crc(crc, &dat, 1);
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	f107 011b 	add.w	r1, r7, #27
 8004636:	2201      	movs	r2, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f004 fa4f 	bl	8008adc <lfs_crc>
 800463e:	4603      	mov	r3, r0
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8004642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004644:	3301      	adds	r3, #1
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fd13 	bl	8003076 <lfs_tag_dsize>
 8004650:	4602      	mov	r2, r0
 8004652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004654:	4293      	cmp	r3, r2
 8004656:	d3c4      	bcc.n	80045e2 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fcb4 	bl	8002fc8 <lfs_tag_type1>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d113      	bne.n	800468e <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe fce7 	bl	800303c <lfs_tag_id>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004676:	4293      	cmp	r3, r2
 8004678:	f200 8083 	bhi.w	8004782 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fcdc 	bl	800303c <lfs_tag_id>
 8004684:	4603      	mov	r3, r0
 8004686:	3301      	adds	r3, #1
 8004688:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800468c:	e079      	b.n	8004782 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fc99 	bl	8002fc8 <lfs_tag_type1>
 8004696:	4603      	mov	r3, r0
 8004698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469c:	d134      	bne.n	8004708 <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fe fcbe 	bl	8003022 <lfs_tag_splice>
 80046a6:	4603      	mov	r3, r0
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046ae:	4413      	add	r3, r2
 80046b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80046b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b6:	4ba1      	ldr	r3, [pc, #644]	; (800493c <lfs_dir_fetchmatch+0x6c8>)
 80046b8:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80046ba:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80046be:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80046c2:	6a3a      	ldr	r2, [r7, #32]
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d104      	bne.n	80046d2 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 80046c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d0:	e057      	b.n	8004782 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 80046d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d8:	d053      	beq.n	8004782 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fcad 	bl	800303c <lfs_tag_id>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461c      	mov	r4, r3
 80046e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe fca7 	bl	800303c <lfs_tag_id>
 80046ee:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80046f0:	429c      	cmp	r4, r3
 80046f2:	d846      	bhi.n	8004782 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fc93 	bl	8003022 <lfs_tag_splice>
 80046fc:	4603      	mov	r3, r0
 80046fe:	029a      	lsls	r2, r3, #10
 8004700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004702:	4413      	add	r3, r2
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
 8004706:	e03c      	b.n	8004782 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fc5c 	bl	8002fc8 <lfs_tag_type1>
 8004710:	4603      	mov	r3, r0
 8004712:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004716:	d134      	bne.n	8004782 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fc74 	bl	8003008 <lfs_tag_chunk>
 8004720:	4603      	mov	r3, r0
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8004732:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8004738:	69dc      	ldr	r4, [r3, #28]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004740:	3204      	adds	r2, #4
 8004742:	2108      	movs	r1, #8
 8004744:	9103      	str	r1, [sp, #12]
 8004746:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800474a:	9102      	str	r1, [sp, #8]
 800474c:	9201      	str	r2, [sp, #4]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	4623      	mov	r3, r4
 8004752:	4602      	mov	r2, r0
 8004754:	2100      	movs	r1, #0
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7fe f836 	bl	80027c8 <lfs_bd_read>
 800475c:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800475e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8004764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004766:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800476a:	d103      	bne.n	8004774 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	759a      	strb	r2, [r3, #22]
                        break;
 8004772:	e052      	b.n	800481a <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8004774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004776:	e0dc      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8004778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe fbce 	bl	8002f1e <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004786:	405a      	eors	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f47f ae46 	bne.w	800441e <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004792:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004798:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	f107 0210 	add.w	r2, r7, #16
 80047a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047a8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80047ac:	4798      	blx	r3
 80047ae:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	da09      	bge.n	80047ca <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 80047b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80047bc:	d103      	bne.n	80047c6 <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2200      	movs	r2, #0
 80047c2:	759a      	strb	r2, [r3, #22]
 80047c4:	e029      	b.n	800481a <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 80047c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 80047c8:	e0b3      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d4:	e623      	b.n	800441e <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047da:	405a      	eors	r2, r3
 80047dc:	4b58      	ldr	r3, [pc, #352]	; (8004940 <lfs_dir_fetchmatch+0x6cc>)
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d103      	bne.n	80047ec <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ea:	e618      	b.n	800441e <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 80047ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	f47f ae15 	bne.w	800441e <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fc20 	bl	800303c <lfs_tag_id>
 80047fc:	4603      	mov	r3, r0
 80047fe:	461c      	mov	r4, r3
 8004800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fc1a 	bl	800303c <lfs_tag_id>
 8004808:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800480a:	429c      	cmp	r4, r3
 800480c:	f63f ae07 	bhi.w	800441e <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004816:	64bb      	str	r3, [r7, #72]	; 0x48
 8004818:	e601      	b.n	800441e <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d100      	bne.n	8004824 <lfs_dir_fetchmatch+0x5b0>
 8004822:	e05d      	b.n	80048e0 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	333c      	adds	r3, #60	; 0x3c
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe fcad 	bl	800318c <lfs_gstate_hasmovehere>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d028      	beq.n	800488a <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe fbfd 	bl	800303c <lfs_tag_id>
 8004842:	4603      	mov	r3, r0
 8004844:	461c      	mov	r4, r3
 8004846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004848:	4618      	mov	r0, r3
 800484a:	f7fe fbf7 	bl	800303c <lfs_tag_id>
 800484e:	4603      	mov	r3, r0
 8004850:	429c      	cmp	r4, r3
 8004852:	d104      	bne.n	800485e <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8004854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800485a:	667b      	str	r3, [r7, #100]	; 0x64
 800485c:	e015      	b.n	800488a <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 800485e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004864:	d011      	beq.n	800488a <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe fbe6 	bl	800303c <lfs_tag_id>
 8004870:	4603      	mov	r3, r0
 8004872:	461c      	mov	r4, r3
 8004874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe fbe0 	bl	800303c <lfs_tag_id>
 800487c:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800487e:	429c      	cmp	r4, r3
 8004880:	d203      	bcs.n	800488a <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8004882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004884:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004888:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800488a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00f      	beq.n	80048b0 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8004890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fbd2 	bl	800303c <lfs_tag_id>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	8a9b      	ldrh	r3, [r3, #20]
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f7fd feb4 	bl	8002610 <lfs_min>
 80048a8:	4603      	mov	r3, r0
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048ae:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 80048b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fb67 	bl	8002f86 <lfs_tag_isvalid>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 80048be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c0:	e037      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 80048c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe fbb9 	bl	800303c <lfs_tag_id>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	8a9b      	ldrh	r3, [r3, #20]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d202      	bcs.n	80048dc <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 80048d6:	f06f 0301 	mvn.w	r3, #1
 80048da:	e02a      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	e028      	b.n	8004932 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe fa94 	bl	8002e10 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 80048e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ea:	3301      	adds	r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	bfb8      	it	lt
 80048f4:	425b      	neglt	r3, r3
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	3368      	adds	r3, #104	; 0x68
 80048fa:	443b      	add	r3, r7
 80048fc:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8004904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004906:	3301      	adds	r3, #1
 8004908:	65bb      	str	r3, [r7, #88]	; 0x58
 800490a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490c:	2b01      	cmp	r3, #1
 800490e:	f77f ad58 	ble.w	80043c2 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	490a      	ldr	r1, [pc, #40]	; (8004944 <lfs_dir_fetchmatch+0x6d0>)
 800491c:	9101      	str	r1, [sp, #4]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8004926:	4908      	ldr	r1, [pc, #32]	; (8004948 <lfs_dir_fetchmatch+0x6d4>)
 8004928:	4808      	ldr	r0, [pc, #32]	; (800494c <lfs_dir_fetchmatch+0x6d8>)
 800492a:	f005 f977 	bl	8009c1c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800492e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8004932:	4618      	mov	r0, r3
 8004934:	376c      	adds	r7, #108	; 0x6c
 8004936:	46bd      	mov	sp, r7
 8004938:	bd90      	pop	{r4, r7, pc}
 800493a:	bf00      	nop
 800493c:	000ffc00 	.word	0x000ffc00
 8004940:	7ffffc00 	.word	0x7ffffc00
 8004944:	0800a5cc 	.word	0x0800a5cc
 8004948:	0800a4c8 	.word	0x0800a4c8
 800494c:	0800a5d8 	.word	0x0800a5d8

08004950 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af04      	add	r7, sp, #16
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800495c:	2300      	movs	r3, #0
 800495e:	9303      	str	r3, [sp, #12]
 8004960:	2300      	movs	r3, #0
 8004962:	9302      	str	r3, [sp, #8]
 8004964:	2300      	movs	r3, #0
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff fc7c 	bl	8004274 <lfs_dir_fetchmatch>
 800497c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8004994:	f107 0310 	add.w	r3, r7, #16
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <lfs_dir_getgstate+0x5c>)
 800499c:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <lfs_dir_getgstate+0x60>)
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7fe ff35 	bl	8003810 <lfs_dir_get>
 80049a6:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da05      	bge.n	80049ba <lfs_dir_getgstate+0x32>
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f113 0f02 	cmn.w	r3, #2
 80049b4:	d001      	beq.n	80049ba <lfs_dir_getgstate+0x32>
        return res;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	e00f      	b.n	80049da <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f113 0f02 	cmn.w	r3, #2
 80049c0:	d00a      	beq.n	80049d8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 80049c2:	f107 0310 	add.w	r3, r7, #16
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fc00 	bl	80031cc <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	4619      	mov	r1, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fe fb63 	bl	800309e <lfs_gstate_xor>
    }

    return 0;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	7ff0000c 	.word	0x7ff0000c
 80049e8:	7ff00000 	.word	0x7ff00000

080049ec <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b08f      	sub	sp, #60	; 0x3c
 80049f0:	af04      	add	r7, sp, #16
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	689c      	ldr	r4, [r3, #8]
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f7fe fb26 	bl	800305c <lfs_tag_size>
 8004a10:	4603      	mov	r3, r0
 8004a12:	4619      	mov	r1, r3
 8004a14:	4620      	mov	r0, r4
 8004a16:	f7fd fdfb 	bl	8002610 <lfs_min>
 8004a1a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8004a1c:	6a3c      	ldr	r4, [r7, #32]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	6852      	ldr	r2, [r2, #4]
 8004a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a28:	6849      	ldr	r1, [r1, #4]
 8004a2a:	69b8      	ldr	r0, [r7, #24]
 8004a2c:	9003      	str	r0, [sp, #12]
 8004a2e:	9102      	str	r1, [sp, #8]
 8004a30:	9201      	str	r2, [sp, #4]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	4622      	mov	r2, r4
 8004a38:	2100      	movs	r1, #0
 8004a3a:	6a38      	ldr	r0, [r7, #32]
 8004a3c:	f7fe f808 	bl	8002a50 <lfs_bd_cmp>
 8004a40:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <lfs_dir_find_match+0x60>
        return res;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	e014      	b.n	8004a76 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	689c      	ldr	r4, [r3, #8]
 8004a50:	68b8      	ldr	r0, [r7, #8]
 8004a52:	f7fe fb03 	bl	800305c <lfs_tag_size>
 8004a56:	4603      	mov	r3, r0
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	d00b      	beq.n	8004a74 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	689c      	ldr	r4, [r3, #8]
 8004a60:	68b8      	ldr	r0, [r7, #8]
 8004a62:	f7fe fafb 	bl	800305c <lfs_tag_size>
 8004a66:	4603      	mov	r3, r0
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	d201      	bcs.n	8004a70 <lfs_dir_find_match+0x84>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e002      	b.n	8004a76 <lfs_dir_find_match+0x8a>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e000      	b.n	8004a76 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	372c      	adds	r7, #44	; 0x2c
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}
	...

08004a80 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b093      	sub	sp, #76	; 0x4c
 8004a84:	af04      	add	r7, sp, #16
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004aa0:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8004aa2:	4b6e      	ldr	r3, [pc, #440]	; (8004c5c <lfs_dir_find+0x1dc>)
 8004aa4:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1a      	ldr	r2, [r3, #32]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8004ab6:	496a      	ldr	r1, [pc, #424]	; (8004c60 <lfs_dir_find+0x1e0>)
 8004ab8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004aba:	f005 f8f5 	bl	8009ca8 <strspn>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac2:	4413      	add	r3, r2
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8004ac6:	4966      	ldr	r1, [pc, #408]	; (8004c60 <lfs_dir_find+0x1e0>)
 8004ac8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004aca:	f005 f8dc 	bl	8009c86 <strcspn>
 8004ace:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <lfs_dir_find+0x62>
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	4b62      	ldr	r3, [pc, #392]	; (8004c64 <lfs_dir_find+0x1e4>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d00a      	beq.n	8004af8 <lfs_dir_find+0x78>
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d10c      	bne.n	8004b02 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8004ae8:	2202      	movs	r2, #2
 8004aea:	495f      	ldr	r1, [pc, #380]	; (8004c68 <lfs_dir_find+0x1e8>)
 8004aec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004aee:	f004 fca1 	bl	8009434 <memcmp>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <lfs_dir_find+0x82>
            name += namelen;
 8004af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	4413      	add	r3, r2
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8004b00:	e7d9      	b.n	8004ab6 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8004b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	4413      	add	r3, r2
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8004b0e:	4954      	ldr	r1, [pc, #336]	; (8004c60 <lfs_dir_find+0x1e0>)
 8004b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b12:	f005 f8c9 	bl	8009ca8 <strspn>
 8004b16:	4602      	mov	r2, r0
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	4413      	add	r3, r2
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8004b1e:	4950      	ldr	r1, [pc, #320]	; (8004c60 <lfs_dir_find+0x1e0>)
 8004b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b22:	f005 f8b0 	bl	8009c86 <strcspn>
 8004b26:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01d      	beq.n	8004b6a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d112      	bne.n	8004b5a <lfs_dir_find+0xda>
 8004b34:	2202      	movs	r2, #2
 8004b36:	494c      	ldr	r1, [pc, #304]	; (8004c68 <lfs_dir_find+0x1e8>)
 8004b38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b3a:	f004 fc7b 	bl	8009434 <memcmp>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <lfs_dir_find+0xda>
                depth -= 1;
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	3b01      	subs	r3, #1
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d107      	bne.n	8004b60 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8004b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	4413      	add	r3, r2
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8004b58:	e7ad      	b.n	8004ab6 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8004b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	4413      	add	r3, r2
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8004b68:	e7d1      	b.n	8004b0e <lfs_dir_find+0x8e>
                break;
 8004b6a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <lfs_dir_find+0xf8>
            return tag;
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	e06c      	b.n	8004c52 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b7c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fa31 	bl	8002fe8 <lfs_tag_type3>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d002      	beq.n	8004b92 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8004b8c:	f06f 0313 	mvn.w	r3, #19
 8004b90:	e05f      	b.n	8004c52 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fe fa51 	bl	800303c <lfs_tag_id>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d01c      	beq.n	8004be0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe fa47 	bl	800303c <lfs_tag_id>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb6:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004bbe:	9200      	str	r2, [sp, #0]
 8004bc0:	4a2a      	ldr	r2, [pc, #168]	; (8004c6c <lfs_dir_find+0x1ec>)
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7fe fe23 	bl	8003810 <lfs_dir_get>
 8004bca:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da01      	bge.n	8004bd6 <lfs_dir_find+0x156>
                return res;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	e03d      	b.n	8004c52 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3318      	adds	r3, #24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe f99f 	bl	8002f1e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8004be6:	212f      	movs	r1, #47	; 0x2f
 8004be8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bea:	f005 f83f 	bl	8009c6c <strchr>
 8004bee:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <lfs_dir_find+0x178>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	e000      	b.n	8004bfa <lfs_dir_find+0x17a>
 8004bf8:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	613a      	str	r2, [r7, #16]
 8004bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c00:	617a      	str	r2, [r7, #20]
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8004c06:	f107 0210 	add.w	r2, r7, #16
 8004c0a:	9203      	str	r2, [sp, #12]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <lfs_dir_find+0x1f0>)
 8004c0e:	9202      	str	r2, [sp, #8]
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff fb28 	bl	8004274 <lfs_dir_fetchmatch>
 8004c24:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	da01      	bge.n	8004c30 <lfs_dir_find+0x1b0>
                return tag;
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	e010      	b.n	8004c52 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8004c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	4413      	add	r3, r2
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8004c3e:	e73a      	b.n	8004ab6 <lfs_dir_find+0x36>
            if (!dir->split) {
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	7ddb      	ldrb	r3, [r3, #23]
 8004c44:	f083 0301 	eor.w	r3, r3, #1
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0c8      	beq.n	8004be0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8004c4e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	373c      	adds	r7, #60	; 0x3c
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd90      	pop	{r4, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	002ffc00 	.word	0x002ffc00
 8004c60:	0800a618 	.word	0x0800a618
 8004c64:	0800a61c 	.word	0x0800a61c
 8004c68:	0800a620 	.word	0x0800a620
 8004c6c:	700ffc00 	.word	0x700ffc00
 8004c70:	080049ed 	.word	0x080049ed

08004c74 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b08b      	sub	sp, #44	; 0x2c
 8004c78:	af04      	add	r7, sp, #16
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f103 0010 	add.w	r0, r3, #16
 8004c88:	68fc      	ldr	r4, [r7, #12]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	6852      	ldr	r2, [r2, #4]
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	9103      	str	r1, [sp, #12]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	9102      	str	r1, [sp, #8]
 8004c9a:	9201      	str	r2, [sp, #4]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4622      	mov	r2, r4
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7fd ffd5 	bl	8002c54 <lfs_bd_prog>
 8004caa:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <lfs_dir_commitprog+0x42>
        return err;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	e010      	b.n	8004cd8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f003 ff0c 	bl	8008adc <lfs_crc>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	605a      	str	r2, [r3, #4]
    return 0;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd90      	pop	{r4, r7, pc}

08004ce0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b08f      	sub	sp, #60	; 0x3c
 8004ce4:	af04      	add	r7, sp, #16
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fe f9c1 	bl	8003076 <lfs_tag_dsize>
 8004cf4:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	441a      	add	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d902      	bls.n	8004d0c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8004d06:	f06f 031b 	mvn.w	r3, #27
 8004d0a:	e065      	b.n	8004dd8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	4053      	eors	r3, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fd fd0c 	bl	8002736 <lfs_tobe32>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8004d22:	f107 0214 	add.w	r2, r7, #20
 8004d26:	2304      	movs	r3, #4
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff ffa2 	bl	8004c74 <lfs_dir_commitprog>
 8004d30:	61f8      	str	r0, [r7, #28]
    if (err) {
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <lfs_dir_commitattr+0x5c>
        return err;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	e04d      	b.n	8004dd8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	db0c      	blt.n	8004d5c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	3b04      	subs	r3, #4
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff ff92 	bl	8004c74 <lfs_dir_commitprog>
 8004d50:	61f8      	str	r0, [r7, #28]
        if (err) {
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d039      	beq.n	8004dcc <lfs_dir_commitattr+0xec>
            return err;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	e03d      	b.n	8004dd8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
 8004d64:	e02d      	b.n	8004dc2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8004d66:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8004d6e:	1f1c      	subs	r4, r3, #4
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	440a      	add	r2, r1
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	9103      	str	r1, [sp, #12]
 8004d80:	f107 0113 	add.w	r1, r7, #19
 8004d84:	9102      	str	r1, [sp, #8]
 8004d86:	9201      	str	r2, [sp, #4]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7fd fd19 	bl	80027c8 <lfs_bd_read>
 8004d96:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <lfs_dir_commitattr+0xc2>
                return err;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	e01a      	b.n	8004dd8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8004da2:	f107 0213 	add.w	r2, r7, #19
 8004da6:	2301      	movs	r3, #1
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff ff62 	bl	8004c74 <lfs_dir_commitprog>
 8004db0:	61f8      	str	r0, [r7, #28]
            if (err) {
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <lfs_dir_commitattr+0xdc>
                return err;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	e00d      	b.n	8004dd8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	3b04      	subs	r3, #4
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d3cc      	bcc.n	8004d66 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	609a      	str	r2, [r3, #8]
    return 0;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	372c      	adds	r7, #44	; 0x2c
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd90      	pop	{r4, r7, pc}

08004de0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b097      	sub	sp, #92	; 0x5c
 8004de4:	af04      	add	r7, sp, #16
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7fd fc2d 	bl	800265a <lfs_alignup>
 8004e00:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8004e0a:	e0a6      	b.n	8004f5a <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8004e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fd fbf6 	bl	8002610 <lfs_min>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	4413      	add	r3, r2
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8004e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d206      	bcs.n	8004e42 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	3b08      	subs	r3, #8
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e3c:	f7fd fbe8 	bl	8002610 <lfs_min>
 8004e40:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8004e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e46:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2204      	movs	r2, #4
 8004e50:	9203      	str	r2, [sp, #12]
 8004e52:	f107 0214 	add.w	r2, r7, #20
 8004e56:	9202      	str	r2, [sp, #8]
 8004e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e5a:	9201      	str	r2, [sp, #4]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	2304      	movs	r3, #4
 8004e60:	460a      	mov	r2, r1
 8004e62:	2100      	movs	r1, #0
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fd fcaf 	bl	80027c8 <lfs_bd_read>
 8004e6a:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <lfs_dir_commitcrc+0x9e>
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004e78:	d001      	beq.n	8004e7e <lfs_dir_commitcrc+0x9e>
            return err;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	e0e8      	b.n	8005050 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fd fc4c 	bl	800271e <lfs_frombe32>
 8004e86:	4603      	mov	r3, r0
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	0fdb      	lsrs	r3, r3, #31
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bf14      	ite	ne
 8004e90:	2301      	movne	r3, #1
 8004e92:	2300      	moveq	r3, #0
 8004e94:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8004e96:	7efb      	ldrb	r3, [r7, #27]
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	051a      	lsls	r2, r3, #20
 8004e9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	1acb      	subs	r3, r1, r3
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8004eaa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8004eae:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4053      	eors	r3, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fd fc3c 	bl	8002736 <lfs_tobe32>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f107 010c 	add.w	r1, r7, #12
 8004eca:	2204      	movs	r2, #4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f003 fe05 	bl	8008adc <lfs_crc>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fd fc12 	bl	8002706 <lfs_tole32>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f103 0010 	add.w	r0, r3, #16
 8004eec:	687c      	ldr	r4, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	6852      	ldr	r2, [r2, #4]
 8004ef6:	2108      	movs	r1, #8
 8004ef8:	9103      	str	r1, [sp, #12]
 8004efa:	f107 010c 	add.w	r1, r7, #12
 8004efe:	9102      	str	r1, [sp, #8]
 8004f00:	9201      	str	r2, [sp, #4]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	4622      	mov	r2, r4
 8004f08:	4601      	mov	r1, r0
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fd fea2 	bl	8002c54 <lfs_bd_prog>
 8004f10:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <lfs_dir_commitcrc+0x13c>
            return err;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	e099      	b.n	8005050 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8004f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe f892 	bl	800305c <lfs_tag_size>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	441a      	add	r2, r3
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8004f46:	7efb      	ldrb	r3, [r7, #27]
 8004f48:	07da      	lsls	r2, r3, #31
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	405a      	eors	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f58:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f60:	429a      	cmp	r2, r3
 8004f62:	f63f af53 	bhi.w	8004e0c <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f103 0110 	add.w	r1, r3, #16
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7fd fe3b 	bl	8002bec <lfs_bd_sync>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <lfs_dir_commitcrc+0x1a2>
        return err;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	e066      	b.n	8005050 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8004f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8a:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8004f8c:	e05b      	b.n	8005046 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f92:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f98:	e030      	b.n	8004ffc <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8004f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d106      	bne.n	8004fb0 <lfs_dir_commitcrc+0x1d0>
 8004fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d002      	beq.n	8004fb0 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8004faa:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004fae:	e04f      	b.n	8005050 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8004fb0:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8004fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8004fb8:	1d18      	adds	r0, r3, #4
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	9203      	str	r2, [sp, #12]
 8004fc2:	f107 020b 	add.w	r2, r7, #11
 8004fc6:	9202      	str	r2, [sp, #8]
 8004fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fca:	9201      	str	r2, [sp, #4]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	4603      	mov	r3, r0
 8004fd0:	460a      	mov	r2, r1
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fd fbf7 	bl	80027c8 <lfs_bd_read>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <lfs_dir_commitcrc+0x206>
                return err;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	e034      	b.n	8005050 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8004fe6:	f107 030b 	add.w	r3, r7, #11
 8004fea:	2201      	movs	r2, #1
 8004fec:	4619      	mov	r1, r3
 8004fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ff0:	f003 fd74 	bl	8008adc <lfs_crc>
 8004ff4:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	3304      	adds	r3, #4
 8005000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005002:	429a      	cmp	r2, r3
 8005004:	d3c9      	bcc.n	8004f9a <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800500c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005010:	e01e      	b.n	8005050 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8005012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800501c:	4618      	mov	r0, r3
 800501e:	f7fd faf7 	bl	8002610 <lfs_min>
 8005022:	4602      	mov	r2, r0
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	4413      	add	r3, r2
 8005028:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800502a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	429a      	cmp	r2, r3
 8005030:	d206      	bcs.n	8005040 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	3b08      	subs	r3, #8
 8005036:	4619      	mov	r1, r3
 8005038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800503a:	f7fd fae9 	bl	8002610 <lfs_min>
 800503e:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	3304      	adds	r3, #4
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8005046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	429a      	cmp	r2, r3
 800504c:	d39f      	bcc.n	8004f8e <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	374c      	adds	r7, #76	; 0x4c
 8005054:	46bd      	mov	sp, r7
 8005056:	bd90      	pop	{r4, r7, pc}

08005058 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af04      	add	r7, sp, #16
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e016      	b.n	8005096 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3301      	adds	r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	bfb8      	it	lt
 8005074:	425b      	neglt	r3, r3
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	4413      	add	r3, r2
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fe fa2c 	bl	80034dc <lfs_alloc>
 8005084:	60f8      	str	r0, [r7, #12]
        if (err) {
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <lfs_dir_alloc+0x38>
            return err;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	e058      	b.n	8005142 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3301      	adds	r3, #1
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b01      	cmp	r3, #1
 800509a:	dde5      	ble.n	8005068 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80050ac:	2004      	movs	r0, #4
 80050ae:	9003      	str	r0, [sp, #12]
 80050b0:	9202      	str	r2, [sp, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	9201      	str	r2, [sp, #4]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2304      	movs	r3, #4
 80050ba:	460a      	mov	r2, r1
 80050bc:	2100      	movs	r1, #0
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd fb82 	bl	80027c8 <lfs_bd_read>
 80050c4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd fb10 	bl	80026f0 <lfs_fromle32>
 80050d0:	4602      	mov	r2, r0
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <lfs_dir_alloc+0x90>
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80050e2:	d001      	beq.n	80050e8 <lfs_dir_alloc+0x90>
        return err;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	e02c      	b.n	8005142 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dd0e      	ble.n	8005110 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	3301      	adds	r3, #1
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f7fd faa8 	bl	800265a <lfs_alignup>
 800510a:	4602      	mov	r2, r0
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2204      	movs	r2, #4
 8005114:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800511c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2200      	movs	r2, #0
 8005122:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800512a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005132:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2200      	movs	r2, #0
 8005138:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2200      	movs	r2, #0
 800513e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800514a:	b580      	push	{r7, lr}
 800514c:	b092      	sub	sp, #72	; 0x48
 800514e:	af04      	add	r7, sp, #16
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	4619      	mov	r1, r3
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7ff ff7a 	bl	8005058 <lfs_dir_alloc>
 8005164:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <lfs_dir_split+0x26>
        return err;
 800516c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516e:	e03c      	b.n	80051ea <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	7ddb      	ldrb	r3, [r3, #23]
 8005174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8005184:	f107 0110 	add.w	r1, r7, #16
 8005188:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800518c:	9302      	str	r3, [sp, #8]
 800518e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f879 	bl	8005294 <lfs_dir_compact>
 80051a2:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da01      	bge.n	80051ae <lfs_dir_split+0x64>
        return res;
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	e01d      	b.n	80051ea <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2201      	movs	r2, #1
 80051be:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3320      	adds	r3, #32
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fd fe51 	bl	8002e70 <lfs_pair_cmp>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <lfs_dir_split+0x9e>
 80051d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3738      	adds	r7, #56	; 0x38
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b086      	sub	sp, #24
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8005202:	68b8      	ldr	r0, [r7, #8]
 8005204:	f7fd ff37 	bl	8003076 <lfs_tag_dsize>
 8005208:	4602      	mov	r2, r0
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	441a      	add	r2, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	601a      	str	r2, [r3, #0]
    return 0;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6859      	ldr	r1, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	f7ff fd51 	bl	8004ce0 <lfs_dir_commitattr>
 800523e:	4603      	mov	r3, r0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8005258:	2b00      	cmp	r3, #0
 800525a:	dd11      	ble.n	8005280 <lfs_dir_needsrelocation+0x38>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	3301      	adds	r3, #1
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005266:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005268:	3201      	adds	r2, #1
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005272:	fb01 f202 	mul.w	r2, r1, r2
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <lfs_dir_needsrelocation+0x38>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <lfs_dir_needsrelocation+0x3a>
 8005280:	2300      	movs	r3, #0
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	b2db      	uxtb	r3, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b0a4      	sub	sp, #144	; 0x90
 8005298:	af0a      	add	r7, sp, #40	; 0x28
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ffcc 	bl	8005248 <lfs_dir_needsrelocation>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80052c0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <lfs_dir_compact+0x52>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2200      	movs	r2, #0
 80052cc:	657a      	str	r2, [r7, #84]	; 0x54
 80052ce:	2201      	movs	r2, #1
 80052d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80052d2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fd fdc9 	bl	8002e70 <lfs_pair_cmp>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 8155 	bne.w	8005590 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ec:	2300      	movs	r3, #0
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
 80052f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052f4:	647b      	str	r3, [r7, #68]	; 0x44
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80052fc:	2300      	movs	r3, #0
 80052fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <lfs_dir_compact+0x80>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800530e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005310:	3b08      	subs	r3, #8
 8005312:	e003      	b.n	800531c <lfs_dir_compact+0x88>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800531c:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	4619      	mov	r1, r3
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7fd fd41 	bl	8002dac <lfs_bd_erase>
 800532a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800532c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d006      	beq.n	8005340 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8005332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005334:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005338:	f000 812c 	beq.w	8005594 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800533c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533e:	e187      	b.n	8005650 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fd f9de 	bl	8002706 <lfs_tole32>
 800534a:	4602      	mov	r2, r0
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8005356:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800535a:	2304      	movs	r3, #4
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7ff fc89 	bl	8004c74 <lfs_dir_commitprog>
 8005362:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f7fd f9c1 	bl	80026f0 <lfs_fromle32>
 800536e:	4602      	mov	r2, r0
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]
            if (err) {
 8005374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800537a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800537c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005380:	f000 810a 	beq.w	8005598 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8005384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005386:	e163      	b.n	8005650 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8005388:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800538c:	425b      	negs	r3, r3
 800538e:	b29b      	uxth	r3, r3
 8005390:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	637a      	str	r2, [r7, #52]	; 0x34
 8005396:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800539a:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800539c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80053a0:	9208      	str	r2, [sp, #32]
 80053a2:	4aad      	ldr	r2, [pc, #692]	; (8005658 <lfs_dir_compact+0x3c4>)
 80053a4:	9207      	str	r2, [sp, #28]
 80053a6:	9306      	str	r3, [sp, #24]
 80053a8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80053b2:	9304      	str	r3, [sp, #16]
 80053b4:	2300      	movs	r3, #0
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	4ba8      	ldr	r3, [pc, #672]	; (800565c <lfs_dir_compact+0x3c8>)
 80053ba:	9302      	str	r3, [sp, #8]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c8:	2200      	movs	r2, #0
 80053ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7fe fb71 	bl	8003ab4 <lfs_dir_traverse>
 80053d2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80053d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d006      	beq.n	80053e8 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80053da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053dc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80053e0:	f000 80dc 	beq.w	800559c <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80053e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e6:	e133      	b.n	8005650 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	3318      	adds	r3, #24
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fd fd24 	bl	8002e3a <lfs_pair_isnull>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d022      	beq.n	8005444 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3318      	adds	r3, #24
 8005402:	4618      	mov	r0, r3
 8005404:	f7fd fda5 	bl	8002f52 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	7ddb      	ldrb	r3, [r3, #23]
 800540c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005410:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8005412:	4a93      	ldr	r2, [pc, #588]	; (8005660 <lfs_dir_compact+0x3cc>)
 8005414:	431a      	orrs	r2, r3
                        dir->tail);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800541a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff fc5e 	bl	8004ce0 <lfs_dir_commitattr>
 8005424:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	3318      	adds	r3, #24
 800542a:	4618      	mov	r0, r3
 800542c:	f7fd fd77 	bl	8002f1e <lfs_pair_fromle32>
                if (err) {
 8005430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d006      	beq.n	8005444 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8005436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005438:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800543c:	f000 80b0 	beq.w	80055a0 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8005440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005442:	e105      	b.n	8005650 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8005444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8005450:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005454:	f083 0301 	eor.w	r3, r3, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d011      	beq.n	8005482 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f7fd fe17 	bl	800309e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800547a:	4611      	mov	r1, r2
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd fe0e 	bl	800309e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd fe05 	bl	800309e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80054a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a4:	461a      	mov	r2, r3
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fa6d 	bl	8004988 <lfs_dir_getgstate>
 80054ae:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80054b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <lfs_dir_compact+0x226>
                return err;
 80054b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b8:	e0ca      	b.n	8005650 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80054ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fd fe12 	bl	80030e8 <lfs_gstate_iszero>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f083 0301 	eor.w	r3, r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d016      	beq.n	80054fe <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80054d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fd fe99 	bl	800320c <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80054da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054de:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80054e2:	4a60      	ldr	r2, [pc, #384]	; (8005664 <lfs_dir_compact+0x3d0>)
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fbfb 	bl	8004ce0 <lfs_dir_commitattr>
 80054ea:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80054ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80054f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80054f8:	d054      	beq.n	80055a4 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80054fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fc:	e0a8      	b.n	8005650 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80054fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005502:	4619      	mov	r1, r3
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff fc6b 	bl	8004de0 <lfs_dir_commitcrc>
 800550a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800550c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8005512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005514:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005518:	d046      	beq.n	80055a8 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800551a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551c:	e098      	b.n	8005650 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005524:	6992      	ldr	r2, [r2, #24]
 8005526:	fbb3 f1f2 	udiv	r1, r3, r2
 800552a:	fb01 f202 	mul.w	r2, r1, r2
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <lfs_dir_compact+0x2ae>
 8005534:	4b4c      	ldr	r3, [pc, #304]	; (8005668 <lfs_dir_compact+0x3d4>)
 8005536:	4a4d      	ldr	r2, [pc, #308]	; (800566c <lfs_dir_compact+0x3d8>)
 8005538:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 800553c:	484c      	ldr	r0, [pc, #304]	; (8005670 <lfs_dir_compact+0x3dc>)
 800553e:	f003 ff0f 	bl	8009360 <__assert_func>
            lfs_pair_swap(dir->pair);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4618      	mov	r0, r3
 8005546:	f7fd fc63 	bl	8002e10 <lfs_pair_swap>
            dir->count = end - begin;
 800554a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800554e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	b29a      	uxth	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800555a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8005560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3348      	adds	r3, #72	; 0x48
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	605a      	str	r2, [r3, #4]
 8005570:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8005572:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005576:	f083 0301 	eor.w	r3, r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d064      	beq.n	800564a <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	333c      	adds	r3, #60	; 0x3c
 8005586:	3230      	adds	r2, #48	; 0x30
 8005588:	ca07      	ldmia	r2, {r0, r1, r2}
 800558a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800558e:	e05c      	b.n	800564a <lfs_dir_compact+0x3b6>
        goto relocate;
 8005590:	bf00      	nop
 8005592:	e00a      	b.n	80055aa <lfs_dir_compact+0x316>
                    goto relocate;
 8005594:	bf00      	nop
 8005596:	e008      	b.n	80055aa <lfs_dir_compact+0x316>
                    goto relocate;
 8005598:	bf00      	nop
 800559a:	e006      	b.n	80055aa <lfs_dir_compact+0x316>
                    goto relocate;
 800559c:	bf00      	nop
 800559e:	e004      	b.n	80055aa <lfs_dir_compact+0x316>
                        goto relocate;
 80055a0:	bf00      	nop
 80055a2:	e002      	b.n	80055aa <lfs_dir_compact+0x316>
                        goto relocate;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <lfs_dir_compact+0x316>
                    goto relocate;
 80055a8:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3310      	adds	r3, #16
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7fd f8e0 	bl	800277c <lfs_cache_drop>
        if (!tired) {
 80055bc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80055c0:	f083 0301 	eor.w	r3, r3, #1
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4a29      	ldr	r2, [pc, #164]	; (8005674 <lfs_dir_compact+0x3e0>)
 80055d0:	9200      	str	r2, [sp, #0]
 80055d2:	f240 725a 	movw	r2, #1882	; 0x75a
 80055d6:	4926      	ldr	r1, [pc, #152]	; (8005670 <lfs_dir_compact+0x3dc>)
 80055d8:	4827      	ldr	r0, [pc, #156]	; (8005678 <lfs_dir_compact+0x3e4>)
 80055da:	f004 fb1f 	bl	8009c1c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2200      	movs	r2, #0
 80055e2:	617a      	str	r2, [r7, #20]
 80055e4:	2201      	movs	r2, #1
 80055e6:	61ba      	str	r2, [r7, #24]
 80055e8:	f107 0214 	add.w	r2, r7, #20
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fd fc3e 	bl	8002e70 <lfs_pair_cmp>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10c      	bne.n	8005614 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <lfs_dir_compact+0x3e0>)
 8005600:	9200      	str	r2, [sp, #0]
 8005602:	f240 725f 	movw	r2, #1887	; 0x75f
 8005606:	491a      	ldr	r1, [pc, #104]	; (8005670 <lfs_dir_compact+0x3dc>)
 8005608:	481c      	ldr	r0, [pc, #112]	; (800567c <lfs_dir_compact+0x3e8>)
 800560a:	f004 fb07 	bl	8009c1c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800560e:	f06f 031b 	mvn.w	r3, #27
 8005612:	e01d      	b.n	8005650 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7fd ff5e 	bl	80034dc <lfs_alloc>
 8005620:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8005622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <lfs_dir_compact+0x3ae>
 8005628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800562a:	f113 0f1c 	cmn.w	r3, #28
 800562e:	d106      	bne.n	800563e <lfs_dir_compact+0x3aa>
 8005630:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005634:	f083 0301 	eor.w	r3, r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <lfs_dir_compact+0x3ae>
            return err;
 800563e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005640:	e006      	b.n	8005650 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 8005642:	2300      	movs	r3, #0
 8005644:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8005648:	e64d      	b.n	80052e6 <lfs_dir_compact+0x52>
        break;
 800564a:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 800564c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005650:	4618      	mov	r0, r3
 8005652:	3768      	adds	r7, #104	; 0x68
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	0800521f 	.word	0x0800521f
 800565c:	400ffc00 	.word	0x400ffc00
 8005660:	000ffc08 	.word	0x000ffc08
 8005664:	7ffffc0c 	.word	0x7ffffc0c
 8005668:	0800a624 	.word	0x0800a624
 800566c:	0800ae78 	.word	0x0800ae78
 8005670:	0800a4c8 	.word	0x0800a4c8
 8005674:	0800a5cc 	.word	0x0800a5cc
 8005678:	0800a64c 	.word	0x0800a64c
 800567c:	0800a670 	.word	0x0800a670

08005680 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b097      	sub	sp, #92	; 0x5c
 8005684:	af0a      	add	r7, sp, #40	; 0x28
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800568e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8005694:	e058      	b.n	8005748 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	b29b      	uxth	r3, r3
 800569e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a0:	b292      	uxth	r2, r2
 80056a2:	4252      	negs	r2, r2
 80056a4:	b292      	uxth	r2, r2
 80056a6:	b212      	sxth	r2, r2
 80056a8:	f107 0118 	add.w	r1, r7, #24
 80056ac:	9108      	str	r1, [sp, #32]
 80056ae:	4979      	ldr	r1, [pc, #484]	; (8005894 <lfs_dir_splittingcompact+0x214>)
 80056b0:	9107      	str	r1, [sp, #28]
 80056b2:	9206      	str	r2, [sp, #24]
 80056b4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80056b8:	9205      	str	r2, [sp, #20]
 80056ba:	9304      	str	r3, [sp, #16]
 80056bc:	2300      	movs	r3, #0
 80056be:	9303      	str	r3, [sp, #12]
 80056c0:	4b75      	ldr	r3, [pc, #468]	; (8005898 <lfs_dir_splittingcompact+0x218>)
 80056c2:	9302      	str	r3, [sp, #8]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d0:	2200      	movs	r2, #0
 80056d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7fe f9ed 	bl	8003ab4 <lfs_dir_traverse>
 80056da:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <lfs_dir_splittingcompact+0x66>
                return err;
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	e0d1      	b.n	800588a <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 80056e6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2bfe      	cmp	r3, #254	; 0xfe
 80056f0:	d822      	bhi.n	8005738 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800570a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	e003      	b.n	8005718 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005714:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8005716:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800571c:	6992      	ldr	r2, [r2, #24]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f7fc ff9a 	bl	800265a <lfs_alignup>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	4620      	mov	r0, r4
 800572c:	f7fc ff70 	bl	8002610 <lfs_min>
 8005730:	4602      	mov	r2, r0
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	429a      	cmp	r2, r3
 8005736:	d20e      	bcs.n	8005756 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8005738:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005744:	4413      	add	r3, r2
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8005748:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d8a0      	bhi.n	8005696 <lfs_dir_splittingcompact+0x16>
 8005754:	e000      	b.n	8005758 <lfs_dir_splittingcompact+0xd8>
                break;
 8005756:	bf00      	nop
        }

        if (split == begin) {
 8005758:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800575c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575e:	429a      	cmp	r2, r3
 8005760:	d02d      	beq.n	80057be <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	b29b      	uxth	r3, r3
 8005766:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800576a:	9202      	str	r2, [sp, #8]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff fce6 	bl	800514a <lfs_dir_split>
 800577e:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <lfs_dir_splittingcompact+0x112>
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	f113 0f1c 	cmn.w	r3, #28
 800578c:	d001      	beq.n	8005792 <lfs_dir_splittingcompact+0x112>
            return err;
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	e07b      	b.n	800588a <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	493e      	ldr	r1, [pc, #248]	; (800589c <lfs_dir_splittingcompact+0x21c>)
 80057a2:	9101      	str	r1, [sp, #4]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4613      	mov	r3, r2
 80057a8:	f240 72a9 	movw	r2, #1961	; 0x7a9
 80057ac:	493c      	ldr	r1, [pc, #240]	; (80058a0 <lfs_dir_splittingcompact+0x220>)
 80057ae:	483d      	ldr	r0, [pc, #244]	; (80058a4 <lfs_dir_splittingcompact+0x224>)
 80057b0:	f004 fa34 	bl	8009c1c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80057b4:	e004      	b.n	80057c0 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 80057bc:	e767      	b.n	800568e <lfs_dir_splittingcompact+0xe>
            break;
 80057be:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff fd40 	bl	8005248 <lfs_dir_needsrelocation>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d04e      	beq.n	800586c <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2200      	movs	r2, #0
 80057d2:	613a      	str	r2, [r7, #16]
 80057d4:	2201      	movs	r2, #1
 80057d6:	617a      	str	r2, [r7, #20]
 80057d8:	f107 0210 	add.w	r2, r7, #16
 80057dc:	4611      	mov	r1, r2
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fd fb46 	bl	8002e70 <lfs_pair_cmp>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d140      	bne.n	800586c <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f003 f85c 	bl	80088a8 <lfs_fs_rawsize>
 80057f0:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	da01      	bge.n	80057fc <lfs_dir_splittingcompact+0x17c>
            return size;
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	e046      	b.n	800588a <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	085a      	lsrs	r2, r3, #1
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	429a      	cmp	r2, r3
 8005808:	d930      	bls.n	800586c <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4a23      	ldr	r2, [pc, #140]	; (800589c <lfs_dir_splittingcompact+0x21c>)
 8005810:	9200      	str	r2, [sp, #0]
 8005812:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005816:	4922      	ldr	r1, [pc, #136]	; (80058a0 <lfs_dir_splittingcompact+0x220>)
 8005818:	4823      	ldr	r0, [pc, #140]	; (80058a8 <lfs_dir_splittingcompact+0x228>)
 800581a:	f004 f9ff 	bl	8009c1c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800581e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005822:	9302      	str	r3, [sp, #8]
 8005824:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff fc88 	bl	800514a <lfs_dir_split>
 800583a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <lfs_dir_splittingcompact+0x1ce>
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f113 0f1c 	cmn.w	r3, #28
 8005848:	d001      	beq.n	800584e <lfs_dir_splittingcompact+0x1ce>
                return err;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	e01d      	b.n	800588a <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <lfs_dir_splittingcompact+0x21c>)
 8005856:	f240 72c7 	movw	r2, #1991	; 0x7c7
 800585a:	4911      	ldr	r1, [pc, #68]	; (80058a0 <lfs_dir_splittingcompact+0x220>)
 800585c:	4813      	ldr	r0, [pc, #76]	; (80058ac <lfs_dir_splittingcompact+0x22c>)
 800585e:	f004 f9dd 	bl	8009c1c <iprintf>
 8005862:	e003      	b.n	800586c <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8005864:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005868:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800586c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005870:	9302      	str	r3, [sp, #8]
 8005872:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff fd06 	bl	8005294 <lfs_dir_compact>
 8005888:	4603      	mov	r3, r0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3734      	adds	r7, #52	; 0x34
 800588e:	46bd      	mov	sp, r7
 8005890:	bd90      	pop	{r4, r7, pc}
 8005892:	bf00      	nop
 8005894:	080051f3 	.word	0x080051f3
 8005898:	400ffc00 	.word	0x400ffc00
 800589c:	0800a5cc 	.word	0x0800a5cc
 80058a0:	0800a4c8 	.word	0x0800a4c8
 80058a4:	0800a6a8 	.word	0x0800a6a8
 80058a8:	0800a6d8 	.word	0x0800a6d8
 80058ac:	0800a708 	.word	0x0800a708

080058b0 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80058b0:	b5b0      	push	{r4, r5, r7, lr}
 80058b2:	b0a6      	sub	sp, #152	; 0x98
 80058b4:	af0a      	add	r7, sp, #40	; 0x28
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]
    int state = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 80058c8:	2300      	movs	r3, #0
 80058ca:	667b      	str	r3, [r7, #100]	; 0x64
 80058cc:	e06d      	b.n	80059aa <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80058ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	4413      	add	r3, r2
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fd fb85 	bl	8002fe8 <lfs_tag_type3>
 80058de:	4603      	mov	r3, r0
 80058e0:	461a      	mov	r2, r3
 80058e2:	f240 4301 	movw	r3, #1025	; 0x401
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d106      	bne.n	80058f8 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	8a9b      	ldrh	r3, [r3, #20]
 80058ee:	3301      	adds	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	829a      	strh	r2, [r3, #20]
 80058f6:	e055      	b.n	80059a4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80058f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	4413      	add	r3, r2
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd fb70 	bl	8002fe8 <lfs_tag_type3>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005910:	429a      	cmp	r2, r3
 8005912:	d114      	bne.n	800593e <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	8a9b      	ldrh	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <lfs_dir_relocatingcommit+0x7a>
 800591c:	4ba4      	ldr	r3, [pc, #656]	; (8005bb0 <lfs_dir_relocatingcommit+0x300>)
 800591e:	4aa5      	ldr	r2, [pc, #660]	; (8005bb4 <lfs_dir_relocatingcommit+0x304>)
 8005920:	f240 71df 	movw	r1, #2015	; 0x7df
 8005924:	48a4      	ldr	r0, [pc, #656]	; (8005bb8 <lfs_dir_relocatingcommit+0x308>)
 8005926:	f003 fd1b 	bl	8009360 <__assert_func>
            dir->count -= 1;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	8a9b      	ldrh	r3, [r3, #20]
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800593c:	e032      	b.n	80059a4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800593e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	4413      	add	r3, r2
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7fd fb3d 	bl	8002fc8 <lfs_tag_type1>
 800594e:	4603      	mov	r3, r0
 8005950:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005954:	d126      	bne.n	80059a4 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8005956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	4413      	add	r3, r2
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8005966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	4413      	add	r3, r2
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8005976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	4413      	add	r3, r2
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fd fb41 	bl	8003008 <lfs_tag_chunk>
 8005986:	4603      	mov	r3, r0
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	3318      	adds	r3, #24
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fd fabd 	bl	8002f1e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80059a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059a6:	3301      	adds	r3, #1
 80059a8:	667b      	str	r3, [r7, #100]	; 0x64
 80059aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059b0:	429a      	cmp	r2, r3
 80059b2:	db8c      	blt.n	80058ce <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80059b4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02b      	beq.n	8005a14 <lfs_dir_relocatingcommit+0x164>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	8a9b      	ldrh	r3, [r3, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d127      	bne.n	8005a14 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80059c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <lfs_dir_relocatingcommit+0x12a>
 80059cc:	4b7b      	ldr	r3, [pc, #492]	; (8005bbc <lfs_dir_relocatingcommit+0x30c>)
 80059ce:	4a79      	ldr	r2, [pc, #484]	; (8005bb4 <lfs_dir_relocatingcommit+0x304>)
 80059d0:	f240 71ec 	movw	r1, #2028	; 0x7ec
 80059d4:	4878      	ldr	r0, [pc, #480]	; (8005bb8 <lfs_dir_relocatingcommit+0x308>)
 80059d6:	f003 fcc3 	bl	8009360 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f002 fbd4 	bl	8008190 <lfs_fs_pred>
 80059e8:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 80059ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <lfs_dir_relocatingcommit+0x14c>
 80059f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059f2:	f113 0f02 	cmn.w	r3, #2
 80059f6:	d001      	beq.n	80059fc <lfs_dir_relocatingcommit+0x14c>
            return err;
 80059f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059fa:	e203      	b.n	8005e04 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80059fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059fe:	f113 0f02 	cmn.w	r3, #2
 8005a02:	d007      	beq.n	8005a14 <lfs_dir_relocatingcommit+0x164>
 8005a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a08:	7ddb      	ldrb	r3, [r3, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8005a12:	e121      	b.n	8005c58 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	7d9b      	ldrb	r3, [r3, #22]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80fb 	beq.w	8005c14 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8005a22:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8005a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a34:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8005a3a:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <lfs_dir_relocatingcommit+0x1a0>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4c:	3b08      	subs	r3, #8
 8005a4e:	e003      	b.n	8005a58 <lfs_dir_relocatingcommit+0x1a8>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3318      	adds	r3, #24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fd fa77 	bl	8002f52 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8005a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a7a:	9308      	str	r3, [sp, #32]
 8005a7c:	4b50      	ldr	r3, [pc, #320]	; (8005bc0 <lfs_dir_relocatingcommit+0x310>)
 8005a7e:	9307      	str	r3, [sp, #28]
 8005a80:	2300      	movs	r3, #0
 8005a82:	9306      	str	r3, [sp, #24]
 8005a84:	2300      	movs	r3, #0
 8005a86:	9305      	str	r3, [sp, #20]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9304      	str	r3, [sp, #16]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9303      	str	r3, [sp, #12]
 8005a90:	2300      	movs	r3, #0
 8005a92:	9302      	str	r3, [sp, #8]
 8005a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f7fe f806 	bl	8003ab4 <lfs_dir_traverse>
 8005aa8:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3318      	adds	r3, #24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fd fa35 	bl	8002f1e <lfs_pair_fromle32>
        if (err) {
 8005ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00b      	beq.n	8005ad2 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abc:	f113 0f1c 	cmn.w	r3, #28
 8005ac0:	f000 80aa 	beq.w	8005c18 <lfs_dir_relocatingcommit+0x368>
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005aca:	f000 80a5 	beq.w	8005c18 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8005ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad0:	e198      	b.n	8005e04 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8005ad2:	f107 031c 	add.w	r3, r7, #28
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ae4:	f107 031c 	add.w	r3, r7, #28
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fd fad7 	bl	800309e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005af6:	f107 031c 	add.w	r3, r7, #28
 8005afa:	4611      	mov	r1, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fd face 	bl	800309e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005b08:	f107 031c 	add.w	r3, r7, #28
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd fac5 	bl	800309e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b1a:	f023 0303 	bic.w	r3, r3, #3
 8005b1e:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8005b20:	f107 031c 	add.w	r3, r7, #28
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fd fadf 	bl	80030e8 <lfs_gstate_iszero>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f083 0301 	eor.w	r3, r3, #1
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d027      	beq.n	8005b86 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005b36:	f107 031c 	add.w	r3, r7, #28
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7fe ff22 	bl	8004988 <lfs_dir_getgstate>
 8005b44:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8005b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4e:	e159      	b.n	8005e04 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8005b50:	f107 031c 	add.w	r3, r7, #28
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fd fb59 	bl	800320c <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8005b5a:	f107 031c 	add.w	r3, r7, #28
 8005b5e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <lfs_dir_relocatingcommit+0x314>)
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff f8bb 	bl	8004ce0 <lfs_dir_commitattr>
 8005b6a:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b74:	f113 0f1c 	cmn.w	r3, #28
 8005b78:	d050      	beq.n	8005c1c <lfs_dir_relocatingcommit+0x36c>
 8005b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005b80:	d04c      	beq.n	8005c1c <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8005b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b84:	e13e      	b.n	8005e04 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8005b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff f927 	bl	8004de0 <lfs_dir_commitcrc>
 8005b92:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8005b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d016      	beq.n	8005bc8 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9c:	f113 0f1c 	cmn.w	r3, #28
 8005ba0:	d03e      	beq.n	8005c20 <lfs_dir_relocatingcommit+0x370>
 8005ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005ba8:	d03a      	beq.n	8005c20 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8005baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bac:	e12a      	b.n	8005e04 <lfs_dir_relocatingcommit+0x554>
 8005bae:	bf00      	nop
 8005bb0:	0800a734 	.word	0x0800a734
 8005bb4:	0800ae88 	.word	0x0800ae88
 8005bb8:	0800a4c8 	.word	0x0800a4c8
 8005bbc:	0800a744 	.word	0x0800a744
 8005bc0:	0800521f 	.word	0x0800521f
 8005bc4:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bce:	6992      	ldr	r2, [r2, #24]
 8005bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bd4:	fb01 f202 	mul.w	r2, r1, r2
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <lfs_dir_relocatingcommit+0x33c>
 8005bde:	4b8b      	ldr	r3, [pc, #556]	; (8005e0c <lfs_dir_relocatingcommit+0x55c>)
 8005be0:	4a8b      	ldr	r2, [pc, #556]	; (8005e10 <lfs_dir_relocatingcommit+0x560>)
 8005be2:	f640 0136 	movw	r1, #2102	; 0x836
 8005be6:	488b      	ldr	r0, [pc, #556]	; (8005e14 <lfs_dir_relocatingcommit+0x564>)
 8005be8:	f003 fbba 	bl	8009360 <__assert_func>
        dir->off = commit.off;
 8005bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8005bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	333c      	adds	r3, #60	; 0x3c
 8005bfe:	3230      	adds	r2, #48	; 0x30
 8005c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3348      	adds	r3, #72	; 0x48
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	e021      	b.n	8005c58 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8005c14:	bf00      	nop
 8005c16:	e004      	b.n	8005c22 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8005c20:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3310      	adds	r3, #16
 8005c26:	4619      	mov	r1, r3
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7fc fda7 	bl	800277c <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	8a9b      	ldrh	r3, [r3, #20]
 8005c32:	9302      	str	r3, [sp, #8]
 8005c34:	2300      	movs	r3, #0
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff fd1b 	bl	8005680 <lfs_dir_splittingcompact>
 8005c4a:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8005c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	da01      	bge.n	8005c56 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8005c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c54:	e0d6      	b.n	8005e04 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8005c56:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	663b      	str	r3, [r7, #96]	; 0x60
 8005c6a:	e0c6      	b.n	8005dfa <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8005c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c6e:	3308      	adds	r3, #8
 8005c70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c74:	4611      	mov	r1, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fd f8fa 	bl	8002e70 <lfs_pair_cmp>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f040 80b8 	bne.w	8005df4 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8005c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	f103 0408 	add.w	r4, r3, #8
 8005c8c:	4615      	mov	r5, r2
 8005c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	f000 809d 	beq.w	8005de0 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005caa:	e07b      	b.n	8005da4 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fd f996 	bl	8002fe8 <lfs_tag_type3>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d115      	bne.n	8005cf4 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8005cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cca:	889c      	ldrh	r4, [r3, #4]
 8005ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fd f9b0 	bl	800303c <lfs_tag_id>
 8005cdc:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005cde:	429c      	cmp	r4, r3
 8005ce0:	d108      	bne.n	8005cf4 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8005ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ce8:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8005cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	e054      	b.n	8005d9e <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fd f972 	bl	8002fe8 <lfs_tag_type3>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d11c      	bne.n	8005d4a <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8005d10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d12:	889c      	ldrh	r4, [r3, #4]
 8005d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd f98c 	bl	800303c <lfs_tag_id>
 8005d24:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005d26:	429c      	cmp	r4, r3
 8005d28:	d90f      	bls.n	8005d4a <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8005d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d2c:	889b      	ldrh	r3, [r3, #4]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d34:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d38:	799b      	ldrb	r3, [r3, #6]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d12f      	bne.n	8005d9e <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	1e5a      	subs	r2, r3, #1
 8005d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8005d48:	e029      	b.n	8005d9e <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4413      	add	r3, r2
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fd f947 	bl	8002fe8 <lfs_tag_type3>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f240 4301 	movw	r3, #1025	; 0x401
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d11b      	bne.n	8005d9e <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8005d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d68:	889c      	ldrh	r4, [r3, #4]
 8005d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	4413      	add	r3, r2
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fd f961 	bl	800303c <lfs_tag_id>
 8005d7a:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005d7c:	429c      	cmp	r4, r3
 8005d7e:	d30e      	bcc.n	8005d9e <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8005d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d82:	889b      	ldrh	r3, [r3, #4]
 8005d84:	3301      	adds	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d8a:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d8e:	799b      	ldrb	r3, [r3, #6]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d104      	bne.n	8005d9e <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8005d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d9c:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8005d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da0:	3301      	adds	r3, #1
 8005da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005daa:	429a      	cmp	r2, r3
 8005dac:	f6ff af7e 	blt.w	8005cac <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8005db0:	e016      	b.n	8005de0 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8005db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db4:	889a      	ldrh	r2, [r3, #4]
 8005db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005db8:	8b9b      	ldrh	r3, [r3, #28]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc0:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8005dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc4:	f103 0108 	add.w	r1, r3, #8
 8005dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dca:	3320      	adds	r3, #32
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7fe fdbe 	bl	8004950 <lfs_dir_fetch>
 8005dd4:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dde:	e011      	b.n	8005e04 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8005de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de2:	889a      	ldrh	r2, [r3, #4]
 8005de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de6:	8b9b      	ldrh	r3, [r3, #28]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d303      	bcc.n	8005df4 <lfs_dir_relocatingcommit+0x544>
 8005dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dee:	7fdb      	ldrb	r3, [r3, #31]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1de      	bne.n	8005db2 <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f47f af35 	bne.w	8005c6c <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3770      	adds	r7, #112	; 0x70
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e0c:	0800a624 	.word	0x0800a624
 8005e10:	0800ae88 	.word	0x0800ae88
 8005e14:	0800a4c8 	.word	0x0800a4c8

08005e18 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8005e18:	b5b0      	push	{r4, r5, r7, lr}
 8005e1a:	b0bc      	sub	sp, #240	; 0xf0
 8005e1c:	af04      	add	r7, sp, #16
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e2e:	e045      	b.n	8005ebc <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e34:	3308      	adds	r3, #8
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d03a      	beq.n	8005eb2 <lfs_dir_orphaningcommit+0x9a>
 8005e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e40:	3308      	adds	r3, #8
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4611      	mov	r1, r2
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd f812 	bl	8002e70 <lfs_pair_cmp>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d12f      	bne.n	8005eb2 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e56:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d12a      	bne.n	8005eb2 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d023      	beq.n	8005eb2 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d91b      	bls.n	8005eb2 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8005e7a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fff0 	bl	8006e64 <lfs_file_outline>
 8005e84:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8005e88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8005e90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e94:	e2ad      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8005e96:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f001 f804 	bl	8006ea8 <lfs_file_flush>
 8005ea0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8005ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <lfs_dir_orphaningcommit+0x9a>
                return err;
 8005eac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eb0:	e29f      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1b5      	bne.n	8005e30 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005eda:	461d      	mov	r5, r3
 8005edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ee0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8005eee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f7ff fcd8 	bl	80058b0 <lfs_dir_relocatingcommit>
 8005f00:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8005f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	da02      	bge.n	8005f12 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8005f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f10:	e26f      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f18:	4611      	mov	r1, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fc ffa8 	bl	8002e70 <lfs_pair_cmp>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	461d      	mov	r5, r3
 8005f2a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8005f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d14a      	bne.n	8005fd8 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3348      	adds	r3, #72	; 0x48
 8005f46:	461a      	mov	r2, r3
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7fe fd1c 	bl	8004988 <lfs_dir_getgstate>
 8005f50:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8005f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8005f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f60:	e247      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8005f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	3318      	adds	r3, #24
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fc ffed 	bl	8002f52 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	7ddb      	ldrb	r3, [r3, #23]
 8005f7c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005f80:	051a      	lsls	r2, r3, #20
 8005f82:	4bc2      	ldr	r3, [pc, #776]	; (800628c <lfs_dir_orphaningcommit+0x474>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	667b      	str	r3, [r7, #100]	; 0x64
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f92:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f96:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	9001      	str	r0, [sp, #4]
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	9000      	str	r0, [sp, #0]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff fc84 	bl	80058b0 <lfs_dir_relocatingcommit>
 8005fa8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	3318      	adds	r3, #24
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fc ffb4 	bl	8002f1e <lfs_pair_fromle32>
        if (state < 0) {
 8005fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	da02      	bge.n	8005fc4 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8005fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc2:	e216      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8005fc4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005fc8:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8005fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8005fde:	e1fc      	b.n	80063da <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8005fe0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fe8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005fec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ff0:	4ca7      	ldr	r4, [pc, #668]	; (8006290 <lfs_dir_orphaningcommit+0x478>)
 8005ff2:	9403      	str	r4, [sp, #12]
 8005ff4:	9102      	str	r1, [sp, #8]
 8005ff6:	9201      	str	r2, [sp, #4]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 8006000:	49a4      	ldr	r1, [pc, #656]	; (8006294 <lfs_dir_orphaningcommit+0x47c>)
 8006002:	48a5      	ldr	r0, [pc, #660]	; (8006298 <lfs_dir_orphaningcommit+0x480>)
 8006004:	f003 fe0a 	bl	8009c1c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f103 0220 	add.w	r2, r3, #32
 8006014:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006018:	4611      	mov	r1, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f7fc ff28 	bl	8002e70 <lfs_pair_cmp>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d107      	bne.n	8006036 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8006026:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800602e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800603e:	e037      	b.n	80060b0 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8006040:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006044:	f103 0208 	add.w	r2, r3, #8
 8006048:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f7fc ff0e 	bl	8002e70 <lfs_pair_cmp>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800605a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800605e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006062:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8006064:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006068:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800606c:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800606e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006072:	799b      	ldrb	r3, [r3, #6]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d116      	bne.n	80060a6 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8006078:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800607c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006080:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006084:	4611      	mov	r1, r2
 8006086:	4618      	mov	r0, r3
 8006088:	f7fc fef2 	bl	8002e70 <lfs_pair_cmp>
 800608c:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8006092:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006096:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800609c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80060a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80060a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1c3      	bne.n	8006040 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80060b8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80060bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80060c0:	4619      	mov	r1, r3
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f002 f8ec 	bl	80082a0 <lfs_fs_parent>
 80060c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80060cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da07      	bge.n	80060e4 <lfs_dir_orphaningcommit+0x2cc>
 80060d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060d8:	f113 0f02 	cmn.w	r3, #2
 80060dc:	d002      	beq.n	80060e4 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80060de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060e2:	e186      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80060e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060e8:	f113 0f02 	cmn.w	r3, #2
 80060ec:	bf14      	ite	ne
 80060ee:	2301      	movne	r3, #1
 80060f0:	2300      	moveq	r3, #0
 80060f2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80060f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060fa:	f113 0f02 	cmn.w	r3, #2
 80060fe:	f000 809e 	beq.w	800623e <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8006102:	2101      	movs	r1, #1
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f002 f921 	bl	800834c <lfs_fs_preporphans>
 800610a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 800610e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <lfs_dir_orphaningcommit+0x304>
                return err;
 8006116:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800611a:	e16a      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800611c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006120:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3330      	adds	r3, #48	; 0x30
 8006128:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800612c:	4611      	mov	r1, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f7fd f82c 	bl	800318c <lfs_gstate_hasmovehere>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d02d      	beq.n	8006196 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	4618      	mov	r0, r3
 8006140:	f7fc ff7c 	bl	800303c <lfs_tag_id>
 8006144:	4603      	mov	r3, r0
 8006146:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 800614a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800614c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800614e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8006152:	484f      	ldr	r0, [pc, #316]	; (8006290 <lfs_dir_orphaningcommit+0x478>)
 8006154:	9002      	str	r0, [sp, #8]
 8006156:	9201      	str	r2, [sp, #4]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	460b      	mov	r3, r1
 800615c:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8006160:	494c      	ldr	r1, [pc, #304]	; (8006294 <lfs_dir_orphaningcommit+0x47c>)
 8006162:	484e      	ldr	r0, [pc, #312]	; (800629c <lfs_dir_orphaningcommit+0x484>)
 8006164:	f003 fd5a 	bl	8009c1c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006168:	2200      	movs	r2, #0
 800616a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f002 f926 	bl	80083c0 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8006174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006178:	4618      	mov	r0, r3
 800617a:	f7fc ff5f 	bl	800303c <lfs_tag_id>
 800617e:	4603      	mov	r3, r0
 8006180:	461a      	mov	r2, r3
 8006182:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8006186:	4293      	cmp	r3, r2
 8006188:	d205      	bcs.n	8006196 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800618a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800618e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8006196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006198:	657b      	str	r3, [r7, #84]	; 0x54
 800619a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800619c:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 800619e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fc fed5 	bl	8002f52 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80061a8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80061ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <lfs_dir_orphaningcommit+0x3ac>
 80061b4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80061be:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80061c2:	e000      	b.n	80061c6 <lfs_dir_orphaningcommit+0x3ae>
 80061c4:	2300      	movs	r3, #0
 80061c6:	647b      	str	r3, [r7, #68]	; 0x44
 80061c8:	2300      	movs	r3, #0
 80061ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80061cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80061d6:	653b      	str	r3, [r7, #80]	; 0x50
 80061d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061dc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80061e0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80061e4:	2000      	movs	r0, #0
 80061e6:	9001      	str	r0, [sp, #4]
 80061e8:	2002      	movs	r0, #2
 80061ea:	9000      	str	r0, [sp, #0]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fb5f 	bl	80058b0 <lfs_dir_relocatingcommit>
 80061f2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80061f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fc fe8f 	bl	8002f1e <lfs_pair_fromle32>
            if (state < 0) {
 8006200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006204:	2b00      	cmp	r3, #0
 8006206:	da02      	bge.n	800620e <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8006208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800620c:	e0f1      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800620e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006212:	2b01      	cmp	r3, #1
 8006214:	d113      	bne.n	800623e <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8006216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 800621c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800621e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8006222:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006226:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800622a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800622c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800622e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006232:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800623c:	e0cd      	b.n	80063da <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800623e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006242:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006246:	4619      	mov	r1, r3
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f001 ffa1 	bl	8008190 <lfs_fs_pred>
 800624e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8006252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <lfs_dir_orphaningcommit+0x452>
 800625a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800625e:	f113 0f02 	cmn.w	r3, #2
 8006262:	d002      	beq.n	800626a <lfs_dir_orphaningcommit+0x452>
            return err;
 8006264:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006268:	e0c3      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800626a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01a      	beq.n	80062a8 <lfs_dir_orphaningcommit+0x490>
 8006272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006276:	f113 0f02 	cmn.w	r3, #2
 800627a:	d115      	bne.n	80062a8 <lfs_dir_orphaningcommit+0x490>
 800627c:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <lfs_dir_orphaningcommit+0x488>)
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <lfs_dir_orphaningcommit+0x48c>)
 8006280:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8006284:	4803      	ldr	r0, [pc, #12]	; (8006294 <lfs_dir_orphaningcommit+0x47c>)
 8006286:	f003 f86b 	bl	8009360 <__assert_func>
 800628a:	bf00      	nop
 800628c:	000ffc08 	.word	0x000ffc08
 8006290:	0800a5cc 	.word	0x0800a5cc
 8006294:	0800a4c8 	.word	0x0800a4c8
 8006298:	0800a74c 	.word	0x0800a74c
 800629c:	0800a788 	.word	0x0800a788
 80062a0:	0800a7cc 	.word	0x0800a7cc
 80062a4:	0800aea4 	.word	0x0800aea4

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80062a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ac:	f113 0f02 	cmn.w	r3, #2
 80062b0:	f000 8093 	beq.w	80063da <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3330      	adds	r3, #48	; 0x30
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fc ff32 	bl	8003122 <lfs_gstate_hasorphans>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80062c4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80062c8:	425b      	negs	r3, r3
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f002 f83b 	bl	800834c <lfs_fs_preporphans>
 80062d6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80062da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80062e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062e6:	e084      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80062e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80062ec:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3330      	adds	r3, #48	; 0x30
 80062f4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fc ff46 	bl	800318c <lfs_gstate_hasmovehere>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01c      	beq.n	8006340 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	4618      	mov	r0, r3
 800630c:	f7fc fe96 	bl	800303c <lfs_tag_id>
 8006310:	4603      	mov	r3, r0
 8006312:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8006316:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800631a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800631e:	4837      	ldr	r0, [pc, #220]	; (80063fc <lfs_dir_orphaningcommit+0x5e4>)
 8006320:	9002      	str	r0, [sp, #8]
 8006322:	9201      	str	r2, [sp, #4]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	460b      	mov	r3, r1
 8006328:	f640 1221 	movw	r2, #2337	; 0x921
 800632c:	4934      	ldr	r1, [pc, #208]	; (8006400 <lfs_dir_orphaningcommit+0x5e8>)
 800632e:	4835      	ldr	r0, [pc, #212]	; (8006404 <lfs_dir_orphaningcommit+0x5ec>)
 8006330:	f003 fc74 	bl	8009c1c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006334:	2200      	movs	r2, #0
 8006336:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f002 f840 	bl	80083c0 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8006340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8006346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 800634c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006350:	4618      	mov	r0, r3
 8006352:	f7fc fdfe 	bl	8002f52 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8006356:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800635a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <lfs_dir_orphaningcommit+0x55a>
 8006362:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006366:	029b      	lsls	r3, r3, #10
 8006368:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800636c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006370:	e000      	b.n	8006374 <lfs_dir_orphaningcommit+0x55c>
 8006372:	2300      	movs	r3, #0
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
 8006376:	2300      	movs	r3, #0
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
 800637a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800637e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006382:	051a      	lsls	r2, r3, #20
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <lfs_dir_orphaningcommit+0x5f0>)
 8006386:	4313      	orrs	r3, r2
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800638e:	633b      	str	r3, [r7, #48]	; 0x30
 8006390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006394:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006398:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800639c:	2000      	movs	r0, #0
 800639e:	9001      	str	r0, [sp, #4]
 80063a0:	2002      	movs	r0, #2
 80063a2:	9000      	str	r0, [sp, #0]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fa83 	bl	80058b0 <lfs_dir_relocatingcommit>
 80063aa:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80063ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fc fdb3 	bl	8002f1e <lfs_pair_fromle32>
            if (state < 0) {
 80063b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	da02      	bge.n	80063c6 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80063c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c4:	e015      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80063c6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80063ca:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80063ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80063d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80063da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063de:	2b01      	cmp	r3, #1
 80063e0:	f43f adfe 	beq.w	8005fe0 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80063e4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <lfs_dir_orphaningcommit+0x5d8>
 80063ec:	2303      	movs	r3, #3
 80063ee:	e000      	b.n	80063f2 <lfs_dir_orphaningcommit+0x5da>
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	37e0      	adds	r7, #224	; 0xe0
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bdb0      	pop	{r4, r5, r7, pc}
 80063fa:	bf00      	nop
 80063fc:	0800a5cc 	.word	0x0800a5cc
 8006400:	0800a4c8 	.word	0x0800a4c8
 8006404:	0800a788 	.word	0x0800a788
 8006408:	000ffc08 	.word	0x000ffc08

0800640c <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7ff fcf9 	bl	8005e18 <lfs_dir_orphaningcommit>
 8006426:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	da01      	bge.n	8006432 <lfs_dir_commit+0x26>
        return orphans;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	e00d      	b.n	800644e <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8006438:	2100      	movs	r1, #0
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f002 f860 	bl	8008500 <lfs_fs_deorphan>
 8006440:	6138      	str	r0, [r7, #16]
        if (err) {
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <lfs_dir_commit+0x40>
            return err;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	e000      	b.n	800644e <lfs_dir_commit+0x42>
        }
    }

    return 0;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8006456:	b590      	push	{r4, r7, lr}
 8006458:	b087      	sub	sp, #28
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	3b08      	subs	r3, #8
 800646e:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <lfs_ctz_index+0x2e>
        return 0;
 8006480:	2300      	movs	r3, #0
 8006482:	e01c      	b.n	80064be <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3b01      	subs	r3, #1
 8006488:	4618      	mov	r0, r3
 800648a:	f7fc f917 	bl	80026bc <lfs_popc>
 800648e:	4603      	mov	r3, r0
 8006490:	3302      	adds	r3, #2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	1ad2      	subs	r2, r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	fb02 f303 	mul.w	r3, r2, r3
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	1ad4      	subs	r4, r2, r3
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7fc f905 	bl	80026bc <lfs_popc>
 80064b2:	4603      	mov	r3, r0
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	1ae2      	subs	r2, r4, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	601a      	str	r2, [r3, #0]
    return i;
 80064bc:	68fb      	ldr	r3, [r7, #12]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd90      	pop	{r4, r7, pc}

080064c6 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 80064c6:	b590      	push	{r4, r7, lr}
 80064c8:	b08f      	sub	sp, #60	; 0x3c
 80064ca:	af04      	add	r7, sp, #16
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d108      	bne.n	80064ec <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80064da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e0:	601a      	str	r2, [r3, #0]
        *off = 0;
 80064e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]
        return 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e053      	b.n	8006594 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	3b01      	subs	r3, #1
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	f107 0314 	add.w	r3, r7, #20
 80064f6:	4619      	mov	r1, r3
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff ffac 	bl	8006456 <lfs_ctz_index>
 80064fe:	4603      	mov	r3, r0
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8006502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006506:	4619      	mov	r1, r3
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff ffa4 	bl	8006456 <lfs_ctz_index>
 800650e:	4603      	mov	r3, r0
 8006510:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8006512:	e034      	b.n	800657e <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8006514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	3301      	adds	r3, #1
 800651c:	4618      	mov	r0, r3
 800651e:	f7fc f8ae 	bl	800267e <lfs_npw2>
 8006522:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8006524:	1e5c      	subs	r4, r3, #1
 8006526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006528:	f7fc f8b9 	bl	800269e <lfs_ctz>
 800652c:	4603      	mov	r3, r0
 800652e:	4619      	mov	r1, r3
 8006530:	4620      	mov	r0, r4
 8006532:	f7fc f86d 	bl	8002610 <lfs_min>
 8006536:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	0092      	lsls	r2, r2, #2
 800653e:	2104      	movs	r1, #4
 8006540:	9103      	str	r1, [sp, #12]
 8006542:	4639      	mov	r1, r7
 8006544:	9102      	str	r1, [sp, #8]
 8006546:	9201      	str	r2, [sp, #4]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	2304      	movs	r3, #4
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7fc f939 	bl	80027c8 <lfs_bd_read>
 8006556:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fc f8c8 	bl	80026f0 <lfs_fromle32>
 8006560:	4603      	mov	r3, r0
 8006562:	603b      	str	r3, [r7, #0]
        if (err) {
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <lfs_ctz_find+0xa8>
            return err;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	e012      	b.n	8006594 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800656e:	2201      	movs	r2, #1
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	461a      	mov	r2, r3
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800657e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	429a      	cmp	r2, r3
 8006584:	d8c6      	bhi.n	8006514 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658a:	601a      	str	r2, [r3, #0]
    *off = pos;
 800658c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800658e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006590:	601a      	str	r2, [r3, #0]
    return 0;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	372c      	adds	r7, #44	; 0x2c
 8006598:	46bd      	mov	sp, r7
 800659a:	bd90      	pop	{r4, r7, pc}

0800659c <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b092      	sub	sp, #72	; 0x48
 80065a0:	af04      	add	r7, sp, #16
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80065aa:	f107 0320 	add.w	r3, r7, #32
 80065ae:	4619      	mov	r1, r3
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f7fc ff93 	bl	80034dc <lfs_alloc>
 80065b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <lfs_ctz_extend+0x26>
            return err;
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	e0e9      	b.n	8006796 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	4619      	mov	r1, r3
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7fc fbf0 	bl	8002dac <lfs_bd_erase>
 80065cc:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d006      	beq.n	80065e2 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80065da:	f000 80cb 	beq.w	8006774 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	e0d9      	b.n	8006796 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 80065e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d107      	bne.n	80065f8 <lfs_ctz_extend+0x5c>
                *block = nblock;
 80065e8:	6a3a      	ldr	r2, [r7, #32]
 80065ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ec:	601a      	str	r2, [r3, #0]
                *off = 0;
 80065ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
                return 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e0ce      	b.n	8006796 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 80065f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fa:	3b01      	subs	r3, #1
 80065fc:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80065fe:	f107 031c 	add.w	r3, r7, #28
 8006602:	4619      	mov	r1, r3
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff ff26 	bl	8006456 <lfs_ctz_index>
 800660a:	4603      	mov	r3, r0
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3301      	adds	r3, #1
 8006612:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	429a      	cmp	r2, r3
 800661e:	d044      	beq.n	80066aa <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8006620:	2300      	movs	r3, #0
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
 8006624:	e035      	b.n	8006692 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	2301      	movs	r3, #1
 800662e:	9303      	str	r3, [sp, #12]
 8006630:	f107 0317 	add.w	r3, r7, #23
 8006634:	9302      	str	r3, [sp, #8]
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	4613      	mov	r3, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	2100      	movs	r1, #0
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7fc f8bf 	bl	80027c8 <lfs_bd_read>
 800664a:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <lfs_ctz_extend+0xba>
                        return err;
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	e09f      	b.n	8006796 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	2201      	movs	r2, #1
 800665a:	9203      	str	r2, [sp, #12]
 800665c:	f107 0217 	add.w	r2, r7, #23
 8006660:	9202      	str	r2, [sp, #8]
 8006662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006664:	9201      	str	r2, [sp, #4]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2301      	movs	r3, #1
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7fc faf0 	bl	8002c54 <lfs_bd_prog>
 8006674:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006682:	d101      	bne.n	8006688 <lfs_ctz_extend+0xec>
                            goto relocate;
 8006684:	bf00      	nop
                    goto relocate;
 8006686:	e075      	b.n	8006774 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800668a:	e084      	b.n	8006796 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	3301      	adds	r3, #1
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006696:	429a      	cmp	r2, r3
 8006698:	d3c5      	bcc.n	8006626 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800669a:	6a3a      	ldr	r2, [r7, #32]
 800669c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669e:	601a      	str	r2, [r3, #0]
                *off = noff;
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a4:	601a      	str	r2, [r3, #0]
                return 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e075      	b.n	8006796 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	3301      	adds	r3, #1
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80066b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b2:	f7fb fff4 	bl	800269e <lfs_ctz>
 80066b6:	4603      	mov	r3, r0
 80066b8:	3301      	adds	r3, #1
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80066c0:	2300      	movs	r3, #0
 80066c2:	633b      	str	r3, [r7, #48]	; 0x30
 80066c4:	e049      	b.n	800675a <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fc f81c 	bl	8002706 <lfs_tole32>
 80066ce:	4603      	mov	r3, r0
 80066d0:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	0092      	lsls	r2, r2, #2
 80066d8:	2104      	movs	r1, #4
 80066da:	9103      	str	r1, [sp, #12]
 80066dc:	f107 0118 	add.w	r1, r7, #24
 80066e0:	9102      	str	r1, [sp, #8]
 80066e2:	9201      	str	r2, [sp, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	2301      	movs	r3, #1
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7fc fab1 	bl	8002c54 <lfs_bd_prog>
 80066f2:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fb fffa 	bl	80026f0 <lfs_fromle32>
 80066fc:	4603      	mov	r3, r0
 80066fe:	61bb      	str	r3, [r7, #24]
                if (err) {
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800670c:	d034      	beq.n	8006778 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	e041      	b.n	8006796 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	3b01      	subs	r3, #1
 8006716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006718:	429a      	cmp	r2, r3
 800671a:	d01b      	beq.n	8006754 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006720:	0092      	lsls	r2, r2, #2
 8006722:	2104      	movs	r1, #4
 8006724:	9103      	str	r1, [sp, #12]
 8006726:	f107 0118 	add.w	r1, r7, #24
 800672a:	9102      	str	r1, [sp, #8]
 800672c:	9201      	str	r2, [sp, #4]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	2304      	movs	r3, #4
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	2100      	movs	r1, #0
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7fc f846 	bl	80027c8 <lfs_bd_read>
 800673c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	4618      	mov	r0, r3
 8006742:	f7fb ffd5 	bl	80026f0 <lfs_fromle32>
 8006746:	4603      	mov	r3, r0
 8006748:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <lfs_ctz_extend+0x1b8>
                        return err;
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	e020      	b.n	8006796 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	3301      	adds	r3, #1
 8006758:	633b      	str	r3, [r7, #48]	; 0x30
 800675a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	429a      	cmp	r2, r3
 8006760:	d3b1      	bcc.n	80066c6 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8006762:	6a3a      	ldr	r2, [r7, #32]
 8006764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006766:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	009a      	lsls	r2, r3, #2
 800676c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676e:	601a      	str	r2, [r3, #0]
            return 0;
 8006770:	2300      	movs	r3, #0
 8006772:	e010      	b.n	8006796 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <lfs_ctz_extend+0x1de>
                        goto relocate;
 8006778:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <lfs_ctz_extend+0x204>)
 800677e:	9200      	str	r2, [sp, #0]
 8006780:	f640 22da 	movw	r2, #2778	; 0xada
 8006784:	4907      	ldr	r1, [pc, #28]	; (80067a4 <lfs_ctz_extend+0x208>)
 8006786:	4808      	ldr	r0, [pc, #32]	; (80067a8 <lfs_ctz_extend+0x20c>)
 8006788:	f003 fa48 	bl	8009c1c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7fb fff4 	bl	800277c <lfs_cache_drop>
    while (true) {
 8006794:	e709      	b.n	80065aa <lfs_ctz_extend+0xe>
    }
}
 8006796:	4618      	mov	r0, r3
 8006798:	3738      	adds	r7, #56	; 0x38
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	0800a5cc 	.word	0x0800a5cc
 80067a4:	0800a4c8 	.word	0x0800a4c8
 80067a8:	0800a64c 	.word	0x0800a64c

080067ac <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b090      	sub	sp, #64	; 0x40
 80067b0:	af04      	add	r7, sp, #16
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <lfs_ctz_traverse+0x18>
        return 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e06b      	b.n	800689c <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	3b01      	subs	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	f107 031c 	add.w	r3, r7, #28
 80067ce:	4619      	mov	r1, r3
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7ff fe40 	bl	8006456 <lfs_ctz_index>
 80067d6:	4603      	mov	r3, r0
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80067da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80067e0:	4798      	blx	r3
 80067e2:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <lfs_ctz_traverse+0x42>
            return err;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	e056      	b.n	800689c <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <lfs_ctz_traverse+0x4c>
            return 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e051      	b.n	800689c <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	f1c3 0302 	rsb	r3, r3, #2
 8006802:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8006804:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8006806:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8006808:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800680a:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800680c:	9303      	str	r3, [sp, #12]
 800680e:	f107 0314 	add.w	r3, r7, #20
 8006812:	9302      	str	r3, [sp, #8]
 8006814:	2300      	movs	r3, #0
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7fb ffd0 	bl	80027c8 <lfs_bd_read>
 8006828:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	4618      	mov	r0, r3
 800682e:	f7fb ff5f 	bl	80026f0 <lfs_fromle32>
 8006832:	4603      	mov	r3, r0
 8006834:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	4618      	mov	r0, r3
 800683a:	f7fb ff59 	bl	80026f0 <lfs_fromle32>
 800683e:	4603      	mov	r3, r0
 8006840:	61bb      	str	r3, [r7, #24]
        if (err) {
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <lfs_ctz_traverse+0xa0>
            return err;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	e027      	b.n	800689c <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800684c:	2300      	movs	r3, #0
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006850:	e012      	b.n	8006878 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	3330      	adds	r3, #48	; 0x30
 8006858:	443b      	add	r3, r7
 800685a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	4611      	mov	r1, r2
 8006862:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006864:	4798      	blx	r3
 8006866:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <lfs_ctz_traverse+0xc6>
                return err;
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	e014      	b.n	800689c <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	3301      	adds	r3, #1
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	3b01      	subs	r3, #1
 800687c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800687e:	429a      	cmp	r2, r3
 8006880:	dbe7      	blt.n	8006852 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	3b01      	subs	r3, #1
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	3330      	adds	r3, #48	; 0x30
 800688a:	443b      	add	r3, r7
 800688c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006890:	603b      	str	r3, [r7, #0]
        index -= count;
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800689a:	e79e      	b.n	80067da <lfs_ctz_traverse+0x2e>
    }
}
 800689c:	4618      	mov	r0, r3
 800689e:	3730      	adds	r7, #48	; 0x30
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80068a4:	b5b0      	push	{r4, r5, r7, lr}
 80068a6:	b09a      	sub	sp, #104	; 0x68
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f001 ffc3 	bl	8008848 <lfs_fs_forceconsistency>
 80068c2:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 80068c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <lfs_file_rawopencfg+0x2a>
            return err;
 80068ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068cc:	e1b0      	b.n	8006c30 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80068d2:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2200      	movs	r2, #0
 80068de:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2200      	movs	r2, #0
 80068ea:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f103 0108 	add.w	r1, r3, #8
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3304      	adds	r3, #4
 80068f6:	1d3a      	adds	r2, r7, #4
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7fe f8c1 	bl	8004a80 <lfs_dir_find>
 80068fe:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8006900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006902:	2b00      	cmp	r3, #0
 8006904:	da0c      	bge.n	8006920 <lfs_file_rawopencfg+0x7c>
 8006906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006908:	f113 0f02 	cmn.w	r3, #2
 800690c:	d105      	bne.n	800691a <lfs_file_rawopencfg+0x76>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	889b      	ldrh	r3, [r3, #4]
 8006912:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006916:	4293      	cmp	r3, r2
 8006918:	d102      	bne.n	8006920 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800691a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800691c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800691e:	e17c      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2201      	movs	r2, #1
 8006924:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7fc fd6e 	bl	800340a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800692e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006930:	f113 0f02 	cmn.w	r3, #2
 8006934:	d14e      	bne.n	80069d4 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693c:	2b00      	cmp	r3, #0
 800693e:	d103      	bne.n	8006948 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8006940:	f06f 0301 	mvn.w	r3, #1
 8006944:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006946:	e168      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4618      	mov	r0, r3
 800694c:	f7f9 fc50 	bl	80001f0 <strlen>
 8006950:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006958:	429a      	cmp	r2, r3
 800695a:	d903      	bls.n	8006964 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800695c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006960:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006962:	e15a      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f103 0108 	add.w	r1, r3, #8
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	889b      	ldrh	r3, [r3, #4]
 800696e:	029b      	lsls	r3, r3, #10
 8006970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697a:	2300      	movs	r3, #0
 800697c:	633b      	str	r3, [r7, #48]	; 0x30
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	889b      	ldrh	r3, [r3, #4]
 8006982:	029a      	lsls	r2, r3, #10
 8006984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006986:	4313      	orrs	r3, r2
 8006988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	63bb      	str	r3, [r7, #56]	; 0x38
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	889b      	ldrh	r3, [r3, #4]
 8006996:	029b      	lsls	r3, r3, #10
 8006998:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800699c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a2:	2300      	movs	r3, #0
 80069a4:	643b      	str	r3, [r7, #64]	; 0x40
 80069a6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80069aa:	2303      	movs	r3, #3
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f7ff fd2d 	bl	800640c <lfs_dir_commit>
 80069b2:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80069b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b6:	f113 0f1c 	cmn.w	r3, #28
 80069ba:	d001      	beq.n	80069c0 <lfs_file_rawopencfg+0x11c>
 80069bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069be:	e001      	b.n	80069c4 <lfs_file_rawopencfg+0x120>
 80069c0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80069c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 80069c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 8125 	bne.w	8006c18 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80069ce:	4b9a      	ldr	r3, [pc, #616]	; (8006c38 <lfs_file_rawopencfg+0x394>)
 80069d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80069d2:	e044      	b.n	8006a5e <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80069de:	f06f 0310 	mvn.w	r3, #16
 80069e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80069e4:	e119      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80069e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fc fafd 	bl	8002fe8 <lfs_tag_type3>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d003      	beq.n	80069fc <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80069f4:	f06f 0314 	mvn.w	r3, #20
 80069f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80069fa:	e10e      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00e      	beq.n	8006a24 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	889b      	ldrh	r3, [r3, #4]
 8006a0a:	029b      	lsls	r3, r3, #10
 8006a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a14:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
 8006a22:	e01c      	b.n	8006a5e <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	889b      	ldrh	r3, [r3, #4]
 8006a2e:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a34:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8006a3c:	9200      	str	r2, [sp, #0]
 8006a3e:	4a7f      	ldr	r2, [pc, #508]	; (8006c3c <lfs_file_rawopencfg+0x398>)
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7fc fee5 	bl	8003810 <lfs_dir_get>
 8006a46:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8006a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da02      	bge.n	8006a54 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8006a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a50:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006a52:	e0e2      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	3328      	adds	r3, #40	; 0x28
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fc fbf7 	bl	800324c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006a5e:	2300      	movs	r3, #0
 8006a60:	657b      	str	r3, [r7, #84]	; 0x54
 8006a62:	e063      	b.n	8006b2c <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d03c      	beq.n	8006aea <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7a:	6859      	ldr	r1, [r3, #4]
 8006a7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a7e:	4613      	mov	r3, r2
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	440b      	add	r3, r1
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006a8e:	051a      	lsls	r2, r3, #20
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	889b      	ldrh	r3, [r3, #4]
 8006a94:	029b      	lsls	r3, r3, #10
 8006a96:	ea42 0103 	orr.w	r1, r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9e:	6858      	ldr	r0, [r3, #4]
 8006aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4403      	add	r3, r0
 8006aac:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006aae:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab6:	6859      	ldr	r1, [r3, #4]
 8006ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006aba:	4613      	mov	r3, r2
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	4603      	mov	r3, r0
 8006aca:	4a5d      	ldr	r2, [pc, #372]	; (8006c40 <lfs_file_rawopencfg+0x39c>)
 8006acc:	4621      	mov	r1, r4
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7fc fe9e 	bl	8003810 <lfs_dir_get>
 8006ad4:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8006ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	da06      	bge.n	8006aea <lfs_file_rawopencfg+0x246>
 8006adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ade:	f113 0f02 	cmn.w	r3, #2
 8006ae2:	d002      	beq.n	8006aea <lfs_file_rawopencfg+0x246>
                err = res;
 8006ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006ae8:	e097      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d017      	beq.n	8006b26 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afa:	6859      	ldr	r1, [r3, #4]
 8006afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006afe:	4613      	mov	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d903      	bls.n	8006b1a <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8006b12:	f06f 031b 	mvn.w	r3, #27
 8006b16:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006b18:	e07f      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b28:	3301      	adds	r3, #1
 8006b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d395      	bcc.n	8006a64 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b4c:	e010      	b.n	8006b70 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fb fdfa 	bl	800274e <lfs_malloc>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8006b68:	f06f 030b 	mvn.w	r3, #11
 8006b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8006b6e:	e054      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3340      	adds	r3, #64	; 0x40
 8006b74:	4619      	mov	r1, r3
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7fb fe0f 	bl	800279a <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8006b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fc fa32 	bl	8002fe8 <lfs_tag_type3>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	f240 2301 	movw	r3, #513	; 0x201
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d141      	bne.n	8006c14 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f06f 0201 	mvn.w	r2, #1
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8006b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fc fa5e 	bl	800305c <lfs_tag_size>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d020      	beq.n	8006c14 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	889b      	ldrh	r3, [r3, #4]
 8006bdc:	029c      	lsls	r4, r3, #10
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fb fd12 	bl	8002610 <lfs_min>
 8006bec:	4603      	mov	r3, r0
 8006bee:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006bf0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	4a0f      	ldr	r2, [pc, #60]	; (8006c3c <lfs_file_rawopencfg+0x398>)
 8006bfe:	4629      	mov	r1, r5
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7fc fe05 	bl	8003810 <lfs_dir_get>
 8006c06:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8006c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	da02      	bge.n	8006c14 <lfs_file_rawopencfg+0x370>
                err = res;
 8006c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c10:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8006c12:	e002      	b.n	8006c1a <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e00b      	b.n	8006c30 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8006c18:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f823 	bl	8006c74 <lfs_file_rawclose>
    return err;
 8006c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3760      	adds	r7, #96	; 0x60
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bdb0      	pop	{r4, r5, r7, pc}
 8006c38:	20100000 	.word	0x20100000
 8006c3c:	700ffc00 	.word	0x700ffc00
 8006c40:	7ffffc00 	.word	0x7ffffc00

08006c44 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8006c52:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <lfs_file_rawopen+0x2c>)
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f7ff fe21 	bl	80068a4 <lfs_file_rawopencfg>
 8006c62:	6178      	str	r0, [r7, #20]
    return err;
 8006c64:	697b      	ldr	r3, [r7, #20]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	0800aebc 	.word	0x0800aebc

08006c74 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f9e5 	bl	8007050 <lfs_file_rawsync>
 8006c86:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fc fb9b 	bl	80033c6 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fb fd61 	bl	8002766 <lfs_free>
    }

    return err;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8006cb0:	b590      	push	{r4, r7, lr}
 8006cb2:	b08d      	sub	sp, #52	; 0x34
 8006cb4:	af06      	add	r7, sp, #24
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8006cba:	f107 030c 	add.w	r3, r7, #12
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fc fc0b 	bl	80034dc <lfs_alloc>
 8006cc6:	6138      	str	r0, [r7, #16]
        if (err) {
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <lfs_file_relocate+0x22>
            return err;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	e0bb      	b.n	8006e4a <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fc f868 	bl	8002dac <lfs_bd_erase>
 8006cdc:	6138      	str	r0, [r7, #16]
        if (err) {
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006cea:	f000 809b 	beq.w	8006e24 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	e0ab      	b.n	8006e4a <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e069      	b.n	8006dcc <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d027      	beq.n	8006d54 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	f103 0008 	add.w	r0, r3, #8
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	889b      	ldrh	r3, [r3, #4]
 8006d1c:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8006d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d26:	2101      	movs	r1, #1
 8006d28:	9105      	str	r1, [sp, #20]
 8006d2a:	f107 010b 	add.w	r1, r7, #11
 8006d2e:	9104      	str	r1, [sp, #16]
 8006d30:	6979      	ldr	r1, [r7, #20]
 8006d32:	9103      	str	r1, [sp, #12]
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	4b47      	ldr	r3, [pc, #284]	; (8006e54 <lfs_file_relocate+0x1a4>)
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	9200      	str	r2, [sp, #0]
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4601      	mov	r1, r0
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fc fd7f 	bl	8003846 <lfs_dir_getread>
 8006d48:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01e      	beq.n	8006d8e <lfs_file_relocate+0xde>
                    return err;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	e07a      	b.n	8006e4a <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8006d5a:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	1ad4      	subs	r4, r2, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	2201      	movs	r2, #1
 8006d6a:	9203      	str	r2, [sp, #12]
 8006d6c:	f107 020b 	add.w	r2, r7, #11
 8006d70:	9202      	str	r2, [sp, #8]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	9201      	str	r2, [sp, #4]
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4623      	mov	r3, r4
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7fb fd23 	bl	80027c8 <lfs_bd_read>
 8006d82:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <lfs_file_relocate+0xde>
                    return err;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	e05d      	b.n	8006e4a <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f103 0110 	add.w	r1, r3, #16
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	9203      	str	r2, [sp, #12]
 8006d9c:	f107 020b 	add.w	r2, r7, #11
 8006da0:	9202      	str	r2, [sp, #8]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	9201      	str	r2, [sp, #4]
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	2301      	movs	r3, #1
 8006daa:	4602      	mov	r2, r0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fb ff51 	bl	8002c54 <lfs_bd_prog>
 8006db2:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006dc0:	d032      	beq.n	8006e28 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	e041      	b.n	8006e4a <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d390      	bcc.n	8006cf8 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69d9      	ldr	r1, [r3, #28]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	461a      	mov	r2, r3
 8006de6:	f002 fb35 	bl	8009454 <memcpy>
        file->cache.block = lfs->pcache.block;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695a      	ldr	r2, [r3, #20]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3310      	adds	r3, #16
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7fb fcc6 	bl	800279a <lfs_cache_zero>

        file->block = nblock;
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	e012      	b.n	8006e4a <lfs_file_relocate+0x19a>
                goto relocate;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <lfs_file_relocate+0x17a>
                    goto relocate;
 8006e28:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <lfs_file_relocate+0x1a8>)
 8006e2e:	9200      	str	r2, [sp, #0]
 8006e30:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 8006e34:	4909      	ldr	r1, [pc, #36]	; (8006e5c <lfs_file_relocate+0x1ac>)
 8006e36:	480a      	ldr	r0, [pc, #40]	; (8006e60 <lfs_file_relocate+0x1b0>)
 8006e38:	f002 fef0 	bl	8009c1c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3310      	adds	r3, #16
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fb fc9a 	bl	800277c <lfs_cache_drop>
    while (true) {
 8006e48:	e737      	b.n	8006cba <lfs_file_relocate+0xa>
    }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd90      	pop	{r4, r7, pc}
 8006e52:	bf00      	nop
 8006e54:	fff7fc00 	.word	0xfff7fc00
 8006e58:	0800a5cc 	.word	0x0800a5cc
 8006e5c:	0800a4c8 	.word	0x0800a4c8
 8006e60:	0800a64c 	.word	0x0800a64c

08006e64 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fc fb10 	bl	800349c <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff ff16 	bl	8006cb0 <lfs_file_relocate>
 8006e84:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <lfs_file_outline+0x2c>
        return err;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	e006      	b.n	8006e9e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8006ea8:	b590      	push	{r4, r7, lr}
 8006eaa:	b09f      	sub	sp, #124	; 0x7c
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d011      	beq.n	8006ee2 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d105      	bne.n	8006ed6 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	3340      	adds	r3, #64	; 0x40
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7fb fc53 	bl	800277c <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80a4 	beq.w	8007038 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef4:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d176      	bne.n	8006ff0 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8006f02:	f107 030c 	add.w	r3, r7, #12
 8006f06:	2254      	movs	r2, #84	; 0x54
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f002 fab0 	bl	8009470 <memset>
                .ctz.head = file->ctz.head,
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8006f14:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8006f24:	643b      	str	r3, [r7, #64]	; 0x40
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8006f2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fb fc20 	bl	800277c <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8006f3c:	e02b      	b.n	8006f96 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8006f3e:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8006f42:	f107 010c 	add.w	r1, r7, #12
 8006f46:	2301      	movs	r3, #1
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f90d 	bl	8007168 <lfs_file_flushedread>
 8006f4e:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8006f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	da01      	bge.n	8006f5a <lfs_file_flush+0xb2>
                    return res;
 8006f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f58:	e06f      	b.n	800703a <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8006f5a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8006f5e:	2301      	movs	r3, #1
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa08 	bl	8007378 <lfs_file_flushedwrite>
 8006f68:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8006f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	da01      	bge.n	8006f74 <lfs_file_flush+0xcc>
                    return res;
 8006f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f72:	e062      	b.n	800703a <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f7c:	d00b      	beq.n	8006f96 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8006f7e:	f107 030c 	add.w	r3, r7, #12
 8006f82:	3340      	adds	r3, #64	; 0x40
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fb fbf8 	bl	800277c <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7fb fbf3 	bl	800277c <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d3cd      	bcc.n	8006f3e <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	2301      	movs	r3, #1
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fb fda1 	bl	8002af4 <lfs_bd_flush>
 8006fb2:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8006fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d026      	beq.n	8007008 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8006fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fbc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006fc0:	d001      	beq.n	8006fc6 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8006fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fc4:	e039      	b.n	800703a <lfs_file_flush+0x192>
                        goto relocate;
 8006fc6:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <lfs_file_flush+0x19c>)
 8006fce:	9200      	str	r2, [sp, #0]
 8006fd0:	f640 425f 	movw	r2, #3167	; 0xc5f
 8006fd4:	491c      	ldr	r1, [pc, #112]	; (8007048 <lfs_file_flush+0x1a0>)
 8006fd6:	481d      	ldr	r0, [pc, #116]	; (800704c <lfs_file_flush+0x1a4>)
 8006fd8:	f002 fe20 	bl	8009c1c <iprintf>
                err = lfs_file_relocate(lfs, file);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fe66 	bl	8006cb0 <lfs_file_relocate>
 8006fe4:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8006fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0da      	beq.n	8006fa2 <lfs_file_flush+0xfa>
                    return err;
 8006fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fee:	e024      	b.n	800703a <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f7fb faf8 	bl	80025f0 <lfs_max>
 8007000:	4602      	mov	r2, r0
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	635a      	str	r2, [r3, #52]	; 0x34
 8007006:	e000      	b.n	800700a <lfs_file_flush+0x162>
                break;
 8007008:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007036:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3774      	adds	r7, #116	; 0x74
 800703e:	46bd      	mov	sp, r7
 8007040:	bd90      	pop	{r4, r7, pc}
 8007042:	bf00      	nop
 8007044:	0800a5cc 	.word	0x0800a5cc
 8007048:	0800a4c8 	.word	0x0800a4c8
 800704c:	0800a64c 	.word	0x0800a64c

08007050 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b090      	sub	sp, #64	; 0x40
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8007066:	2300      	movs	r3, #0
 8007068:	e07a      	b.n	8007160 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff ff1b 	bl	8006ea8 <lfs_file_flush>
 8007072:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	e06a      	b.n	8007160 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d063      	beq.n	800715e <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	3308      	adds	r3, #8
 800709a:	4618      	mov	r0, r3
 800709c:	f7fb fecd 	bl	8002e3a <lfs_pair_isnull>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f083 0301 	eor.w	r3, r3, #1
 80070a6:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d058      	beq.n	800715e <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d009      	beq.n	80070cc <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80070b8:	f240 2301 	movw	r3, #513	; 0x201
 80070bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c2:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ca:	e014      	b.n	80070f6 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80070cc:	f240 2302 	movw	r3, #514	; 0x202
 80070d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070d8:	3228      	adds	r2, #40	; 0x28
 80070da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070de:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80070e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fc f8c8 	bl	800327c <lfs_ctz_tole32>
            buffer = &ctz;
 80070ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070f0:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 80070f2:	2308      	movs	r3, #8
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f103 0108 	add.w	r1, r3, #8
 80070fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80070fe:	051a      	lsls	r2, r3, #20
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	889b      	ldrh	r3, [r3, #4]
 8007104:	029b      	lsls	r3, r3, #10
 8007106:	431a      	orrs	r2, r3
 8007108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710a:	4313      	orrs	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	61fb      	str	r3, [r7, #28]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	889b      	ldrh	r3, [r3, #4]
 8007116:	029a      	lsls	r2, r3, #10
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	4313      	orrs	r3, r2
 8007120:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8007124:	623b      	str	r3, [r7, #32]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
 800712e:	f107 0218 	add.w	r2, r7, #24
 8007132:	2302      	movs	r3, #2
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff f969 	bl	800640c <lfs_dir_commit>
 800713a:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007146:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	e006      	b.n	8007160 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3740      	adds	r7, #64	; 0x40
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007168:	b5b0      	push	{r4, r5, r7, lr}
 800716a:	b090      	sub	sp, #64	; 0x40
 800716c:	af06      	add	r7, sp, #24
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	429a      	cmp	r2, r3
 8007188:	d301      	bcc.n	800718e <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800718a:	2300      	movs	r3, #0
 800718c:	e0b7      	b.n	80072fe <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	4619      	mov	r1, r3
 800719a:	6838      	ldr	r0, [r7, #0]
 800719c:	f7fb fa38 	bl	8002610 <lfs_min>
 80071a0:	6038      	str	r0, [r7, #0]
    nsize = size;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80071a6:	e0a5      	b.n	80072f4 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071bc:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80071be:	429a      	cmp	r2, r3
 80071c0:	d130      	bne.n	8007224 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d11c      	bne.n	8007208 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	3138      	adds	r1, #56	; 0x38
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	303c      	adds	r0, #60	; 0x3c
 80071e8:	9003      	str	r0, [sp, #12]
 80071ea:	9102      	str	r1, [sp, #8]
 80071ec:	9201      	str	r2, [sp, #4]
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	462b      	mov	r3, r5
 80071f2:	4622      	mov	r2, r4
 80071f4:	2100      	movs	r1, #0
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff f965 	bl	80064c6 <lfs_ctz_find>
 80071fc:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <lfs_file_flushedread+0xb0>
                    return err;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	e07a      	b.n	80072fe <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f06f 0201 	mvn.w	r2, #1
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007228:	69da      	ldr	r2, [r3, #28]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	4619      	mov	r1, r3
 8007232:	6a38      	ldr	r0, [r7, #32]
 8007234:	f7fb f9ec 	bl	8002610 <lfs_min>
 8007238:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d026      	beq.n	8007294 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f103 0408 	add.w	r4, r3, #8
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8007256:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	889b      	ldrh	r3, [r3, #4]
 800725c:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800725e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007266:	68b9      	ldr	r1, [r7, #8]
 8007268:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800726a:	69b8      	ldr	r0, [r7, #24]
 800726c:	9005      	str	r0, [sp, #20]
 800726e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007270:	9004      	str	r0, [sp, #16]
 8007272:	9103      	str	r1, [sp, #12]
 8007274:	9302      	str	r3, [sp, #8]
 8007276:	4b24      	ldr	r3, [pc, #144]	; (8007308 <lfs_file_flushedread+0x1a0>)
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	9200      	str	r2, [sp, #0]
 800727c:	462b      	mov	r3, r5
 800727e:	2200      	movs	r2, #0
 8007280:	4621      	mov	r1, r4
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7fc fadf 	bl	8003846 <lfs_dir_getread>
 8007288:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01d      	beq.n	80072cc <lfs_file_flushedread+0x164>
                return err;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	e034      	b.n	80072fe <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800729e:	69dc      	ldr	r4, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072a8:	69b9      	ldr	r1, [r7, #24]
 80072aa:	9103      	str	r1, [sp, #12]
 80072ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ae:	9102      	str	r1, [sp, #8]
 80072b0:	9201      	str	r2, [sp, #4]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	4623      	mov	r3, r4
 80072b6:	4602      	mov	r2, r0
 80072b8:	2100      	movs	r1, #0
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7fb fa84 	bl	80027c8 <lfs_bd_read>
 80072c0:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <lfs_file_flushedread+0x164>
                return err;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	e018      	b.n	80072fe <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	441a      	add	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	441a      	add	r2, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80072e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	4413      	add	r3, r2
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f47f af56 	bne.w	80071a8 <lfs_file_flushedread+0x40>
    }

    return size;
 80072fc:	683b      	ldr	r3, [r7, #0]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3728      	adds	r7, #40	; 0x28
 8007302:	46bd      	mov	sp, r7
 8007304:	bdb0      	pop	{r4, r5, r7, pc}
 8007306:	bf00      	nop
 8007308:	fff7fc00 	.word	0xfff7fc00

0800730c <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <lfs_file_rawread+0x28>
 8007326:	4b11      	ldr	r3, [pc, #68]	; (800736c <lfs_file_rawread+0x60>)
 8007328:	4a11      	ldr	r2, [pc, #68]	; (8007370 <lfs_file_rawread+0x64>)
 800732a:	f640 41ea 	movw	r1, #3306	; 0xcea
 800732e:	4811      	ldr	r0, [pc, #68]	; (8007374 <lfs_file_rawread+0x68>)
 8007330:	f002 f816 	bl	8009360 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f7ff fdb0 	bl	8006ea8 <lfs_file_flush>
 8007348:	6178      	str	r0, [r7, #20]
        if (err) {
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <lfs_file_rawread+0x48>
            return err;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	e006      	b.n	8007362 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff ff04 	bl	8007168 <lfs_file_flushedread>
 8007360:	4603      	mov	r3, r0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	0800a7f4 	.word	0x0800a7f4
 8007370:	0800aec8 	.word	0x0800aec8
 8007374:	0800a4c8 	.word	0x0800a4c8

08007378 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007378:	b5b0      	push	{r4, r5, r7, lr}
 800737a:	b090      	sub	sp, #64	; 0x40
 800737c:	af04      	add	r7, sp, #16
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 810c 	beq.w	80075b4 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	441a      	add	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7fb f920 	bl	80025f0 <lfs_max>
 80073b0:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 80073b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d004      	beq.n	80073cc <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80073c8:	08db      	lsrs	r3, r3, #3
 80073ca:	e003      	b.n	80073d4 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d0:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80073d2:	08db      	lsrs	r3, r3, #3
 80073d4:	4619      	mov	r1, r3
 80073d6:	4610      	mov	r0, r2
 80073d8:	f7fb f91a 	bl	8002610 <lfs_min>
 80073dc:	4603      	mov	r3, r0
 80073de:	4619      	mov	r1, r3
 80073e0:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80073e4:	f7fb f914 	bl	8002610 <lfs_min>
 80073e8:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80073ea:	429c      	cmp	r4, r3
 80073ec:	f240 80e2 	bls.w	80075b4 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff fd36 	bl	8006e64 <lfs_file_outline>
 80073f8:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80d9 	beq.w	80075b4 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	e0d5      	b.n	80075be <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d006      	beq.n	800742c <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007426:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8007428:	429a      	cmp	r2, r3
 800742a:	d16b      	bne.n	8007504 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d157      	bne.n	80074e8 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d12d      	bne.n	80074a0 <lfs_file_flushedwrite+0x128>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007448:	2b00      	cmp	r3, #0
 800744a:	d029      	beq.n	80074a0 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800745e:	3a01      	subs	r2, #1
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	3138      	adds	r1, #56	; 0x38
 8007464:	68b8      	ldr	r0, [r7, #8]
 8007466:	303c      	adds	r0, #60	; 0x3c
 8007468:	9003      	str	r0, [sp, #12]
 800746a:	9102      	str	r1, [sp, #8]
 800746c:	9201      	str	r2, [sp, #4]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	462b      	mov	r3, r5
 8007472:	4622      	mov	r2, r4
 8007474:	2100      	movs	r1, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff f825 	bl	80064c6 <lfs_ctz_find>
 800747c:	6238      	str	r0, [r7, #32]
                    if (err) {
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007488:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	e094      	b.n	80075be <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	3340      	adds	r3, #64	; 0x40
 8007498:	4619      	mov	r1, r3
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7fb f97d 	bl	800279a <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7fb fffb 	bl	800349c <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80074ac:	68fc      	ldr	r4, [r7, #12]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	3238      	adds	r2, #56	; 0x38
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	313c      	adds	r1, #60	; 0x3c
 80074be:	9102      	str	r1, [sp, #8]
 80074c0:	9201      	str	r2, [sp, #4]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	462b      	mov	r3, r5
 80074c6:	4622      	mov	r2, r4
 80074c8:	4601      	mov	r1, r0
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff f866 	bl	800659c <lfs_ctz_extend>
 80074d0:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00f      	beq.n	80074f8 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	e06a      	b.n	80075be <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f06f 0201 	mvn.w	r2, #1
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	4619      	mov	r1, r3
 8007512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007514:	f7fb f87c 	bl	8002610 <lfs_min>
 8007518:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007520:	68fc      	ldr	r4, [r7, #12]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800752a:	69b9      	ldr	r1, [r7, #24]
 800752c:	9103      	str	r1, [sp, #12]
 800752e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007530:	9102      	str	r1, [sp, #8]
 8007532:	9201      	str	r2, [sp, #4]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	2301      	movs	r3, #1
 8007538:	4622      	mov	r2, r4
 800753a:	4601      	mov	r1, r0
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7fb fb89 	bl	8002c54 <lfs_bd_prog>
 8007542:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d01c      	beq.n	8007584 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007550:	d007      	beq.n	8007562 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	e02d      	b.n	80075be <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8007562:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff fba2 	bl	8006cb0 <lfs_file_relocate>
 800756c:	6178      	str	r0, [r7, #20]
            if (err) {
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0d2      	beq.n	800751a <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	e01c      	b.n	80075be <lfs_file_flushedwrite+0x246>
            break;
 8007584:	bf00      	nop
            }
        }

        file->pos += diff;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	441a      	add	r2, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	441a      	add	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800759e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	4413      	add	r3, r2
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80075a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7fb ff74 	bl	800349c <lfs_alloc_ack>
    while (nsize > 0) {
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f47f af2b 	bne.w	8007412 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 80075bc:	683b      	ldr	r3, [r7, #0]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3730      	adds	r7, #48	; 0x30
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080075c8 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <lfs_file_rawwrite+0x28>
 80075e2:	4b38      	ldr	r3, [pc, #224]	; (80076c4 <lfs_file_rawwrite+0xfc>)
 80075e4:	4a38      	ldr	r2, [pc, #224]	; (80076c8 <lfs_file_rawwrite+0x100>)
 80075e6:	f640 5155 	movw	r1, #3413	; 0xd55
 80075ea:	4838      	ldr	r0, [pc, #224]	; (80076cc <lfs_file_rawwrite+0x104>)
 80075ec:	f001 feb8 	bl	8009360 <__assert_func>

    if (file->flags & LFS_F_READING) {
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d009      	beq.n	8007610 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fc52 	bl	8006ea8 <lfs_file_flush>
 8007604:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <lfs_file_rawwrite+0x48>
            return err;
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	e055      	b.n	80076bc <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007618:	2b00      	cmp	r3, #0
 800761a:	d009      	beq.n	8007630 <lfs_file_rawwrite+0x68>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	429a      	cmp	r2, r3
 8007626:	d203      	bcs.n	8007630 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	441a      	add	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763c:	429a      	cmp	r2, r3
 800763e:	d902      	bls.n	8007646 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8007640:	f06f 031a 	mvn.w	r3, #26
 8007644:	e03a      	b.n	80076bc <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d121      	bne.n	8007696 <lfs_file_rawwrite+0xce>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	429a      	cmp	r2, r3
 800765c:	d91b      	bls.n	8007696 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800766c:	e00e      	b.n	800768c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800766e:	2300      	movs	r3, #0
 8007670:	75fb      	strb	r3, [r7, #23]
 8007672:	f107 0217 	add.w	r2, r7, #23
 8007676:	2301      	movs	r3, #1
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7ff fe7c 	bl	8007378 <lfs_file_flushedwrite>
 8007680:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	2b00      	cmp	r3, #0
 8007686:	da01      	bge.n	800768c <lfs_file_rawwrite+0xc4>
                return res;
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	e017      	b.n	80076bc <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	429a      	cmp	r2, r3
 8007694:	d8eb      	bhi.n	800766e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff fe6b 	bl	8007378 <lfs_file_flushedwrite>
 80076a2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	da01      	bge.n	80076ae <lfs_file_rawwrite+0xe6>
        return nsize;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	e006      	b.n	80076bc <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 80076ba:	69bb      	ldr	r3, [r7, #24]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3728      	adds	r7, #40	; 0x28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	0800a824 	.word	0x0800a824
 80076c8:	0800aedc 	.word	0x0800aedc
 80076cc:	0800a4c8 	.word	0x0800a4c8

080076d0 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08c      	sub	sp, #48	; 0x30
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <lfs_init+0x2c>
 80076ee:	4b92      	ldr	r3, [pc, #584]	; (8007938 <lfs_init+0x268>)
 80076f0:	4a92      	ldr	r2, [pc, #584]	; (800793c <lfs_init+0x26c>)
 80076f2:	f640 7146 	movw	r1, #3910	; 0xf46
 80076f6:	4892      	ldr	r0, [pc, #584]	; (8007940 <lfs_init+0x270>)
 80076f8:	f001 fe32 	bl	8009360 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <lfs_init+0x44>
 8007706:	4b8f      	ldr	r3, [pc, #572]	; (8007944 <lfs_init+0x274>)
 8007708:	4a8c      	ldr	r2, [pc, #560]	; (800793c <lfs_init+0x26c>)
 800770a:	f640 7147 	movw	r1, #3911	; 0xf47
 800770e:	488c      	ldr	r0, [pc, #560]	; (8007940 <lfs_init+0x270>)
 8007710:	f001 fe26 	bl	8009360 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <lfs_init+0x5c>
 800771e:	4b8a      	ldr	r3, [pc, #552]	; (8007948 <lfs_init+0x278>)
 8007720:	4a86      	ldr	r2, [pc, #536]	; (800793c <lfs_init+0x26c>)
 8007722:	f640 7148 	movw	r1, #3912	; 0xf48
 8007726:	4886      	ldr	r0, [pc, #536]	; (8007940 <lfs_init+0x270>)
 8007728:	f001 fe1a 	bl	8009360 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007736:	6952      	ldr	r2, [r2, #20]
 8007738:	fbb3 f1f2 	udiv	r1, r3, r2
 800773c:	fb01 f202 	mul.w	r2, r1, r2
 8007740:	1a9b      	subs	r3, r3, r2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d006      	beq.n	8007754 <lfs_init+0x84>
 8007746:	4b81      	ldr	r3, [pc, #516]	; (800794c <lfs_init+0x27c>)
 8007748:	4a7c      	ldr	r2, [pc, #496]	; (800793c <lfs_init+0x26c>)
 800774a:	f640 714c 	movw	r1, #3916	; 0xf4c
 800774e:	487c      	ldr	r0, [pc, #496]	; (8007940 <lfs_init+0x270>)
 8007750:	f001 fe06 	bl	8009360 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800775e:	6992      	ldr	r2, [r2, #24]
 8007760:	fbb3 f1f2 	udiv	r1, r3, r2
 8007764:	fb01 f202 	mul.w	r2, r1, r2
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d006      	beq.n	800777c <lfs_init+0xac>
 800776e:	4b78      	ldr	r3, [pc, #480]	; (8007950 <lfs_init+0x280>)
 8007770:	4a72      	ldr	r2, [pc, #456]	; (800793c <lfs_init+0x26c>)
 8007772:	f640 714d 	movw	r1, #3917	; 0xf4d
 8007776:	4872      	ldr	r0, [pc, #456]	; (8007940 <lfs_init+0x270>)
 8007778:	f001 fdf2 	bl	8009360 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007786:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007788:	fbb3 f1f2 	udiv	r1, r3, r2
 800778c:	fb01 f202 	mul.w	r2, r1, r2
 8007790:	1a9b      	subs	r3, r3, r2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <lfs_init+0xd4>
 8007796:	4b6f      	ldr	r3, [pc, #444]	; (8007954 <lfs_init+0x284>)
 8007798:	4a68      	ldr	r2, [pc, #416]	; (800793c <lfs_init+0x26c>)
 800779a:	f640 714e 	movw	r1, #3918	; 0xf4e
 800779e:	4868      	ldr	r0, [pc, #416]	; (8007940 <lfs_init+0x270>)
 80077a0:	f001 fdde 	bl	8009360 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	3b08      	subs	r3, #8
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fa ff62 	bl	800267e <lfs_npw2>
 80077ba:	4603      	mov	r3, r0
 80077bc:	009a      	lsls	r2, r3, #2
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d906      	bls.n	80077d6 <lfs_init+0x106>
 80077c8:	4b63      	ldr	r3, [pc, #396]	; (8007958 <lfs_init+0x288>)
 80077ca:	4a5c      	ldr	r2, [pc, #368]	; (800793c <lfs_init+0x26c>)
 80077cc:	f640 7151 	movw	r1, #3921	; 0xf51
 80077d0:	485b      	ldr	r0, [pc, #364]	; (8007940 <lfs_init+0x270>)
 80077d2:	f001 fdc5 	bl	8009360 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d106      	bne.n	80077ee <lfs_init+0x11e>
 80077e0:	4b5e      	ldr	r3, [pc, #376]	; (800795c <lfs_init+0x28c>)
 80077e2:	4a56      	ldr	r2, [pc, #344]	; (800793c <lfs_init+0x26c>)
 80077e4:	f640 715a 	movw	r1, #3930	; 0xf5a
 80077e8:	4855      	ldr	r0, [pc, #340]	; (8007940 <lfs_init+0x270>)
 80077ea:	f001 fdb9 	bl	8009360 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60da      	str	r2, [r3, #12]
 8007802:	e010      	b.n	8007826 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	4618      	mov	r0, r3
 800780c:	f7fa ff9f 	bl	800274e <lfs_malloc>
 8007810:	4602      	mov	r2, r0
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800781e:	f06f 030b 	mvn.w	r3, #11
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8007824:	e0fd      	b.n	8007a22 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	61da      	str	r2, [r3, #28]
 800783a:	e010      	b.n	800785e <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	4618      	mov	r0, r3
 8007844:	f7fa ff83 	bl	800274e <lfs_malloc>
 8007848:	4602      	mov	r2, r0
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8007856:	f06f 030b 	mvn.w	r3, #11
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800785c:	e0e1      	b.n	8007a22 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fa ff99 	bl	800279a <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3310      	adds	r3, #16
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fa ff93 	bl	800279a <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <lfs_init+0x1bc>
 800787e:	4b38      	ldr	r3, [pc, #224]	; (8007960 <lfs_init+0x290>)
 8007880:	4a2e      	ldr	r2, [pc, #184]	; (800793c <lfs_init+0x26c>)
 8007882:	f640 7178 	movw	r1, #3960	; 0xf78
 8007886:	482e      	ldr	r0, [pc, #184]	; (8007940 <lfs_init+0x270>)
 8007888:	f001 fd6a 	bl	8009360 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	2b00      	cmp	r3, #0
 8007898:	d106      	bne.n	80078a8 <lfs_init+0x1d8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d006      	beq.n	80078b6 <lfs_init+0x1e6>
 80078a8:	4b2e      	ldr	r3, [pc, #184]	; (8007964 <lfs_init+0x294>)
 80078aa:	4a24      	ldr	r2, [pc, #144]	; (800793c <lfs_init+0x26c>)
 80078ac:	f640 7179 	movw	r1, #3961	; 0xf79
 80078b0:	4823      	ldr	r0, [pc, #140]	; (8007940 <lfs_init+0x270>)
 80078b2:	f001 fd55 	bl	8009360 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	665a      	str	r2, [r3, #100]	; 0x64
 80078ca:	e010      	b.n	80078ee <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fa ff3b 	bl	800274e <lfs_malloc>
 80078d8:	4602      	mov	r2, r0
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d103      	bne.n	80078ee <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80078e6:	f06f 030b 	mvn.w	r3, #11
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80078ec:	e099      	b.n	8007a22 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f4:	2bff      	cmp	r3, #255	; 0xff
 80078f6:	d906      	bls.n	8007906 <lfs_init+0x236>
 80078f8:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <lfs_init+0x298>)
 80078fa:	4a10      	ldr	r2, [pc, #64]	; (800793c <lfs_init+0x26c>)
 80078fc:	f640 7186 	movw	r1, #3974	; 0xf86
 8007900:	480f      	ldr	r0, [pc, #60]	; (8007940 <lfs_init+0x270>)
 8007902:	f001 fd2d 	bl	8009360 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800790a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	22ff      	movs	r2, #255	; 0xff
 800791c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	da23      	bge.n	8007970 <lfs_init+0x2a0>
 8007928:	4b10      	ldr	r3, [pc, #64]	; (800796c <lfs_init+0x29c>)
 800792a:	4a04      	ldr	r2, [pc, #16]	; (800793c <lfs_init+0x26c>)
 800792c:	f640 718c 	movw	r1, #3980	; 0xf8c
 8007930:	4803      	ldr	r0, [pc, #12]	; (8007940 <lfs_init+0x270>)
 8007932:	f001 fd15 	bl	8009360 <__assert_func>
 8007936:	bf00      	nop
 8007938:	0800a854 	.word	0x0800a854
 800793c:	0800aef0 	.word	0x0800aef0
 8007940:	0800a4c8 	.word	0x0800a4c8
 8007944:	0800a870 	.word	0x0800a870
 8007948:	0800a88c 	.word	0x0800a88c
 800794c:	0800a8a8 	.word	0x0800a8a8
 8007950:	0800a8d8 	.word	0x0800a8d8
 8007954:	0800a908 	.word	0x0800a908
 8007958:	0800a93c 	.word	0x0800a93c
 800795c:	0800a988 	.word	0x0800a988
 8007960:	0800a9a4 	.word	0x0800a9a4
 8007964:	0800a9c4 	.word	0x0800a9c4
 8007968:	0800aa18 	.word	0x0800aa18
 800796c:	0800aa34 	.word	0x0800aa34
    lfs->file_max = lfs->cfg->file_max;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	2b00      	cmp	r3, #0
 8007980:	d103      	bne.n	800798a <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007988:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007990:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007994:	4293      	cmp	r3, r2
 8007996:	d906      	bls.n	80079a6 <lfs_init+0x2d6>
 8007998:	4b26      	ldr	r3, [pc, #152]	; (8007a34 <lfs_init+0x364>)
 800799a:	4a27      	ldr	r2, [pc, #156]	; (8007a38 <lfs_init+0x368>)
 800799c:	f640 7192 	movw	r1, #3986	; 0xf92
 80079a0:	4826      	ldr	r0, [pc, #152]	; (8007a3c <lfs_init+0x36c>)
 80079a2:	f001 fcdd 	bl	8009360 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80079be:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d906      	bls.n	80079de <lfs_init+0x30e>
 80079d0:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <lfs_init+0x370>)
 80079d2:	4a19      	ldr	r2, [pc, #100]	; (8007a38 <lfs_init+0x368>)
 80079d4:	f640 7198 	movw	r1, #3992	; 0xf98
 80079d8:	4818      	ldr	r0, [pc, #96]	; (8007a3c <lfs_init+0x36c>)
 80079da:	f001 fcc1 	bl	8009360 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079e4:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	333c      	adds	r3, #60	; 0x3c
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	605a      	str	r2, [r3, #4]
 8007a04:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3330      	adds	r3, #48	; 0x30
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	605a      	str	r2, [r3, #4]
 8007a10:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3348      	adds	r3, #72	; 0x48
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	605a      	str	r2, [r3, #4]
 8007a1c:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e003      	b.n	8007a2a <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f80e 	bl	8007a44 <lfs_deinit>
    return err;
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3730      	adds	r7, #48	; 0x30
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	0800aa58 	.word	0x0800aa58
 8007a38:	0800aef0 	.word	0x0800aef0
 8007a3c:	0800a4c8 	.word	0x0800a4c8
 8007a40:	0800aa74 	.word	0x0800aa74

08007a44 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fa fe83 	bl	8002766 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d104      	bne.n	8007a74 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fa fe79 	bl	8002766 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d104      	bne.n	8007a88 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fa fe6f 	bl	8002766 <lfs_free>
    }

    return 0;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b0a0      	sub	sp, #128	; 0x80
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
    int err = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fe13 	bl	80076d0 <lfs_init>
 8007aaa:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <lfs_rawformat+0x22>
            return err;
 8007ab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ab4:	e082      	b.n	8007bbc <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	f001 fcd4 	bl	8009470 <memset>
        lfs->free.off = 0;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f7fa fd96 	bl	8002610 <lfs_min>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fb fcd3 	bl	800349c <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8007af6:	f107 030c 	add.w	r3, r7, #12
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7fd faab 	bl	8005058 <lfs_dir_alloc>
 8007b02:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d14f      	bne.n	8007baa <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8007b0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b0e:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b14:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8007b16:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8007b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8007b24:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8007b2a:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8007b30:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8007b32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fb fbf0 	bl	800331c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007b3c:	4b21      	ldr	r3, [pc, #132]	; (8007bc4 <lfs_rawformat+0x130>)
 8007b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b40:	2300      	movs	r3, #0
 8007b42:	653b      	str	r3, [r7, #80]	; 0x50
 8007b44:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <lfs_rawformat+0x134>)
 8007b46:	657b      	str	r3, [r7, #84]	; 0x54
 8007b48:	4b20      	ldr	r3, [pc, #128]	; (8007bcc <lfs_rawformat+0x138>)
 8007b4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b4c:	4b20      	ldr	r3, [pc, #128]	; (8007bd0 <lfs_rawformat+0x13c>)
 8007b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007b54:	663b      	str	r3, [r7, #96]	; 0x60
 8007b56:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007b5a:	f107 010c 	add.w	r1, r7, #12
 8007b5e:	2303      	movs	r3, #3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fe fc53 	bl	800640c <lfs_dir_commit>
 8007b66:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8007b68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d11f      	bne.n	8007bae <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8007b74:	f107 010c 	add.w	r1, r7, #12
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7fe fc45 	bl	800640c <lfs_dir_commit>
 8007b82:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d113      	bne.n	8007bb2 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b8e:	2301      	movs	r3, #1
 8007b90:	633b      	str	r3, [r7, #48]	; 0x30
 8007b92:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007b96:	f107 030c 	add.w	r3, r7, #12
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fc fed7 	bl	8004950 <lfs_dir_fetch>
 8007ba2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8007ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	e004      	b.n	8007bb4 <lfs_rawformat+0x120>
            goto cleanup;
 8007baa:	bf00      	nop
 8007bac:	e002      	b.n	8007bb4 <lfs_rawformat+0x120>
            goto cleanup;
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <lfs_rawformat+0x120>
            goto cleanup;
 8007bb2:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ff45 	bl	8007a44 <lfs_deinit>
    return err;
 8007bba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3780      	adds	r7, #128	; 0x80
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	40100000 	.word	0x40100000
 8007bc8:	0ff00008 	.word	0x0ff00008
 8007bcc:	0800aaa4 	.word	0x0800aaa4
 8007bd0:	20100018 	.word	0x20100018

08007bd4 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b09c      	sub	sp, #112	; 0x70
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fd75 	bl	80076d0 <lfs_init>
 8007be6:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8007be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <lfs_rawmount+0x1e>
        return err;
 8007bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bf0:	e192      	b.n	8007f18 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007bf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 fc38 	bl	8009470 <memset>
 8007c00:	2301      	movs	r3, #1
 8007c02:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8007c08:	e10b      	b.n	8007e22 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	085b      	lsrs	r3, r3, #1
 8007c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d303      	bcc.n	8007c20 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8007c18:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007c1e:	e177      	b.n	8007f10 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8007c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c22:	3301      	adds	r3, #1
 8007c24:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
 8007c2a:	4b8a      	ldr	r3, [pc, #552]	; (8007e54 <lfs_rawmount+0x280>)
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2e:	2308      	movs	r3, #8
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8007c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c36:	f103 0218 	add.w	r2, r3, #24
 8007c3a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c42:	9303      	str	r3, [sp, #12]
 8007c44:	4b84      	ldr	r3, [pc, #528]	; (8007e58 <lfs_rawmount+0x284>)
 8007c46:	9302      	str	r3, [sp, #8]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	4b83      	ldr	r3, [pc, #524]	; (8007e5c <lfs_rawmount+0x288>)
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	4b83      	ldr	r3, [pc, #524]	; (8007e60 <lfs_rawmount+0x28c>)
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7fc fb0e 	bl	8004274 <lfs_dir_fetchmatch>
 8007c58:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8007c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da02      	bge.n	8007c66 <lfs_rawmount+0x92>
            err = tag;
 8007c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c62:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007c64:	e154      	b.n	8007f10 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8007c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80cd 	beq.w	8007e08 <lfs_rawmount+0x234>
 8007c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fb f996 	bl	8002fa2 <lfs_tag_isdelete>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f083 0301 	eor.w	r3, r3, #1
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 80c2 	beq.w	8007e08 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8007c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8007c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8007c90:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007c94:	f107 030c 	add.w	r3, r7, #12
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	4b72      	ldr	r3, [pc, #456]	; (8007e64 <lfs_rawmount+0x290>)
 8007c9c:	4a70      	ldr	r2, [pc, #448]	; (8007e60 <lfs_rawmount+0x28c>)
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fb fdb6 	bl	8003810 <lfs_dir_get>
 8007ca4:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8007ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	da02      	bge.n	8007cb2 <lfs_rawmount+0xde>
                err = tag;
 8007cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cae:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007cb0:	e12e      	b.n	8007f10 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8007cb2:	f107 030c 	add.w	r3, r7, #12
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fb faf8 	bl	80032ac <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8007cca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d103      	bne.n	8007cda <lfs_rawmount+0x106>
 8007cd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d011      	beq.n	8007cfe <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8007cda:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8007cde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007ce2:	4961      	ldr	r1, [pc, #388]	; (8007e68 <lfs_rawmount+0x294>)
 8007ce4:	9101      	str	r1, [sp, #4]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	f241 0233 	movw	r2, #4147	; 0x1033
 8007cee:	495f      	ldr	r1, [pc, #380]	; (8007e6c <lfs_rawmount+0x298>)
 8007cf0:	485f      	ldr	r0, [pc, #380]	; (8007e70 <lfs_rawmount+0x29c>)
 8007cf2:	f001 ff93 	bl	8009c1c <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8007cf6:	f06f 0315 	mvn.w	r3, #21
 8007cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007cfc:	e083      	b.n	8007e06 <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d018      	beq.n	8007d36 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d910      	bls.n	8007d30 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d14:	4954      	ldr	r1, [pc, #336]	; (8007e68 <lfs_rawmount+0x294>)
 8007d16:	9101      	str	r1, [sp, #4]
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	f241 023c 	movw	r2, #4156	; 0x103c
 8007d20:	4952      	ldr	r1, [pc, #328]	; (8007e6c <lfs_rawmount+0x298>)
 8007d22:	4854      	ldr	r0, [pc, #336]	; (8007e74 <lfs_rawmount+0x2a0>)
 8007d24:	f001 ff7a 	bl	8009c1c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8007d28:	f06f 0315 	mvn.w	r3, #21
 8007d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007d2e:	e06a      	b.n	8007e06 <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d018      	beq.n	8007d6e <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d910      	bls.n	8007d68 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4c:	4946      	ldr	r1, [pc, #280]	; (8007e68 <lfs_rawmount+0x294>)
 8007d4e:	9101      	str	r1, [sp, #4]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4613      	mov	r3, r2
 8007d54:	f241 0247 	movw	r2, #4167	; 0x1047
 8007d58:	4944      	ldr	r1, [pc, #272]	; (8007e6c <lfs_rawmount+0x298>)
 8007d5a:	4847      	ldr	r0, [pc, #284]	; (8007e78 <lfs_rawmount+0x2a4>)
 8007d5c:	f001 ff5e 	bl	8009c1c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8007d60:	f06f 0315 	mvn.w	r3, #21
 8007d64:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007d66:	e04e      	b.n	8007e06 <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d018      	beq.n	8007da6 <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8007d74:	6a3a      	ldr	r2, [r7, #32]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d910      	bls.n	8007da0 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8007d7e:	6a3a      	ldr	r2, [r7, #32]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d84:	4938      	ldr	r1, [pc, #224]	; (8007e68 <lfs_rawmount+0x294>)
 8007d86:	9101      	str	r1, [sp, #4]
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	f241 0252 	movw	r2, #4178	; 0x1052
 8007d90:	4936      	ldr	r1, [pc, #216]	; (8007e6c <lfs_rawmount+0x298>)
 8007d92:	483a      	ldr	r0, [pc, #232]	; (8007e7c <lfs_rawmount+0x2a8>)
 8007d94:	f001 ff42 	bl	8009c1c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8007d98:	f06f 0315 	mvn.w	r3, #21
 8007d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8007d9e:	e032      	b.n	8007e06 <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8007da0:	6a3a      	ldr	r2, [r7, #32]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d011      	beq.n	8007dd6 <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	492b      	ldr	r1, [pc, #172]	; (8007e68 <lfs_rawmount+0x294>)
 8007dbc:	9101      	str	r1, [sp, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	f241 025c 	movw	r2, #4188	; 0x105c
 8007dc6:	4929      	ldr	r1, [pc, #164]	; (8007e6c <lfs_rawmount+0x298>)
 8007dc8:	482d      	ldr	r0, [pc, #180]	; (8007e80 <lfs_rawmount+0x2ac>)
 8007dca:	f001 ff27 	bl	8009c1c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8007dce:	f06f 0315 	mvn.w	r3, #21
 8007dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007dd4:	e017      	b.n	8007e06 <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d012      	beq.n	8007e08 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	491f      	ldr	r1, [pc, #124]	; (8007e68 <lfs_rawmount+0x294>)
 8007dec:	9101      	str	r1, [sp, #4]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	f241 0263 	movw	r2, #4195	; 0x1063
 8007df6:	491d      	ldr	r1, [pc, #116]	; (8007e6c <lfs_rawmount+0x298>)
 8007df8:	4822      	ldr	r0, [pc, #136]	; (8007e84 <lfs_rawmount+0x2b0>)
 8007dfa:	f001 ff0f 	bl	8009c1c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8007dfe:	f06f 0315 	mvn.w	r3, #21
 8007e02:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8007e04:	bf00      	nop
            goto cleanup;
 8007e06:	e083      	b.n	8007f10 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fc fdb7 	bl	8004988 <lfs_dir_getgstate>
 8007e1a:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8007e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d175      	bne.n	8007f0e <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8007e22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e26:	3318      	adds	r3, #24
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fb f806 	bl	8002e3a <lfs_pair_isnull>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	f083 0301 	eor.w	r3, r3, #1
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f47f aee7 	bne.w	8007c0a <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3320      	adds	r3, #32
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fa fffa 	bl	8002e3a <lfs_pair_isnull>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01d      	beq.n	8007e88 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8007e4c:	f06f 0315 	mvn.w	r3, #21
 8007e50:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8007e52:	e05d      	b.n	8007f10 <lfs_rawmount+0x33c>
 8007e54:	0800aaa4 	.word	0x0800aaa4
 8007e58:	080049ed 	.word	0x080049ed
 8007e5c:	0ff00008 	.word	0x0ff00008
 8007e60:	7ffffc00 	.word	0x7ffffc00
 8007e64:	20100018 	.word	0x20100018
 8007e68:	0800a5cc 	.word	0x0800a5cc
 8007e6c:	0800a4c8 	.word	0x0800a4c8
 8007e70:	0800aab0 	.word	0x0800aab0
 8007e74:	0800aadc 	.word	0x0800aadc
 8007e78:	0800ab10 	.word	0x0800ab10
 8007e7c:	0800ab44 	.word	0x0800ab44
 8007e80:	0800ab78 	.word	0x0800ab78
 8007e84:	0800abac 	.word	0x0800abac
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3330      	adds	r3, #48	; 0x30
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fb f92b 	bl	80030e8 <lfs_gstate_iszero>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f083 0301 	eor.w	r3, r3, #1
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d010      	beq.n	8007ec0 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007eaa:	481d      	ldr	r0, [pc, #116]	; (8007f20 <lfs_rawmount+0x34c>)
 8007eac:	9002      	str	r0, [sp, #8]
 8007eae:	9201      	str	r2, [sp, #4]
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	f241 0279 	movw	r2, #4217	; 0x1079
 8007eb8:	491a      	ldr	r1, [pc, #104]	; (8007f24 <lfs_rawmount+0x350>)
 8007eba:	481b      	ldr	r0, [pc, #108]	; (8007f28 <lfs_rawmount+0x354>)
 8007ebc:	f001 feae 	bl	8009c1c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fb f85e 	bl	8002f86 <lfs_tag_isvalid>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	f083 0301 	eor.w	r3, r3, #1
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed8:	441a      	add	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	333c      	adds	r3, #60	; 0x3c
 8007ee4:	3230      	adds	r2, #48	; 0x30
 8007ee6:	ca07      	ldmia	r2, {r0, r1, r2}
 8007ee8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ef4:	6a12      	ldr	r2, [r2, #32]
 8007ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007efa:	fb01 f202 	mul.w	r2, r1, r2
 8007efe:	1a9a      	subs	r2, r3, r2
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7fb fad8 	bl	80034ba <lfs_alloc_drop>

    return 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e004      	b.n	8007f18 <lfs_rawmount+0x344>
            goto cleanup;
 8007f0e:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f80b 	bl	8007f2c <lfs_rawunmount>
    return err;
 8007f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3760      	adds	r7, #96	; 0x60
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	0800a5cc 	.word	0x0800a5cc
 8007f24:	0800a4c8 	.word	0x0800a4c8
 8007f28:	0800abdc 	.word	0x0800abdc

08007f2c <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff fd85 	bl	8007a44 <lfs_deinit>
 8007f3a:	4603      	mov	r3, r0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8007f44:	b590      	push	{r4, r7, lr}
 8007f46:	b09d      	sub	sp, #116	; 0x74
 8007f48:	af04      	add	r7, sp, #16
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8007f52:	f107 0318 	add.w	r3, r7, #24
 8007f56:	2220      	movs	r2, #32
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 fa88 	bl	8009470 <memset>
 8007f60:	2301      	movs	r3, #1
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8007f68:	e0a7      	b.n	80080ba <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	085b      	lsrs	r3, r3, #1
 8007f72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d302      	bcc.n	8007f7e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8007f78:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007f7c:	e102      	b.n	8008184 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8007f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f80:	3301      	adds	r3, #1
 8007f82:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8007f84:	2300      	movs	r3, #0
 8007f86:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f88:	e013      	b.n	8007fb2 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8007f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f8c:	3306      	adds	r3, #6
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	3360      	adds	r3, #96	; 0x60
 8007f92:	443b      	add	r3, r7
 8007f94:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
 8007fa0:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <lfs_fs_rawtraverse+0x68>
                return err;
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	e0eb      	b.n	8008184 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8007fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fae:	3301      	adds	r3, #1
 8007fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	dde8      	ble.n	8007f8a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8007fb8:	f107 0318 	add.w	r3, r7, #24
 8007fbc:	f103 0218 	add.w	r2, r3, #24
 8007fc0:	f107 0318 	add.w	r3, r7, #24
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7fc fcc2 	bl	8004950 <lfs_dir_fetch>
 8007fcc:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8007fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <lfs_fs_rawtraverse+0x94>
            return err;
 8007fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd6:	e0d5      	b.n	8008184 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007fde:	e067      	b.n	80080b0 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8007fe0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007fe4:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8007fe6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fea:	f043 0308 	orr.w	r3, r3, #8
 8007fee:	f107 0118 	add.w	r1, r7, #24
 8007ff2:	f107 0210 	add.w	r2, r7, #16
 8007ff6:	9200      	str	r2, [sp, #0]
 8007ff8:	4a64      	ldr	r2, [pc, #400]	; (800818c <lfs_fs_rawtraverse+0x248>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7fb fc08 	bl	8003810 <lfs_dir_get>
 8008000:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8008002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008004:	2b00      	cmp	r3, #0
 8008006:	da05      	bge.n	8008014 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8008008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800a:	f113 0f02 	cmn.w	r3, #2
 800800e:	d049      	beq.n	80080a4 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8008010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008012:	e0b7      	b.n	8008184 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8008014:	f107 0310 	add.w	r3, r7, #16
 8008018:	4618      	mov	r0, r3
 800801a:	f7fb f917 	bl	800324c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800801e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008020:	4618      	mov	r0, r3
 8008022:	f7fa ffe1 	bl	8002fe8 <lfs_tag_type3>
 8008026:	4603      	mov	r3, r0
 8008028:	461a      	mov	r2, r3
 800802a:	f240 2302 	movw	r3, #514	; 0x202
 800802e:	429a      	cmp	r2, r3
 8008030:	d113      	bne.n	800805a <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	6938      	ldr	r0, [r7, #16]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	9202      	str	r2, [sp, #8]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	9201      	str	r2, [sp, #4]
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	4603      	mov	r3, r0
 8008044:	460a      	mov	r2, r1
 8008046:	2100      	movs	r1, #0
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7fe fbaf 	bl	80067ac <lfs_ctz_traverse>
 800804e:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8008050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	d027      	beq.n	80080a6 <lfs_fs_rawtraverse+0x162>
                    return err;
 8008056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008058:	e094      	b.n	8008184 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d022      	beq.n	80080a6 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8008060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008062:	4618      	mov	r0, r3
 8008064:	f7fa ffc0 	bl	8002fe8 <lfs_tag_type3>
 8008068:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800806a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806e:	d11a      	bne.n	80080a6 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8008070:	2300      	movs	r3, #0
 8008072:	653b      	str	r3, [r7, #80]	; 0x50
 8008074:	e012      	b.n	800809c <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8008076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	f107 0210 	add.w	r2, r7, #16
 800807e:	4413      	add	r3, r2
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4611      	mov	r1, r2
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
 800808a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800808c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <lfs_fs_rawtraverse+0x152>
                        return err;
 8008092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008094:	e076      	b.n	8008184 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8008096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008098:	3301      	adds	r3, #1
 800809a:	653b      	str	r3, [r7, #80]	; 0x50
 800809c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800809e:	2b01      	cmp	r3, #1
 80080a0:	dde9      	ble.n	8008076 <lfs_fs_rawtraverse+0x132>
 80080a2:	e000      	b.n	80080a6 <lfs_fs_rawtraverse+0x162>
                    continue;
 80080a4:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80080a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080aa:	3301      	adds	r3, #1
 80080ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80080b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80080b2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d392      	bcc.n	8007fe0 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 80080ba:	f107 0318 	add.w	r3, r7, #24
 80080be:	3318      	adds	r3, #24
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fa feba 	bl	8002e3a <lfs_pair_isnull>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f083 0301 	eor.w	r3, r3, #1
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f47f af4b 	bne.w	8007f6a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080da:	e04f      	b.n	800817c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 80080dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080de:	799b      	ldrb	r3, [r3, #6]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d147      	bne.n	8008174 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80080e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01d      	beq.n	800812c <lfs_fs_rawtraverse+0x1e8>
 80080f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d117      	bne.n	800812c <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80080fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fe:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008106:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8008108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	9202      	str	r2, [sp, #8]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	9201      	str	r2, [sp, #4]
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	4623      	mov	r3, r4
 8008118:	4602      	mov	r2, r0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f7fe fb46 	bl	80067ac <lfs_ctz_traverse>
 8008120:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8008122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <lfs_fs_rawtraverse+0x1e8>
                return err;
 8008128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800812a:	e02b      	b.n	8008184 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800812c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01e      	beq.n	8008176 <lfs_fs_rawtraverse+0x232>
 8008138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d118      	bne.n	8008176 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8008144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008146:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800814e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8008150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	9202      	str	r2, [sp, #8]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	9201      	str	r2, [sp, #4]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4623      	mov	r3, r4
 8008160:	4602      	mov	r2, r0
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7fe fb22 	bl	80067ac <lfs_ctz_traverse>
 8008168:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800816a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <lfs_fs_rawtraverse+0x232>
                return err;
 8008170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008172:	e007      	b.n	8008184 <lfs_fs_rawtraverse+0x240>
            continue;
 8008174:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8008176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800817c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1ac      	bne.n	80080dc <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3764      	adds	r7, #100	; 0x64
 8008188:	46bd      	mov	sp, r7
 800818a:	bd90      	pop	{r4, r7, pc}
 800818c:	700ffc00 	.word	0x700ffc00

08008190 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 80081ac:	e024      	b.n	80081f8 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d302      	bcc.n	80081c2 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80081bc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80081c0:	e027      	b.n	8008212 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	3301      	adds	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3318      	adds	r3, #24
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fa fe4e 	bl	8002e70 <lfs_pair_cmp>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <lfs_fs_pred+0x4e>
            return 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	e019      	b.n	8008212 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3318      	adds	r3, #24
 80081e2:	461a      	mov	r2, r3
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f7fc fbb2 	bl	8004950 <lfs_dir_fetch>
 80081ec:	6138      	str	r0, [r7, #16]
        if (err) {
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <lfs_fs_pred+0x68>
            return err;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	e00c      	b.n	8008212 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3318      	adds	r3, #24
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fa fe1c 	bl	8002e3a <lfs_pair_isnull>
 8008202:	4603      	mov	r3, r0
 8008204:	f083 0301 	eor.w	r3, r3, #1
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1cf      	bne.n	80081ae <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800820e:	f06f 0301 	mvn.w	r3, #1
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800821a:	b5b0      	push	{r4, r5, r7, lr}
 800821c:	b08e      	sub	sp, #56	; 0x38
 800821e:	af04      	add	r7, sp, #16
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800823a:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8008240:	69dd      	ldr	r5, [r3, #28]
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	6852      	ldr	r2, [r2, #4]
 800824a:	2108      	movs	r1, #8
 800824c:	9103      	str	r1, [sp, #12]
 800824e:	f107 0110 	add.w	r1, r7, #16
 8008252:	9102      	str	r1, [sp, #8]
 8008254:	9201      	str	r2, [sp, #4]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	462b      	mov	r3, r5
 800825a:	4622      	mov	r2, r4
 800825c:	4601      	mov	r1, r0
 800825e:	6a38      	ldr	r0, [r7, #32]
 8008260:	f7fa fab2 	bl	80027c8 <lfs_bd_read>
 8008264:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <lfs_fs_parent_match+0x56>
        return err;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	e012      	b.n	8008296 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8008270:	f107 0310 	add.w	r3, r7, #16
 8008274:	4618      	mov	r0, r3
 8008276:	f7fa fe52 	bl	8002f1e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	f107 0310 	add.w	r3, r7, #16
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f7fa fdf3 	bl	8002e70 <lfs_pair_cmp>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	bf14      	ite	ne
 8008290:	2301      	movne	r3, #1
 8008292:	2300      	moveq	r3, #0
 8008294:	b2db      	uxtb	r3, r3
}
 8008296:	4618      	mov	r0, r3
 8008298:	3728      	adds	r7, #40	; 0x28
 800829a:	46bd      	mov	sp, r7
 800829c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080082a0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08e      	sub	sp, #56	; 0x38
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 80082bc:	e02f      	b.n	800831e <lfs_fs_parent+0x7e>
        if (cycle >= lfs->cfg->block_count/2) {
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	085b      	lsrs	r3, r3, #1
 80082c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d302      	bcc.n	80082d2 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 80082cc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80082d0:	e032      	b.n	8008338 <lfs_fs_parent+0x98>
        }
        cycle += 1;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	3301      	adds	r3, #1
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80082ee:	f107 0314 	add.w	r3, r7, #20
 80082f2:	9303      	str	r3, [sp, #12]
 80082f4:	4b12      	ldr	r3, [pc, #72]	; (8008340 <lfs_fs_parent+0xa0>)
 80082f6:	9302      	str	r3, [sp, #8]
 80082f8:	2300      	movs	r3, #0
 80082fa:	9301      	str	r3, [sp, #4]
 80082fc:	4b11      	ldr	r3, [pc, #68]	; (8008344 <lfs_fs_parent+0xa4>)
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <lfs_fs_parent+0xa8>)
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f7fb ffb5 	bl	8004274 <lfs_dir_fetchmatch>
 800830a:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <lfs_fs_parent+0x7e>
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	f113 0f02 	cmn.w	r3, #2
 8008318:	d001      	beq.n	800831e <lfs_fs_parent+0x7e>
            return tag;
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	e00c      	b.n	8008338 <lfs_fs_parent+0x98>
    while (!lfs_pair_isnull(parent->tail)) {
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3318      	adds	r3, #24
 8008322:	4618      	mov	r0, r3
 8008324:	f7fa fd89 	bl	8002e3a <lfs_pair_isnull>
 8008328:	4603      	mov	r3, r0
 800832a:	f083 0301 	eor.w	r3, r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1c4      	bne.n	80082be <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8008334:	f06f 0301 	mvn.w	r3, #1
}
 8008338:	4618      	mov	r0, r3
 800833a:	3728      	adds	r7, #40	; 0x28
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	0800821b 	.word	0x0800821b
 8008344:	20000008 	.word	0x20000008
 8008348:	7ff003ff 	.word	0x7ff003ff

0800834c <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800834c:	b590      	push	{r4, r7, lr}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	4618      	mov	r0, r3
 800835e:	f7fa fe7d 	bl	800305c <lfs_tag_size>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <lfs_fs_preporphans+0x32>
 8008368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800836c:	2b00      	cmp	r3, #0
 800836e:	da06      	bge.n	800837e <lfs_fs_preporphans+0x32>
 8008370:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <lfs_fs_preporphans+0x68>)
 8008372:	4a11      	ldr	r2, [pc, #68]	; (80083b8 <lfs_fs_preporphans+0x6c>)
 8008374:	f241 114c 	movw	r1, #4428	; 0x114c
 8008378:	4810      	ldr	r0, [pc, #64]	; (80083bc <lfs_fs_preporphans+0x70>)
 800837a:	f000 fff1 	bl	8009360 <__assert_func>
    lfs->gstate.tag += orphans;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008386:	441a      	add	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3330      	adds	r3, #48	; 0x30
 8008398:	4618      	mov	r0, r3
 800839a:	f7fa fec2 	bl	8003122 <lfs_gstate_hasorphans>
 800839e:	4603      	mov	r3, r0
 80083a0:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80083a2:	ea44 0203 	orr.w	r2, r4, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd90      	pop	{r4, r7, pc}
 80083b4:	0800ac14 	.word	0x0800ac14
 80083b8:	0800aefc 	.word	0x0800aefc
 80083bc:	0800a4c8 	.word	0x0800a4c8

080083c0 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	460b      	mov	r3, r1
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d2:	4a17      	ldr	r2, [pc, #92]	; (8008430 <lfs_fs_prepmove+0x70>)
 80083d4:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80083d6:	897b      	ldrh	r3, [r7, #10]
 80083d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80083dc:	428b      	cmp	r3, r1
 80083de:	d006      	beq.n	80083ee <lfs_fs_prepmove+0x2e>
 80083e0:	897b      	ldrh	r3, [r7, #10]
 80083e2:	029b      	lsls	r3, r3, #10
 80083e4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80083e8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80083ec:	e000      	b.n	80083f0 <lfs_fs_prepmove+0x30>
 80083ee:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80083f0:	431a      	orrs	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80083f6:	897b      	ldrh	r3, [r7, #10]
 80083f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d002      	beq.n	8008406 <lfs_fs_prepmove+0x46>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	e000      	b.n	8008408 <lfs_fs_prepmove+0x48>
 8008406:	2300      	movs	r3, #0
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800840c:	897b      	ldrh	r3, [r7, #10]
 800840e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008412:	4293      	cmp	r3, r2
 8008414:	d003      	beq.n	800841e <lfs_fs_prepmove+0x5e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3304      	adds	r3, #4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	e000      	b.n	8008420 <lfs_fs_prepmove+0x60>
 800841e:	2300      	movs	r3, #0
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008424:	bf00      	nop
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	800003ff 	.word	0x800003ff

08008434 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8008434:	b5b0      	push	{r4, r5, r7, lr}
 8008436:	b094      	sub	sp, #80	; 0x50
 8008438:	af04      	add	r7, sp, #16
 800843a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	333c      	adds	r3, #60	; 0x3c
 8008440:	4618      	mov	r0, r3
 8008442:	f7fa fe90 	bl	8003166 <lfs_gstate_hasmove>
 8008446:	4603      	mov	r3, r0
 8008448:	f083 0301 	eor.w	r3, r3, #1
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <lfs_fs_demove+0x22>
        return 0;
 8008452:	2300      	movs	r3, #0
 8008454:	e049      	b.n	80084ea <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008462:	4618      	mov	r0, r3
 8008464:	f7fa fdea 	bl	800303c <lfs_tag_id>
 8008468:	4603      	mov	r3, r0
 800846a:	461a      	mov	r2, r3
 800846c:	4b21      	ldr	r3, [pc, #132]	; (80084f4 <lfs_fs_demove+0xc0>)
 800846e:	9302      	str	r3, [sp, #8]
 8008470:	9201      	str	r2, [sp, #4]
 8008472:	9400      	str	r4, [sp, #0]
 8008474:	462b      	mov	r3, r5
 8008476:	f241 1266 	movw	r2, #4454	; 0x1166
 800847a:	491f      	ldr	r1, [pc, #124]	; (80084f8 <lfs_fs_demove+0xc4>)
 800847c:	481f      	ldr	r0, [pc, #124]	; (80084fc <lfs_fs_demove+0xc8>)
 800847e:	f001 fbcd 	bl	8009c1c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008488:	f107 0318 	add.w	r3, r7, #24
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fc fa5e 	bl	8004950 <lfs_dir_fetch>
 8008494:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8008496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <lfs_fs_demove+0x6c>
        return err;
 800849c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849e:	e024      	b.n	80084ea <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fa fdc9 	bl	800303c <lfs_tag_id>
 80084aa:	4603      	mov	r3, r0
 80084ac:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80084ae:	2200      	movs	r2, #0
 80084b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ff83 	bl	80083c0 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80084ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80084bc:	029b      	lsls	r3, r3, #10
 80084be:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80084c2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	f107 0210 	add.w	r2, r7, #16
 80084d0:	f107 0118 	add.w	r1, r7, #24
 80084d4:	2301      	movs	r3, #1
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7fd ff98 	bl	800640c <lfs_dir_commit>
 80084dc:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 80084de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <lfs_fs_demove+0xb4>
        return err;
 80084e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e6:	e000      	b.n	80084ea <lfs_fs_demove+0xb6>
    }

    return 0;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3740      	adds	r7, #64	; 0x40
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bdb0      	pop	{r4, r5, r7, pc}
 80084f2:	bf00      	nop
 80084f4:	0800a5cc 	.word	0x0800a5cc
 80084f8:	0800a4c8 	.word	0x0800a4c8
 80084fc:	0800ac48 	.word	0x0800ac48

08008500 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8008500:	b5b0      	push	{r4, r5, r7, lr}
 8008502:	b0b2      	sub	sp, #200	; 0xc8
 8008504:	af04      	add	r7, sp, #16
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3330      	adds	r3, #48	; 0x30
 8008510:	4618      	mov	r0, r3
 8008512:	f7fa fe06 	bl	8003122 <lfs_gstate_hasorphans>
 8008516:	4603      	mov	r3, r0
 8008518:	f083 0301 	eor.w	r3, r3, #1
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <lfs_fs_deorphan+0x26>
        return 0;
 8008522:	2300      	movs	r3, #0
 8008524:	e17c      	b.n	8008820 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800852c:	f107 030c 	add.w	r3, r7, #12
 8008530:	2220      	movs	r2, #32
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f000 ff9b 	bl	8009470 <memset>
 800853a:	2301      	movs	r3, #1
 800853c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008540:	2301      	movs	r3, #1
 8008542:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8008544:	e148      	b.n	80087d8 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8008546:	f107 030c 	add.w	r3, r7, #12
 800854a:	f103 0218 	add.w	r2, r3, #24
 800854e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7fc f9fb 	bl	8004950 <lfs_dir_fetch>
 800855a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 800855e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <lfs_fs_deorphan+0x6c>
                return err;
 8008566:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800856a:	e159      	b.n	8008820 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800856c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008570:	f083 0301 	eor.w	r3, r3, #1
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 8124 	beq.w	80087c4 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800857c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008580:	f107 030c 	add.w	r3, r7, #12
 8008584:	3318      	adds	r3, #24
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff fe89 	bl	80082a0 <lfs_fs_parent>
 800858e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8008592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008596:	2b00      	cmp	r3, #0
 8008598:	da07      	bge.n	80085aa <lfs_fs_deorphan+0xaa>
 800859a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800859e:	f113 0f02 	cmn.w	r3, #2
 80085a2:	d002      	beq.n	80085aa <lfs_fs_deorphan+0xaa>
                    return tag;
 80085a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085a8:	e13a      	b.n	8008820 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 80085aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085ae:	f113 0f02 	cmn.w	r3, #2
 80085b2:	d157      	bne.n	8008664 <lfs_fs_deorphan+0x164>
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d054      	beq.n	8008664 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80085ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	499a      	ldr	r1, [pc, #616]	; (8008828 <lfs_fs_deorphan+0x328>)
 80085c0:	9101      	str	r1, [sp, #4]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	4613      	mov	r3, r2
 80085c6:	f241 12a1 	movw	r2, #4513	; 0x11a1
 80085ca:	4998      	ldr	r1, [pc, #608]	; (800882c <lfs_fs_deorphan+0x32c>)
 80085cc:	4898      	ldr	r0, [pc, #608]	; (8008830 <lfs_fs_deorphan+0x330>)
 80085ce:	f001 fb25 	bl	8009c1c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80085d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fc f9d2 	bl	8004988 <lfs_dir_getgstate>
 80085e4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 80085e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <lfs_fs_deorphan+0xf6>
                        return err;
 80085f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085f4:	e114      	b.n	8008820 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 80085f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085fa:	3318      	adds	r3, #24
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fa fca8 	bl	8002f52 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8008602:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008606:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800860a:	051a      	lsls	r2, r3, #20
 800860c:	4b89      	ldr	r3, [pc, #548]	; (8008834 <lfs_fs_deorphan+0x334>)
 800860e:	4313      	orrs	r3, r2
 8008610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008618:	3318      	adds	r3, #24
 800861a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800861e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8008622:	f107 010c 	add.w	r1, r7, #12
 8008626:	2301      	movs	r3, #1
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7fd fbf5 	bl	8005e18 <lfs_dir_orphaningcommit>
 800862e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8008632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008636:	3318      	adds	r3, #24
 8008638:	4618      	mov	r0, r3
 800863a:	f7fa fc70 	bl	8002f1e <lfs_pair_fromle32>
                    if (state < 0) {
 800863e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008642:	2b00      	cmp	r3, #0
 8008644:	da02      	bge.n	800864c <lfs_fs_deorphan+0x14c>
                        return state;
 8008646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 800864a:	e0e9      	b.n	8008820 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 800864c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008650:	3301      	adds	r3, #1
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8008658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800865c:	2b03      	cmp	r3, #3
 800865e:	f040 80af 	bne.w	80087c0 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 8008662:	e763      	b.n	800852c <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8008664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008668:	f113 0f02 	cmn.w	r3, #2
 800866c:	f000 80aa 	beq.w	80087c4 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8008670:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008674:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008678:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	4613      	mov	r3, r2
 8008680:	4a6d      	ldr	r2, [pc, #436]	; (8008838 <lfs_fs_deorphan+0x338>)
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7fb f8c4 	bl	8003810 <lfs_dir_get>
 8008688:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800868c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008690:	2b00      	cmp	r3, #0
 8008692:	da02      	bge.n	800869a <lfs_fs_deorphan+0x19a>
                        return state;
 8008694:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008698:	e0c2      	b.n	8008820 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 800869a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fa fc3d 	bl	8002f1e <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 80086a4:	f107 030c 	add.w	r3, r7, #12
 80086a8:	f103 0218 	add.w	r2, r3, #24
 80086ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fa fc06 	bl	8002ec4 <lfs_pair_sync>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f083 0301 	eor.w	r3, r3, #1
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d07f      	beq.n	80087c4 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80086c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80086cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086d0:	4c55      	ldr	r4, [pc, #340]	; (8008828 <lfs_fs_deorphan+0x328>)
 80086d2:	9403      	str	r4, [sp, #12]
 80086d4:	9102      	str	r1, [sp, #8]
 80086d6:	9201      	str	r2, [sp, #4]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	4603      	mov	r3, r0
 80086dc:	f241 12ca 	movw	r2, #4554	; 0x11ca
 80086e0:	4952      	ldr	r1, [pc, #328]	; (800882c <lfs_fs_deorphan+0x32c>)
 80086e2:	4856      	ldr	r0, [pc, #344]	; (800883c <lfs_fs_deorphan+0x33c>)
 80086e4:	f001 fa9a 	bl	8009c1c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80086e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80086ec:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3330      	adds	r3, #48	; 0x30
 80086f4:	f107 020c 	add.w	r2, r7, #12
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fa fd46 	bl	800318c <lfs_gstate_hasmovehere>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01c      	beq.n	8008740 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870a:	4618      	mov	r0, r3
 800870c:	f7fa fc96 	bl	800303c <lfs_tag_id>
 8008710:	4603      	mov	r3, r0
 8008712:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 800871e:	4842      	ldr	r0, [pc, #264]	; (8008828 <lfs_fs_deorphan+0x328>)
 8008720:	9002      	str	r0, [sp, #8]
 8008722:	9201      	str	r2, [sp, #4]
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	460b      	mov	r3, r1
 8008728:	f241 12d5 	movw	r2, #4565	; 0x11d5
 800872c:	493f      	ldr	r1, [pc, #252]	; (800882c <lfs_fs_deorphan+0x32c>)
 800872e:	4844      	ldr	r0, [pc, #272]	; (8008840 <lfs_fs_deorphan+0x340>)
 8008730:	f001 fa74 	bl	8009c1c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8008734:	2200      	movs	r2, #0
 8008736:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff fe40 	bl	80083c0 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8008740:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008744:	4618      	mov	r0, r3
 8008746:	f7fa fc04 	bl	8002f52 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800874a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800874e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008752:	4293      	cmp	r3, r2
 8008754:	d007      	beq.n	8008766 <lfs_fs_deorphan+0x266>
 8008756:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800875a:	029b      	lsls	r3, r3, #10
 800875c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8008760:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8008764:	e000      	b.n	8008768 <lfs_fs_deorphan+0x268>
 8008766:	2300      	movs	r3, #0
 8008768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800876a:	2300      	movs	r3, #0
 800876c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008770:	4b34      	ldr	r3, [pc, #208]	; (8008844 <lfs_fs_deorphan+0x344>)
 8008772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008776:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800877a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800877e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008782:	f107 010c 	add.w	r1, r7, #12
 8008786:	2302      	movs	r3, #2
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7fd fb45 	bl	8005e18 <lfs_dir_orphaningcommit>
 800878e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8008792:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008796:	4618      	mov	r0, r3
 8008798:	f7fa fbc1 	bl	8002f1e <lfs_pair_fromle32>
                        if (state < 0) {
 800879c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	da02      	bge.n	80087aa <lfs_fs_deorphan+0x2aa>
                            return state;
 80087a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 80087a8:	e03a      	b.n	8008820 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 80087aa:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80087ae:	3301      	adds	r3, #1
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80087b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d10c      	bne.n	80087d8 <lfs_fs_deorphan+0x2d8>
 80087be:	e6b5      	b.n	800852c <lfs_fs_deorphan+0x2c>
                    continue;
 80087c0:	bf00      	nop
 80087c2:	e009      	b.n	80087d8 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 80087c4:	f107 040c 	add.w	r4, r7, #12
 80087c8:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80087cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 80087d8:	f107 030c 	add.w	r3, r7, #12
 80087dc:	3318      	adds	r3, #24
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fa fb2b 	bl	8002e3a <lfs_pair_isnull>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f083 0301 	eor.w	r3, r3, #1
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f47f aeaa 	bne.w	8008546 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3330      	adds	r3, #48	; 0x30
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fa fca6 	bl	8003148 <lfs_gstate_getorphans>
 80087fc:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 80087fe:	461a      	mov	r2, r3
 8008800:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8008804:	4619      	mov	r1, r3
 8008806:	4610      	mov	r0, r2
 8008808:	f7f9 ff02 	bl	8002610 <lfs_min>
 800880c:	4603      	mov	r3, r0
 800880e:	b2db      	uxtb	r3, r3
 8008810:	425b      	negs	r3, r3
 8008812:	b2db      	uxtb	r3, r3
 8008814:	b25b      	sxtb	r3, r3
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff fd97 	bl	800834c <lfs_fs_preporphans>
 800881e:	4603      	mov	r3, r0
            found));
}
 8008820:	4618      	mov	r0, r3
 8008822:	37b8      	adds	r7, #184	; 0xb8
 8008824:	46bd      	mov	sp, r7
 8008826:	bdb0      	pop	{r4, r5, r7, pc}
 8008828:	0800a5cc 	.word	0x0800a5cc
 800882c:	0800a4c8 	.word	0x0800a4c8
 8008830:	0800ac7c 	.word	0x0800ac7c
 8008834:	000ffc08 	.word	0x000ffc08
 8008838:	7ffffc00 	.word	0x7ffffc00
 800883c:	0800acac 	.word	0x0800acac
 8008840:	0800acf0 	.word	0x0800acf0
 8008844:	600ffc08 	.word	0x600ffc08

08008848 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff fdef 	bl	8008434 <lfs_fs_demove>
 8008856:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <lfs_fs_forceconsistency+0x1a>
        return err;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	e00a      	b.n	8008878 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 8008862:	2101      	movs	r1, #1
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fe4b 	bl	8008500 <lfs_fs_deorphan>
 800886a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <lfs_fs_forceconsistency+0x2e>
        return err;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	e000      	b.n	8008878 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	601a      	str	r2, [r3, #0]
    return 0;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 80088b4:	f107 0208 	add.w	r2, r7, #8
 80088b8:	2300      	movs	r3, #0
 80088ba:	4907      	ldr	r1, [pc, #28]	; (80088d8 <lfs_fs_rawsize+0x30>)
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff fb41 	bl	8007f44 <lfs_fs_rawtraverse>
 80088c2:	60f8      	str	r0, [r7, #12]
    if (err) {
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <lfs_fs_rawsize+0x26>
        return err;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	e000      	b.n	80088d0 <lfs_fs_rawsize+0x28>
    }

    return size;
 80088ce:	68bb      	ldr	r3, [r7, #8]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	08008881 	.word	0x08008881

080088dc <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <lfs_format+0x18>
        return err;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	e005      	b.n	8008900 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff f8cc 	bl	8007a94 <lfs_rawformat>
 80088fc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80088fe:	68fb      	ldr	r3, [r7, #12]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <lfs_mount+0x18>
        return err;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	e005      	b.n	800892c <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff f956 	bl	8007bd4 <lfs_rawmount>
 8008928:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800892a:	68fb      	ldr	r3, [r7, #12]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]
    if (err) {
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <lfs_unmount+0x16>
        return err;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	e004      	b.n	8008954 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_rawunmount(lfs);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff faee 	bl	8007f2c <lfs_rawunmount>
 8008950:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008952:	68fb      	ldr	r3, [r7, #12]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800896a:	2300      	movs	r3, #0
 800896c:	617b      	str	r3, [r7, #20]
    if (err) {
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <lfs_file_open+0x1c>
        return err;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	e01a      	b.n	80089ae <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	4618      	mov	r0, r3
 8008980:	f7fa fd04 	bl	800338c <lfs_mlist_isopen>
 8008984:	4603      	mov	r3, r0
 8008986:	f083 0301 	eor.w	r3, r3, #1
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <lfs_file_open+0x42>
 8008990:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <lfs_file_open+0x5c>)
 8008992:	4a0a      	ldr	r2, [pc, #40]	; (80089bc <lfs_file_open+0x60>)
 8008994:	f241 5166 	movw	r1, #5478	; 0x1566
 8008998:	4809      	ldr	r0, [pc, #36]	; (80089c0 <lfs_file_open+0x64>)
 800899a:	f000 fce1 	bl	8009360 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7fe f94d 	bl	8006c44 <lfs_file_rawopen>
 80089aa:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80089ac:	697b      	ldr	r3, [r7, #20]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	0800ad38 	.word	0x0800ad38
 80089bc:	0800af10 	.word	0x0800af10
 80089c0:	0800a4c8 	.word	0x0800a4c8

080089c4 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <lfs_file_close+0x18>
        return err;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	e015      	b.n	8008a08 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fa fcd2 	bl	800338c <lfs_mlist_isopen>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d106      	bne.n	80089fc <lfs_file_close+0x38>
 80089ee:	4b08      	ldr	r3, [pc, #32]	; (8008a10 <lfs_file_close+0x4c>)
 80089f0:	4a08      	ldr	r2, [pc, #32]	; (8008a14 <lfs_file_close+0x50>)
 80089f2:	f241 518a 	movw	r1, #5514	; 0x158a
 80089f6:	4808      	ldr	r0, [pc, #32]	; (8008a18 <lfs_file_close+0x54>)
 80089f8:	f000 fcb2 	bl	8009360 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fe f938 	bl	8006c74 <lfs_file_rawclose>
 8008a04:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8008a06:	68fb      	ldr	r3, [r7, #12]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	0800ad70 	.word	0x0800ad70
 8008a14:	0800af20 	.word	0x0800af20
 8008a18:	0800a4c8 	.word	0x0800a4c8

08008a1c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
    if (err) {
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <lfs_file_read+0x1c>
        return err;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	e017      	b.n	8008a68 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fa fca4 	bl	800338c <lfs_mlist_isopen>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d106      	bne.n	8008a58 <lfs_file_read+0x3c>
 8008a4a:	4b09      	ldr	r3, [pc, #36]	; (8008a70 <lfs_file_read+0x54>)
 8008a4c:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <lfs_file_read+0x58>)
 8008a4e:	f241 51ac 	movw	r1, #5548	; 0x15ac
 8008a52:	4809      	ldr	r0, [pc, #36]	; (8008a78 <lfs_file_read+0x5c>)
 8008a54:	f000 fc84 	bl	8009360 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f7fe fc54 	bl	800730c <lfs_file_rawread>
 8008a64:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008a66:	693b      	ldr	r3, [r7, #16]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	0800ad70 	.word	0x0800ad70
 8008a74:	0800af30 	.word	0x0800af30
 8008a78:	0800a4c8 	.word	0x0800a4c8

08008a7c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]
    if (err) {
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <lfs_file_write+0x1c>
        return err;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	e017      	b.n	8008ac8 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fa fc74 	bl	800338c <lfs_mlist_isopen>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d106      	bne.n	8008ab8 <lfs_file_write+0x3c>
 8008aaa:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <lfs_file_write+0x54>)
 8008aac:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <lfs_file_write+0x58>)
 8008aae:	f241 51be 	movw	r1, #5566	; 0x15be
 8008ab2:	4809      	ldr	r0, [pc, #36]	; (8008ad8 <lfs_file_write+0x5c>)
 8008ab4:	f000 fc54 	bl	8009360 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7fe fd82 	bl	80075c8 <lfs_file_rawwrite>
 8008ac4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8008ac6:	693b      	ldr	r3, [r7, #16]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	0800ad70 	.word	0x0800ad70
 8008ad4:	0800af40 	.word	0x0800af40
 8008ad8:	0800a4c8 	.word	0x0800a4c8

08008adc <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e024      	b.n	8008b3c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	091a      	lsrs	r2, r3, #4
 8008af6:	6939      	ldr	r1, [r7, #16]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	440b      	add	r3, r1
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	4619      	mov	r1, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	404b      	eors	r3, r1
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	4912      	ldr	r1, [pc, #72]	; (8008b54 <lfs_crc+0x78>)
 8008b0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b0e:	4053      	eors	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	091a      	lsrs	r2, r3, #4
 8008b16:	6939      	ldr	r1, [r7, #16]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	440b      	add	r3, r1
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	091b      	lsrs	r3, r3, #4
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	4619      	mov	r1, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	404b      	eors	r3, r1
 8008b28:	f003 030f 	and.w	r3, r3, #15
 8008b2c:	4909      	ldr	r1, [pc, #36]	; (8008b54 <lfs_crc+0x78>)
 8008b2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b32:	4053      	eors	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d3d6      	bcc.n	8008af2 <lfs_crc+0x16>
    }

    return crc;
 8008b44:	68fb      	ldr	r3, [r7, #12]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	0800af50 	.word	0x0800af50

08008b58 <_ZN6W25Q64C1EP12GPIO_TypeDeft>:
constexpr uint8_t CMD_READ_DATA          = 0x03;
constexpr uint8_t CMD_READ_JDEC          = 0x9F;
constexpr uint8_t STATUS_BUSY_MASK       = 0x01;

/* Constructor */
W25Q64::W25Q64(GPIO_TypeDef *cs_gpio_port, uint16_t cs_pin)
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80fb      	strh	r3, [r7, #6]
    : csGPIOPort(cs_gpio_port), csPin(cs_pin), mySPIPort(SPI::getInstance())
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	809a      	strh	r2, [r3, #4]
 8008b72:	f000 fa8f 	bl	8009094 <_ZN3SPI11getInstanceEv>
 8008b76:	4602      	mov	r2, r0
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	609a      	str	r2, [r3, #8]
{

}
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <_ZN6W25Q644initEv>:

/* Public methods */
HAL_StatusTypeDef W25Q64::init()
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    // Init GPIO
    initGPIOOutput(this->csPin, this->csGPIOPort);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	889a      	ldrh	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4619      	mov	r1, r3
 8008b98:	4610      	mov	r0, r2
 8008b9a:	f000 f919 	bl	8008dd0 <_Z14initGPIOOutputtP12GPIO_TypeDef>
    cs_deselect();
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f905 	bl	8008dae <_ZN6W25Q6411cs_deselectEv>

    // Check if the SPI peripheral has already been initialized
    if (SPIStates::NotInitialized == mySPIPort.state)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d108      	bne.n	8008bc0 <_ZN6W25Q644initEv+0x3a>
    {
        status = mySPIPort.init();
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fa96 	bl	80090e4 <_ZN3SPI4initEv>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73fb      	strb	r3, [r7, #15]
        return status;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	e000      	b.n	8008bc2 <_ZN6W25Q644initEv+0x3c>
    }

    return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <_ZN6W25Q6412write_enableEv>:

/**
 * @brief Enable write operations to the W25Q64 flash memory.
 */
void W25Q64::write_enable()
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
    cs_select();
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8d9 	bl	8008d8c <_ZN6W25Q649cs_selectEv>
    mySPIPort.transmit((uint8_t *) &CMD_WRITE_ENABLE, 1);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	2201      	movs	r2, #1
 8008be0:	4905      	ldr	r1, [pc, #20]	; (8008bf8 <_ZN6W25Q6412write_enableEv+0x2c>)
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fac8 	bl	8009178 <_ZN3SPI8transmitEPht>
    cs_deselect();
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f8e0 	bl	8008dae <_ZN6W25Q6411cs_deselectEv>
}
 8008bee:	bf00      	nop
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	0800af90 	.word	0x0800af90

08008bfc <_ZN6W25Q6420read_status_registerEv>:
 * @brief Read the status register of the W25Q64 flash memory.
 *
 * @return The value of the status register.
 */
uint8_t W25Q64::read_status_register()
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
    uint8_t status;
    cs_select();
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f8c1 	bl	8008d8c <_ZN6W25Q649cs_selectEv>
    mySPIPort.transmit((uint8_t *) &CMD_READ_STATUS_REG, 1);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4909      	ldr	r1, [pc, #36]	; (8008c38 <_ZN6W25Q6420read_status_registerEv+0x3c>)
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fab0 	bl	8009178 <_ZN3SPI8transmitEPht>
    mySPIPort.receive(&status, 1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f107 010f 	add.w	r1, r7, #15
 8008c20:	2201      	movs	r2, #1
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fabc 	bl	80091a0 <_ZN3SPI7receiveEPht>
    cs_deselect();
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f8c0 	bl	8008dae <_ZN6W25Q6411cs_deselectEv>
    return status;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	0800af91 	.word	0x0800af91

08008c3c <_ZN6W25Q6411block_eraseEm>:
 * @brief Erase a block (64KB) of the W25Q64 flash memory.
 *
 * @param addr The starting address of the block to erase.
 */
void W25Q64::block_erase(uint32_t addr)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
    write_enable();
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff ffc0 	bl	8008bcc <_ZN6W25Q6412write_enableEv>
    cs_select();
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f89d 	bl	8008d8c <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_BLOCK_ERASE,
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	23d8      	movs	r3, #216	; 0xd8
 8008c58:	733b      	strb	r3, [r7, #12]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	737b      	strb	r3, [r7, #13]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	73bb      	strb	r3, [r7, #14]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	73fb      	strb	r3, [r7, #15]
    mySPIPort.transmit(cmd, 4);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f107 010c 	add.w	r1, r7, #12
 8008c78:	2204      	movs	r2, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fa7c 	bl	8009178 <_ZN3SPI8transmitEPht>
    cs_deselect();
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f894 	bl	8008dae <_ZN6W25Q6411cs_deselectEv>
    wait_until_ready();
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f86d 	bl	8008d66 <_ZN6W25Q6416wait_until_readyEv>
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <_ZN6W25Q6412page_programEmPht>:
 * @param addr The starting address of the page to write.
 * @param data A pointer to the buffer containing the data to be written.
 * @param size The size of the data buffer (must be 256 bytes or less).
 */
void W25Q64::page_program(uint32_t addr, uint8_t *data, uint16_t size)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	807b      	strh	r3, [r7, #2]
    if (size > 256) return; // Ensure that the data size is within the page limit
 8008ca2:	887b      	ldrh	r3, [r7, #2]
 8008ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca8:	d82a      	bhi.n	8008d00 <_ZN6W25Q6412page_programEmPht+0x6c>

    write_enable();
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff ff8e 	bl	8008bcc <_ZN6W25Q6412write_enableEv>
    cs_select();
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 f86b 	bl	8008d8c <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_PAGE_PROGRAM,
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	2302      	movs	r3, #2
 8008cbc:	753b      	strb	r3, [r7, #20]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	757b      	strb	r3, [r7, #21]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	75bb      	strb	r3, [r7, #22]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	75fb      	strb	r3, [r7, #23]
    mySPIPort.transmit(cmd, 4);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f107 0114 	add.w	r1, r7, #20
 8008cdc:	2204      	movs	r2, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fa4a 	bl	8009178 <_ZN3SPI8transmitEPht>
    mySPIPort.transmit(data, size);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	887a      	ldrh	r2, [r7, #2]
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fa43 	bl	8009178 <_ZN3SPI8transmitEPht>
    cs_deselect();
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 f85b 	bl	8008dae <_ZN6W25Q6411cs_deselectEv>
    wait_until_ready();
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f834 	bl	8008d66 <_ZN6W25Q6416wait_until_readyEv>
 8008cfe:	e000      	b.n	8008d02 <_ZN6W25Q6412page_programEmPht+0x6e>
    if (size > 256) return; // Ensure that the data size is within the page limit
 8008d00:	bf00      	nop
}
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <_ZN6W25Q649read_dataEmPht>:
 * @param addr The starting address to read from.
 * @param data A pointer to the buffer where the read data will be stored.
 * @param size The number of bytes to read.
 */
void W25Q64::read_data(uint32_t addr, uint8_t *data, uint16_t size)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
 8008d14:	807b      	strh	r3, [r7, #2]
    cs_select();
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f838 	bl	8008d8c <_ZN6W25Q649cs_selectEv>
    uint8_t cmd[] = {CMD_READ_DATA,
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	2303      	movs	r3, #3
 8008d22:	753b      	strb	r3, [r7, #20]
                     static_cast<uint8_t>((addr >> 16) & 0xFF),
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	0c1b      	lsrs	r3, r3, #16
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
                     static_cast<uint8_t>(addr & 0xFF)};
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	757b      	strb	r3, [r7, #21]
                     static_cast<uint8_t>((addr >> 8) & 0xFF),
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	0a1b      	lsrs	r3, r3, #8
                     static_cast<uint8_t>(addr & 0xFF)};
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	75bb      	strb	r3, [r7, #22]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	75fb      	strb	r3, [r7, #23]
    mySPIPort.transmit(cmd, 4);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f107 0114 	add.w	r1, r7, #20
 8008d42:	2204      	movs	r2, #4
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fa17 	bl	8009178 <_ZN3SPI8transmitEPht>
    mySPIPort.receive(data, size);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	887a      	ldrh	r2, [r7, #2]
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fa24 	bl	80091a0 <_ZN3SPI7receiveEPht>
    cs_deselect();
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f828 	bl	8008dae <_ZN6W25Q6411cs_deselectEv>
}
 8008d5e:	bf00      	nop
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <_ZN6W25Q6416wait_until_readyEv>:
 * @brief Wait for the W25Q64 flash memory to become ready for the next operation.
 *
 * This method polls the status register and waits until the busy bit is cleared.
 */
void W25Q64::wait_until_ready()
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
    uint8_t status;
    do
    {
        status = read_status_register();
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff ff44 	bl	8008bfc <_ZN6W25Q6420read_status_registerEv>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
    } while (status & STATUS_BUSY_MASK); // Wait until the busy bit (bit 0) is cleared
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d000      	beq.n	8008d84 <_ZN6W25Q6416wait_until_readyEv+0x1e>
    do
 8008d82:	e7f4      	b.n	8008d6e <_ZN6W25Q6416wait_until_readyEv+0x8>
}
 8008d84:	bf00      	nop
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <_ZN6W25Q649cs_selectEv>:

/* Private methods */
void W25Q64::cs_select()
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
    mySPIPort.csLow(this->csPin, this->csGPIOPort);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6898      	ldr	r0, [r3, #8]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	8899      	ldrh	r1, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	f000 fa22 	bl	80091ea <_ZN3SPI5csLowEtP12GPIO_TypeDef>
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <_ZN6W25Q6411cs_deselectEv>:

void W25Q64::cs_deselect()
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
    mySPIPort.csHigh(this->csPin, this->csGPIOPort);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6898      	ldr	r0, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	8899      	ldrh	r1, [r3, #4]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f000 fa00 	bl	80091c8 <_ZN3SPI6csHighEtP12GPIO_TypeDef>
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_Z14initGPIOOutputtP12GPIO_TypeDef>:
 *
 * @param pin The pin number to be initialized.
 * @param port The GPIO port to which the pin belongs.
 */
void initGPIOOutput(uint16_t pin, GPIO_TypeDef *port)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6039      	str	r1, [r7, #0]
 8008dda:	80fb      	strh	r3, [r7, #6]
    // Assert that port is not NULL
    //assert(port != NULL);

    // Configure CS GPIO
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ddc:	f107 0314 	add.w	r3, r7, #20
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	605a      	str	r2, [r3, #4]
 8008de6:	609a      	str	r2, [r3, #8]
 8008de8:	60da      	str	r2, [r3, #12]
 8008dea:	611a      	str	r2, [r3, #16]

    if (port == GPIOF)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	4a1f      	ldr	r2, [pc, #124]	; (8008e6c <_Z14initGPIOOutputtP12GPIO_TypeDef+0x9c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d10e      	bne.n	8008e12 <_Z14initGPIOOutputtP12GPIO_TypeDef+0x42>
    {
        __HAL_RCC_GPIOF_CLK_ENABLE();
 8008df4:	2300      	movs	r3, #0
 8008df6:	613b      	str	r3, [r7, #16]
 8008df8:	4b1d      	ldr	r3, [pc, #116]	; (8008e70 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xa0>)
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfc:	4a1c      	ldr	r2, [pc, #112]	; (8008e70 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xa0>)
 8008dfe:	f043 0320 	orr.w	r3, r3, #32
 8008e02:	6313      	str	r3, [r2, #48]	; 0x30
 8008e04:	4b1a      	ldr	r3, [pc, #104]	; (8008e70 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xa0>)
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	f003 0320 	and.w	r3, r3, #32
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	e013      	b.n	8008e3a <_Z14initGPIOOutputtP12GPIO_TypeDef+0x6a>
    }
    else if (port == GPIOE)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	4a17      	ldr	r2, [pc, #92]	; (8008e74 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xa4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d10e      	bne.n	8008e38 <_Z14initGPIOOutputtP12GPIO_TypeDef+0x68>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xa0>)
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	4a13      	ldr	r2, [pc, #76]	; (8008e70 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xa0>)
 8008e24:	f043 0310 	orr.w	r3, r3, #16
 8008e28:	6313      	str	r3, [r2, #48]	; 0x30
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <_Z14initGPIOOutputtP12GPIO_TypeDef+0xa0>)
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	e000      	b.n	8008e3a <_Z14initGPIOOutputtP12GPIO_TypeDef+0x6a>
    // Add other cases for different GPIO ports as needed

    else
    {
        // Error: Invalid GPIO port
    	while(1);
 8008e38:	e7fe      	b.n	8008e38 <_Z14initGPIOOutputtP12GPIO_TypeDef+0x68>
        //assert(0);
    }

    GPIO_InitStruct.Pin = pin;
 8008e3a:	88fb      	ldrh	r3, [r7, #6]
 8008e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e46:	2300      	movs	r3, #0
 8008e48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(port, &GPIO_InitStruct);
 8008e4a:	f107 0314 	add.w	r3, r7, #20
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6838      	ldr	r0, [r7, #0]
 8008e52:	f7f7 fffb 	bl	8000e4c <HAL_GPIO_Init>

    // Set the pin to a default state
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8008e56:	88fb      	ldrh	r3, [r7, #6]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6838      	ldr	r0, [r7, #0]
 8008e5e:	f7f8 f9a1 	bl	80011a4 <HAL_GPIO_WritePin>
}
 8008e62:	bf00      	nop
 8008e64:	3728      	adds	r7, #40	; 0x28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	40021400 	.word	0x40021400
 8008e70:	40023800 	.word	0x40023800
 8008e74:	40021000 	.word	0x40021000

08008e78 <_Z10flash_initv>:
 * @brief Initialize the W25Q64 flash memory for filesystem operations.
 *
 * @return 1 if initialization is successful, otherwise it will loop indefinitely.
 */
int flash_init()
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
    if (HAL_OK != myFlash.init())
 8008e7c:	4807      	ldr	r0, [pc, #28]	; (8008e9c <_Z10flash_initv+0x24>)
 8008e7e:	f7ff fe82 	bl	8008b86 <_ZN6W25Q644initEv>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bf14      	ite	ne
 8008e88:	2301      	movne	r3, #1
 8008e8a:	2300      	moveq	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d000      	beq.n	8008e94 <_Z10flash_initv+0x1c>
    {
        while(1);
 8008e92:	e7fe      	b.n	8008e92 <_Z10flash_initv+0x1a>
    }

    return 1;
 8008e94:	2301      	movs	r3, #1
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000094 	.word	0x20000094

08008ea0 <_Z11w25q64_readPK10lfs_configmmPvm>:
 * @param buffer Pointer to the buffer where the read data will be stored.
 * @param size The number of bytes to read.
 * @return Always returns 0.
 */
int w25q64_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	fb02 f303 	mul.w	r3, r2, r3
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	4413      	add	r3, r2
 8008ebc:	617b      	str	r3, [r7, #20]
    myFlash.read_data(addr, static_cast<uint8_t *>(buffer), size);
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	6979      	ldr	r1, [r7, #20]
 8008ec6:	4804      	ldr	r0, [pc, #16]	; (8008ed8 <_Z11w25q64_readPK10lfs_configmmPvm+0x38>)
 8008ec8:	f7ff ff1e 	bl	8008d08 <_ZN6W25Q649read_dataEmPht>
    return 0;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20000094 	.word	0x20000094

08008edc <_Z11w25q64_progPK10lfs_configmmPKvm>:
 * @param buffer Pointer to the buffer containing the data to be written.
 * @param size The number of bytes to write.
 * @return Always returns 0.
 */
int w25q64_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
    uint32_t addr = block * c->block_size + off;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	fb02 f303 	mul.w	r3, r2, r3
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	617b      	str	r3, [r7, #20]
    myFlash.page_program(addr, const_cast<uint8_t *>(static_cast<const uint8_t *>(buffer)), size);
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	4804      	ldr	r0, [pc, #16]	; (8008f14 <_Z11w25q64_progPK10lfs_configmmPKvm+0x38>)
 8008f04:	f7ff fec6 	bl	8008c94 <_ZN6W25Q6412page_programEmPht>
    return 0;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000094 	.word	0x20000094

08008f18 <_Z12w25q64_erasePK10lfs_configm>:
 * @param c Pointer to the LittleFS configuration.
 * @param block The block number to erase.
 * @return Always returns 0.
 */
int w25q64_erase(const struct lfs_config *c, lfs_block_t block)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
    uint32_t addr = block * c->block_size;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	69da      	ldr	r2, [r3, #28]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	fb02 f303 	mul.w	r3, r2, r3
 8008f2c:	60fb      	str	r3, [r7, #12]
    myFlash.block_erase(addr);
 8008f2e:	68f9      	ldr	r1, [r7, #12]
 8008f30:	4803      	ldr	r0, [pc, #12]	; (8008f40 <_Z12w25q64_erasePK10lfs_configm+0x28>)
 8008f32:	f7ff fe83 	bl	8008c3c <_ZN6W25Q6411block_eraseEm>
    return 0;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20000094 	.word	0x20000094

08008f44 <_Z11w25q64_syncPK10lfs_config>:
 *
 * @param c Pointer to the LittleFS configuration.
 * @return Always returns 0.
 */
int w25q64_sync(const struct lfs_config *c)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
    // Nothing to do since we're not using any caching or buffering
    return 0;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
	...

08008f5c <_Z41__static_initialization_and_destruction_0ii>:
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d10a      	bne.n	8008f82 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d105      	bne.n	8008f82 <_Z41__static_initialization_and_destruction_0ii+0x26>
W25Q64 myFlash(GPIOF, GPIO_PIN_13); // F13 is Pin D7 on the nucleo board
 8008f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008f7a:	4904      	ldr	r1, [pc, #16]	; (8008f8c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8008f7c:	4804      	ldr	r0, [pc, #16]	; (8008f90 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8008f7e:	f7ff fdeb 	bl	8008b58 <_ZN6W25Q64C1EP12GPIO_TypeDeft>
}
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	40021400 	.word	0x40021400
 8008f90:	20000094 	.word	0x20000094

08008f94 <_GLOBAL__sub_I_myFlash>:
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	f7ff ffdd 	bl	8008f5c <_Z41__static_initialization_and_destruction_0ii>
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_SPI_MspInit>:
 *
 * @param hspi: SPI handle pointer.
 * @retval None.
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08a      	sub	sp, #40	; 0x28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fac:	f107 0314 	add.w	r3, r7, #20
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	605a      	str	r2, [r3, #4]
 8008fb6:	609a      	str	r2, [r3, #8]
 8008fb8:	60da      	str	r2, [r3, #12]
 8008fba:	611a      	str	r2, [r3, #16]
    if(hspi->Instance == SPI1)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a28      	ldr	r2, [pc, #160]	; (8009064 <HAL_SPI_MspInit+0xc0>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d149      	bne.n	800905a <HAL_SPI_MspInit+0xb6>
    {
        /* USER CODE BEGIN SPI1_MspInit 0 */

        /* USER CODE END SPI1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_SPI1_CLK_ENABLE();
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	613b      	str	r3, [r7, #16]
 8008fca:	4b27      	ldr	r3, [pc, #156]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8008fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fce:	4a26      	ldr	r2, [pc, #152]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8008fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8008fd6:	4b24      	ldr	r3, [pc, #144]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	4b20      	ldr	r3, [pc, #128]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	4a1f      	ldr	r2, [pc, #124]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8008fec:	f043 0301 	orr.w	r3, r3, #1
 8008ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ff2:	4b1d      	ldr	r3, [pc, #116]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ffe:	2300      	movs	r3, #0
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	4b19      	ldr	r3, [pc, #100]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	4a18      	ldr	r2, [pc, #96]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8009008:	f043 0302 	orr.w	r3, r3, #2
 800900c:	6313      	str	r3, [r2, #48]	; 0x30
 800900e:	4b16      	ldr	r3, [pc, #88]	; (8009068 <HAL_SPI_MspInit+0xc4>)
 8009010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	60bb      	str	r3, [r7, #8]
 8009018:	68bb      	ldr	r3, [r7, #8]
        /**SPI1 GPIO Configuration
        PA5     ------> SPI1_SCK
        PA6     ------> SPI1_MISO
        PB5     ------> SPI1_MOSI
        */
        GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800901a:	2360      	movs	r3, #96	; 0x60
 800901c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800901e:	2302      	movs	r3, #2
 8009020:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009022:	2300      	movs	r3, #0
 8009024:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009026:	2303      	movs	r3, #3
 8009028:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800902a:	2305      	movs	r3, #5
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800902e:	f107 0314 	add.w	r3, r7, #20
 8009032:	4619      	mov	r1, r3
 8009034:	480d      	ldr	r0, [pc, #52]	; (800906c <HAL_SPI_MspInit+0xc8>)
 8009036:	f7f7 ff09 	bl	8000e4c <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_5;
 800903a:	2320      	movs	r3, #32
 800903c:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800903e:	2302      	movs	r3, #2
 8009040:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009042:	2300      	movs	r3, #0
 8009044:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009046:	2303      	movs	r3, #3
 8009048:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800904a:	2305      	movs	r3, #5
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800904e:	f107 0314 	add.w	r3, r7, #20
 8009052:	4619      	mov	r1, r3
 8009054:	4806      	ldr	r0, [pc, #24]	; (8009070 <HAL_SPI_MspInit+0xcc>)
 8009056:	f7f7 fef9 	bl	8000e4c <HAL_GPIO_Init>
    }
}
 800905a:	bf00      	nop
 800905c:	3728      	adds	r7, #40	; 0x28
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40013000 	.word	0x40013000
 8009068:	40023800 	.word	0x40023800
 800906c:	40020000 	.word	0x40020000
 8009070:	40020400 	.word	0x40020400

08009074 <_ZN3SPIC1Ev>:
    Error
};

/* Class */

class SPI {
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a04      	ldr	r2, [pc, #16]	; (8009090 <_ZN3SPIC1Ev+0x1c>)
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	200000a0 	.word	0x200000a0

08009094 <_ZN3SPI11getInstanceEv>:

SPI& SPI::getInstance()
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
    static SPI instance;
 8009098:	4b10      	ldr	r3, [pc, #64]	; (80090dc <_ZN3SPI11getInstanceEv+0x48>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	f3bf 8f5b 	dmb	ish
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bf0c      	ite	eq
 80090aa:	2301      	moveq	r3, #1
 80090ac:	2300      	movne	r3, #0
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d010      	beq.n	80090d6 <_ZN3SPI11getInstanceEv+0x42>
 80090b4:	4809      	ldr	r0, [pc, #36]	; (80090dc <_ZN3SPI11getInstanceEv+0x48>)
 80090b6:	f000 f943 	bl	8009340 <__cxa_guard_acquire>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bf14      	ite	ne
 80090c0:	2301      	movne	r3, #1
 80090c2:	2300      	moveq	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <_ZN3SPI11getInstanceEv+0x42>
 80090ca:	4805      	ldr	r0, [pc, #20]	; (80090e0 <_ZN3SPI11getInstanceEv+0x4c>)
 80090cc:	f7ff ffd2 	bl	8009074 <_ZN3SPIC1Ev>
 80090d0:	4802      	ldr	r0, [pc, #8]	; (80090dc <_ZN3SPI11getInstanceEv+0x48>)
 80090d2:	f000 f941 	bl	8009358 <__cxa_guard_release>
    return instance;
 80090d6:	4b02      	ldr	r3, [pc, #8]	; (80090e0 <_ZN3SPI11getInstanceEv+0x4c>)
}
 80090d8:	4618      	mov	r0, r3
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	20000100 	.word	0x20000100
 80090e0:	200000f8 	.word	0x200000f8

080090e4 <_ZN3SPI4initEv>:
 * @brief Initialize the SPI module.
 *
 * @return The initialization status.
 */
HAL_StatusTypeDef SPI::init()
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

	this->hspi_->Instance = SPI1; //TODO add modularity
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a20      	ldr	r2, [pc, #128]	; (8009174 <_ZN3SPI4initEv+0x90>)
 80090f2:	601a      	str	r2, [r3, #0]
	this->hspi_->Init.Mode = SPI_MODE_MASTER;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80090fc:	605a      	str	r2, [r3, #4]
	this->hspi_->Init.Direction = SPI_DIRECTION_2LINES;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2200      	movs	r2, #0
 8009104:	609a      	str	r2, [r3, #8]
	this->hspi_->Init.DataSize = SPI_DATASIZE_8BIT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2200      	movs	r2, #0
 800910c:	60da      	str	r2, [r3, #12]
	this->hspi_->Init.CLKPolarity = SPI_POLARITY_LOW;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2200      	movs	r2, #0
 8009114:	611a      	str	r2, [r3, #16]
	this->hspi_->Init.CLKPhase = SPI_PHASE_1EDGE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2200      	movs	r2, #0
 800911c:	615a      	str	r2, [r3, #20]
	this->hspi_->Init.NSS = SPI_NSS_SOFT;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009126:	619a      	str	r2, [r3, #24]
	this->hspi_->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2218      	movs	r2, #24
 800912e:	61da      	str	r2, [r3, #28]
	this->hspi_->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2200      	movs	r2, #0
 8009136:	621a      	str	r2, [r3, #32]
	this->hspi_->Init.TIMode = SPI_TIMODE_DISABLE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2200      	movs	r2, #0
 800913e:	625a      	str	r2, [r3, #36]	; 0x24
	this->hspi_->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2200      	movs	r2, #0
 8009146:	629a      	str	r2, [r3, #40]	; 0x28
	this->hspi_->Init.CRCPolynomial = 10;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	220a      	movs	r2, #10
 800914e:	62da      	str	r2, [r3, #44]	; 0x2c

    status = HAL_SPI_Init(this->hspi_);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4618      	mov	r0, r3
 8009156:	f7f8 fca3 	bl	8001aa0 <HAL_SPI_Init>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]

    if (HAL_OK == status)
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <_ZN3SPI4initEv+0x86>
    {
        state = SPIStates::Idle;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	605a      	str	r2, [r3, #4]
    }

    return status;
 800916a:	7bfb      	ldrb	r3, [r7, #15]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	40013000 	.word	0x40013000

08009178 <_ZN3SPI8transmitEPht>:
 * @param pData Pointer to the data buffer to transmit.
 * @param size The size of the data buffer.
 * @return The transmission status.
 */
HAL_StatusTypeDef SPI::transmit(uint8_t *pData, uint16_t size)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	4613      	mov	r3, r2
 8009184:	80fb      	strh	r3, [r7, #6]
    return HAL_SPI_Transmit(this->hspi_, pData, size, HAL_MAX_DELAY);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6818      	ldr	r0, [r3, #0]
 800918a:	88fa      	ldrh	r2, [r7, #6]
 800918c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	f7f8 fd0e 	bl	8001bb2 <HAL_SPI_Transmit>
 8009196:	4603      	mov	r3, r0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <_ZN3SPI7receiveEPht>:
 * @param pData Pointer to the data buffer to receive.
 * @param size The size of the data buffer.
 * @return The reception status.
 */
HAL_StatusTypeDef SPI::receive(uint8_t *pData, uint16_t size)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	4613      	mov	r3, r2
 80091ac:	80fb      	strh	r3, [r7, #6]
    return HAL_SPI_Receive(this->hspi_, pData, size, HAL_MAX_DELAY);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	88fa      	ldrh	r2, [r7, #6]
 80091b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091b8:	68b9      	ldr	r1, [r7, #8]
 80091ba:	f7f8 fe36 	bl	8001e2a <HAL_SPI_Receive>
 80091be:	4603      	mov	r3, r0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <_ZN3SPI6csHighEtP12GPIO_TypeDef>:
 *
 * @param pin The pin number of the chip select.
 * @param port The GPIO port of the chip select.
 */
void SPI::csHigh(uint16_t pin, GPIO_TypeDef *port)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	460b      	mov	r3, r1
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	817b      	strh	r3, [r7, #10]
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80091d6:	897b      	ldrh	r3, [r7, #10]
 80091d8:	2201      	movs	r2, #1
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7f7 ffe1 	bl	80011a4 <HAL_GPIO_WritePin>
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_ZN3SPI5csLowEtP12GPIO_TypeDef>:
 *
 * @param pin The pin number of the chip select.
 * @param port The GPIO port of the chip select.
 */
void SPI::csLow(uint16_t pin, GPIO_TypeDef *port)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	460b      	mov	r3, r1
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	817b      	strh	r3, [r7, #10]
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80091f8:	897b      	ldrh	r3, [r7, #10]
 80091fa:	2200      	movs	r2, #0
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7f7 ffd0 	bl	80011a4 <HAL_GPIO_WritePin>
}
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <main_cpp>:
#include "project_cpp.h"
#include "littleFSInterface.h"
#include <cstring>

void main_cpp(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b0be      	sub	sp, #248	; 0xf8
 8009210:	af00      	add	r7, sp, #0
	flash_init();
 8009212:	f7ff fe31 	bl	8008e78 <_Z10flash_initv>

    lfs_t lfs;
    int res = lfs_mount(&lfs, &cfg);
 8009216:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800921a:	4945      	ldr	r1, [pc, #276]	; (8009330 <main_cpp+0x124>)
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff fb73 	bl	8008908 <lfs_mount>
 8009222:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 8009226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800922a:	2b00      	cmp	r3, #0
 800922c:	da19      	bge.n	8009262 <main_cpp+0x56>
        // If the mount fails, try formatting the filesystem
        res = lfs_format(&lfs, &cfg);
 800922e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009232:	493f      	ldr	r1, [pc, #252]	; (8009330 <main_cpp+0x124>)
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff fb51 	bl	80088dc <lfs_format>
 800923a:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
        if (res < 0) {
 800923e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009242:	2b00      	cmp	r3, #0
 8009244:	da00      	bge.n	8009248 <main_cpp+0x3c>
        	while(1);
 8009246:	e7fe      	b.n	8009246 <main_cpp+0x3a>
        }
        // Try mounting again
        res = lfs_mount(&lfs, &cfg);
 8009248:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800924c:	4938      	ldr	r1, [pc, #224]	; (8009330 <main_cpp+0x124>)
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff fb5a 	bl	8008908 <lfs_mount>
 8009254:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
        if (res < 0) {
 8009258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800925c:	2b00      	cmp	r3, #0
 800925e:	da00      	bge.n	8009262 <main_cpp+0x56>
        	while(1);
 8009260:	e7fe      	b.n	8009260 <main_cpp+0x54>
        }
    }

    // Open the file for writing
    lfs_file_t file;
    res = lfs_file_open(&lfs, &file, "example.txt", LFS_O_WRONLY | LFS_O_CREAT);
 8009262:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009266:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800926a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800926e:	4a31      	ldr	r2, [pc, #196]	; (8009334 <main_cpp+0x128>)
 8009270:	f7ff fb74 	bl	800895c <lfs_file_open>
 8009274:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 8009278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800927c:	2b00      	cmp	r3, #0
 800927e:	da00      	bge.n	8009282 <main_cpp+0x76>
    	while(1);
 8009280:	e7fe      	b.n	8009280 <main_cpp+0x74>
    }

    // Write some data to the file
    const char *data = "Hello, LittleFS!";
 8009282:	4b2d      	ldr	r3, [pc, #180]	; (8009338 <main_cpp+0x12c>)
 8009284:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    res = lfs_file_write(&lfs, &file, data, strlen(data));
 8009288:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800928c:	f7f6 ffb0 	bl	80001f0 <strlen>
 8009290:	4603      	mov	r3, r0
 8009292:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009296:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800929a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800929e:	f7ff fbed 	bl	8008a7c <lfs_file_write>
 80092a2:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 80092a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	da00      	bge.n	80092b0 <main_cpp+0xa4>
    	while(1);
 80092ae:	e7fe      	b.n	80092ae <main_cpp+0xa2>
    }

    // Close the file after writing
    lfs_file_close(&lfs, &file);
 80092b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80092b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fb82 	bl	80089c4 <lfs_file_close>

    // Open the file for reading
    res = lfs_file_open(&lfs, &file, "example.txt", LFS_O_RDONLY);
 80092c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80092c4:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80092c8:	2301      	movs	r3, #1
 80092ca:	4a1a      	ldr	r2, [pc, #104]	; (8009334 <main_cpp+0x128>)
 80092cc:	f7ff fb46 	bl	800895c <lfs_file_open>
 80092d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 80092d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da00      	bge.n	80092de <main_cpp+0xd2>
    	while(1);
 80092dc:	e7fe      	b.n	80092dc <main_cpp+0xd0>
    }

    // Read the data from the file
    char buffer[32];
    res = lfs_file_read(&lfs, &file, buffer, sizeof(buffer));
 80092de:	1d3a      	adds	r2, r7, #4
 80092e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80092e4:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80092e8:	2320      	movs	r3, #32
 80092ea:	f7ff fb97 	bl	8008a1c <lfs_file_read>
 80092ee:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0) {
 80092f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	da00      	bge.n	80092fc <main_cpp+0xf0>
        while(1);
 80092fa:	e7fe      	b.n	80092fa <main_cpp+0xee>
    }

    // Null-terminate the read data
    buffer[res] = '\0';
 80092fc:	1d3a      	adds	r2, r7, #4
 80092fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009302:	4413      	add	r3, r2
 8009304:	2200      	movs	r2, #0
 8009306:	701a      	strb	r2, [r3, #0]

    // Print the read data
    printf("Read data: %s\n", buffer);
 8009308:	1d3b      	adds	r3, r7, #4
 800930a:	4619      	mov	r1, r3
 800930c:	480b      	ldr	r0, [pc, #44]	; (800933c <main_cpp+0x130>)
 800930e:	f000 fc85 	bl	8009c1c <iprintf>

    // Close the file after reading
    lfs_file_close(&lfs, &file);
 8009312:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009316:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff fb51 	bl	80089c4 <lfs_file_close>

    // Unmount the filesystem
    lfs_unmount(&lfs);
 8009322:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fb04 	bl	8008934 <lfs_unmount>

    while(1);
 800932c:	e7fe      	b.n	800932c <main_cpp+0x120>
 800932e:	bf00      	nop
 8009330:	0800af94 	.word	0x0800af94
 8009334:	0800ade0 	.word	0x0800ade0
 8009338:	0800adec 	.word	0x0800adec
 800933c:	0800ae00 	.word	0x0800ae00

08009340 <__cxa_guard_acquire>:
 8009340:	6803      	ldr	r3, [r0, #0]
 8009342:	07db      	lsls	r3, r3, #31
 8009344:	d406      	bmi.n	8009354 <__cxa_guard_acquire+0x14>
 8009346:	7843      	ldrb	r3, [r0, #1]
 8009348:	b103      	cbz	r3, 800934c <__cxa_guard_acquire+0xc>
 800934a:	deff      	udf	#255	; 0xff
 800934c:	2301      	movs	r3, #1
 800934e:	7043      	strb	r3, [r0, #1]
 8009350:	4618      	mov	r0, r3
 8009352:	4770      	bx	lr
 8009354:	2000      	movs	r0, #0
 8009356:	4770      	bx	lr

08009358 <__cxa_guard_release>:
 8009358:	2301      	movs	r3, #1
 800935a:	6003      	str	r3, [r0, #0]
 800935c:	4770      	bx	lr
	...

08009360 <__assert_func>:
 8009360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009362:	4614      	mov	r4, r2
 8009364:	461a      	mov	r2, r3
 8009366:	4b09      	ldr	r3, [pc, #36]	; (800938c <__assert_func+0x2c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4605      	mov	r5, r0
 800936c:	68d8      	ldr	r0, [r3, #12]
 800936e:	b14c      	cbz	r4, 8009384 <__assert_func+0x24>
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <__assert_func+0x30>)
 8009372:	9100      	str	r1, [sp, #0]
 8009374:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009378:	4906      	ldr	r1, [pc, #24]	; (8009394 <__assert_func+0x34>)
 800937a:	462b      	mov	r3, r5
 800937c:	f000 f814 	bl	80093a8 <fiprintf>
 8009380:	f000 fd62 	bl	8009e48 <abort>
 8009384:	4b04      	ldr	r3, [pc, #16]	; (8009398 <__assert_func+0x38>)
 8009386:	461c      	mov	r4, r3
 8009388:	e7f3      	b.n	8009372 <__assert_func+0x12>
 800938a:	bf00      	nop
 800938c:	2000000c 	.word	0x2000000c
 8009390:	0800afe0 	.word	0x0800afe0
 8009394:	0800afed 	.word	0x0800afed
 8009398:	0800b01b 	.word	0x0800b01b

0800939c <__errno>:
 800939c:	4b01      	ldr	r3, [pc, #4]	; (80093a4 <__errno+0x8>)
 800939e:	6818      	ldr	r0, [r3, #0]
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	2000000c 	.word	0x2000000c

080093a8 <fiprintf>:
 80093a8:	b40e      	push	{r1, r2, r3}
 80093aa:	b503      	push	{r0, r1, lr}
 80093ac:	4601      	mov	r1, r0
 80093ae:	ab03      	add	r3, sp, #12
 80093b0:	4805      	ldr	r0, [pc, #20]	; (80093c8 <fiprintf+0x20>)
 80093b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b6:	6800      	ldr	r0, [r0, #0]
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	f000 f96b 	bl	8009694 <_vfiprintf_r>
 80093be:	b002      	add	sp, #8
 80093c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093c4:	b003      	add	sp, #12
 80093c6:	4770      	bx	lr
 80093c8:	2000000c 	.word	0x2000000c

080093cc <__libc_init_array>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	4d0d      	ldr	r5, [pc, #52]	; (8009404 <__libc_init_array+0x38>)
 80093d0:	4c0d      	ldr	r4, [pc, #52]	; (8009408 <__libc_init_array+0x3c>)
 80093d2:	1b64      	subs	r4, r4, r5
 80093d4:	10a4      	asrs	r4, r4, #2
 80093d6:	2600      	movs	r6, #0
 80093d8:	42a6      	cmp	r6, r4
 80093da:	d109      	bne.n	80093f0 <__libc_init_array+0x24>
 80093dc:	4d0b      	ldr	r5, [pc, #44]	; (800940c <__libc_init_array+0x40>)
 80093de:	4c0c      	ldr	r4, [pc, #48]	; (8009410 <__libc_init_array+0x44>)
 80093e0:	f001 f856 	bl	800a490 <_init>
 80093e4:	1b64      	subs	r4, r4, r5
 80093e6:	10a4      	asrs	r4, r4, #2
 80093e8:	2600      	movs	r6, #0
 80093ea:	42a6      	cmp	r6, r4
 80093ec:	d105      	bne.n	80093fa <__libc_init_array+0x2e>
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f4:	4798      	blx	r3
 80093f6:	3601      	adds	r6, #1
 80093f8:	e7ee      	b.n	80093d8 <__libc_init_array+0xc>
 80093fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fe:	4798      	blx	r3
 8009400:	3601      	adds	r6, #1
 8009402:	e7f2      	b.n	80093ea <__libc_init_array+0x1e>
 8009404:	0800b0bc 	.word	0x0800b0bc
 8009408:	0800b0bc 	.word	0x0800b0bc
 800940c:	0800b0bc 	.word	0x0800b0bc
 8009410:	0800b0c4 	.word	0x0800b0c4

08009414 <malloc>:
 8009414:	4b02      	ldr	r3, [pc, #8]	; (8009420 <malloc+0xc>)
 8009416:	4601      	mov	r1, r0
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	f000 b89d 	b.w	8009558 <_malloc_r>
 800941e:	bf00      	nop
 8009420:	2000000c 	.word	0x2000000c

08009424 <free>:
 8009424:	4b02      	ldr	r3, [pc, #8]	; (8009430 <free+0xc>)
 8009426:	4601      	mov	r1, r0
 8009428:	6818      	ldr	r0, [r3, #0]
 800942a:	f000 b829 	b.w	8009480 <_free_r>
 800942e:	bf00      	nop
 8009430:	2000000c 	.word	0x2000000c

08009434 <memcmp>:
 8009434:	b510      	push	{r4, lr}
 8009436:	3901      	subs	r1, #1
 8009438:	4402      	add	r2, r0
 800943a:	4290      	cmp	r0, r2
 800943c:	d101      	bne.n	8009442 <memcmp+0xe>
 800943e:	2000      	movs	r0, #0
 8009440:	e005      	b.n	800944e <memcmp+0x1a>
 8009442:	7803      	ldrb	r3, [r0, #0]
 8009444:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009448:	42a3      	cmp	r3, r4
 800944a:	d001      	beq.n	8009450 <memcmp+0x1c>
 800944c:	1b18      	subs	r0, r3, r4
 800944e:	bd10      	pop	{r4, pc}
 8009450:	3001      	adds	r0, #1
 8009452:	e7f2      	b.n	800943a <memcmp+0x6>

08009454 <memcpy>:
 8009454:	440a      	add	r2, r1
 8009456:	4291      	cmp	r1, r2
 8009458:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800945c:	d100      	bne.n	8009460 <memcpy+0xc>
 800945e:	4770      	bx	lr
 8009460:	b510      	push	{r4, lr}
 8009462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009466:	f803 4f01 	strb.w	r4, [r3, #1]!
 800946a:	4291      	cmp	r1, r2
 800946c:	d1f9      	bne.n	8009462 <memcpy+0xe>
 800946e:	bd10      	pop	{r4, pc}

08009470 <memset>:
 8009470:	4402      	add	r2, r0
 8009472:	4603      	mov	r3, r0
 8009474:	4293      	cmp	r3, r2
 8009476:	d100      	bne.n	800947a <memset+0xa>
 8009478:	4770      	bx	lr
 800947a:	f803 1b01 	strb.w	r1, [r3], #1
 800947e:	e7f9      	b.n	8009474 <memset+0x4>

08009480 <_free_r>:
 8009480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009482:	2900      	cmp	r1, #0
 8009484:	d044      	beq.n	8009510 <_free_r+0x90>
 8009486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948a:	9001      	str	r0, [sp, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f1a1 0404 	sub.w	r4, r1, #4
 8009492:	bfb8      	it	lt
 8009494:	18e4      	addlt	r4, r4, r3
 8009496:	f000 feff 	bl	800a298 <__malloc_lock>
 800949a:	4a1e      	ldr	r2, [pc, #120]	; (8009514 <_free_r+0x94>)
 800949c:	9801      	ldr	r0, [sp, #4]
 800949e:	6813      	ldr	r3, [r2, #0]
 80094a0:	b933      	cbnz	r3, 80094b0 <_free_r+0x30>
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	6014      	str	r4, [r2, #0]
 80094a6:	b003      	add	sp, #12
 80094a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ac:	f000 befa 	b.w	800a2a4 <__malloc_unlock>
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	d908      	bls.n	80094c6 <_free_r+0x46>
 80094b4:	6825      	ldr	r5, [r4, #0]
 80094b6:	1961      	adds	r1, r4, r5
 80094b8:	428b      	cmp	r3, r1
 80094ba:	bf01      	itttt	eq
 80094bc:	6819      	ldreq	r1, [r3, #0]
 80094be:	685b      	ldreq	r3, [r3, #4]
 80094c0:	1949      	addeq	r1, r1, r5
 80094c2:	6021      	streq	r1, [r4, #0]
 80094c4:	e7ed      	b.n	80094a2 <_free_r+0x22>
 80094c6:	461a      	mov	r2, r3
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	b10b      	cbz	r3, 80094d0 <_free_r+0x50>
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	d9fa      	bls.n	80094c6 <_free_r+0x46>
 80094d0:	6811      	ldr	r1, [r2, #0]
 80094d2:	1855      	adds	r5, r2, r1
 80094d4:	42a5      	cmp	r5, r4
 80094d6:	d10b      	bne.n	80094f0 <_free_r+0x70>
 80094d8:	6824      	ldr	r4, [r4, #0]
 80094da:	4421      	add	r1, r4
 80094dc:	1854      	adds	r4, r2, r1
 80094de:	42a3      	cmp	r3, r4
 80094e0:	6011      	str	r1, [r2, #0]
 80094e2:	d1e0      	bne.n	80094a6 <_free_r+0x26>
 80094e4:	681c      	ldr	r4, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	6053      	str	r3, [r2, #4]
 80094ea:	4421      	add	r1, r4
 80094ec:	6011      	str	r1, [r2, #0]
 80094ee:	e7da      	b.n	80094a6 <_free_r+0x26>
 80094f0:	d902      	bls.n	80094f8 <_free_r+0x78>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6003      	str	r3, [r0, #0]
 80094f6:	e7d6      	b.n	80094a6 <_free_r+0x26>
 80094f8:	6825      	ldr	r5, [r4, #0]
 80094fa:	1961      	adds	r1, r4, r5
 80094fc:	428b      	cmp	r3, r1
 80094fe:	bf04      	itt	eq
 8009500:	6819      	ldreq	r1, [r3, #0]
 8009502:	685b      	ldreq	r3, [r3, #4]
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	bf04      	itt	eq
 8009508:	1949      	addeq	r1, r1, r5
 800950a:	6021      	streq	r1, [r4, #0]
 800950c:	6054      	str	r4, [r2, #4]
 800950e:	e7ca      	b.n	80094a6 <_free_r+0x26>
 8009510:	b003      	add	sp, #12
 8009512:	bd30      	pop	{r4, r5, pc}
 8009514:	20000104 	.word	0x20000104

08009518 <sbrk_aligned>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	4e0e      	ldr	r6, [pc, #56]	; (8009554 <sbrk_aligned+0x3c>)
 800951c:	460c      	mov	r4, r1
 800951e:	6831      	ldr	r1, [r6, #0]
 8009520:	4605      	mov	r5, r0
 8009522:	b911      	cbnz	r1, 800952a <sbrk_aligned+0x12>
 8009524:	f000 fb92 	bl	8009c4c <_sbrk_r>
 8009528:	6030      	str	r0, [r6, #0]
 800952a:	4621      	mov	r1, r4
 800952c:	4628      	mov	r0, r5
 800952e:	f000 fb8d 	bl	8009c4c <_sbrk_r>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	d00a      	beq.n	800954c <sbrk_aligned+0x34>
 8009536:	1cc4      	adds	r4, r0, #3
 8009538:	f024 0403 	bic.w	r4, r4, #3
 800953c:	42a0      	cmp	r0, r4
 800953e:	d007      	beq.n	8009550 <sbrk_aligned+0x38>
 8009540:	1a21      	subs	r1, r4, r0
 8009542:	4628      	mov	r0, r5
 8009544:	f000 fb82 	bl	8009c4c <_sbrk_r>
 8009548:	3001      	adds	r0, #1
 800954a:	d101      	bne.n	8009550 <sbrk_aligned+0x38>
 800954c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009550:	4620      	mov	r0, r4
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	20000108 	.word	0x20000108

08009558 <_malloc_r>:
 8009558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955c:	1ccd      	adds	r5, r1, #3
 800955e:	f025 0503 	bic.w	r5, r5, #3
 8009562:	3508      	adds	r5, #8
 8009564:	2d0c      	cmp	r5, #12
 8009566:	bf38      	it	cc
 8009568:	250c      	movcc	r5, #12
 800956a:	2d00      	cmp	r5, #0
 800956c:	4607      	mov	r7, r0
 800956e:	db01      	blt.n	8009574 <_malloc_r+0x1c>
 8009570:	42a9      	cmp	r1, r5
 8009572:	d905      	bls.n	8009580 <_malloc_r+0x28>
 8009574:	230c      	movs	r3, #12
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	2600      	movs	r6, #0
 800957a:	4630      	mov	r0, r6
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	4e2e      	ldr	r6, [pc, #184]	; (800963c <_malloc_r+0xe4>)
 8009582:	f000 fe89 	bl	800a298 <__malloc_lock>
 8009586:	6833      	ldr	r3, [r6, #0]
 8009588:	461c      	mov	r4, r3
 800958a:	bb34      	cbnz	r4, 80095da <_malloc_r+0x82>
 800958c:	4629      	mov	r1, r5
 800958e:	4638      	mov	r0, r7
 8009590:	f7ff ffc2 	bl	8009518 <sbrk_aligned>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	4604      	mov	r4, r0
 8009598:	d14d      	bne.n	8009636 <_malloc_r+0xde>
 800959a:	6834      	ldr	r4, [r6, #0]
 800959c:	4626      	mov	r6, r4
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d140      	bne.n	8009624 <_malloc_r+0xcc>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	4631      	mov	r1, r6
 80095a6:	4638      	mov	r0, r7
 80095a8:	eb04 0803 	add.w	r8, r4, r3
 80095ac:	f000 fb4e 	bl	8009c4c <_sbrk_r>
 80095b0:	4580      	cmp	r8, r0
 80095b2:	d13a      	bne.n	800962a <_malloc_r+0xd2>
 80095b4:	6821      	ldr	r1, [r4, #0]
 80095b6:	3503      	adds	r5, #3
 80095b8:	1a6d      	subs	r5, r5, r1
 80095ba:	f025 0503 	bic.w	r5, r5, #3
 80095be:	3508      	adds	r5, #8
 80095c0:	2d0c      	cmp	r5, #12
 80095c2:	bf38      	it	cc
 80095c4:	250c      	movcc	r5, #12
 80095c6:	4629      	mov	r1, r5
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ffa5 	bl	8009518 <sbrk_aligned>
 80095ce:	3001      	adds	r0, #1
 80095d0:	d02b      	beq.n	800962a <_malloc_r+0xd2>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	442b      	add	r3, r5
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	e00e      	b.n	80095f8 <_malloc_r+0xa0>
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	1b52      	subs	r2, r2, r5
 80095de:	d41e      	bmi.n	800961e <_malloc_r+0xc6>
 80095e0:	2a0b      	cmp	r2, #11
 80095e2:	d916      	bls.n	8009612 <_malloc_r+0xba>
 80095e4:	1961      	adds	r1, r4, r5
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	6025      	str	r5, [r4, #0]
 80095ea:	bf18      	it	ne
 80095ec:	6059      	strne	r1, [r3, #4]
 80095ee:	6863      	ldr	r3, [r4, #4]
 80095f0:	bf08      	it	eq
 80095f2:	6031      	streq	r1, [r6, #0]
 80095f4:	5162      	str	r2, [r4, r5]
 80095f6:	604b      	str	r3, [r1, #4]
 80095f8:	4638      	mov	r0, r7
 80095fa:	f104 060b 	add.w	r6, r4, #11
 80095fe:	f000 fe51 	bl	800a2a4 <__malloc_unlock>
 8009602:	f026 0607 	bic.w	r6, r6, #7
 8009606:	1d23      	adds	r3, r4, #4
 8009608:	1af2      	subs	r2, r6, r3
 800960a:	d0b6      	beq.n	800957a <_malloc_r+0x22>
 800960c:	1b9b      	subs	r3, r3, r6
 800960e:	50a3      	str	r3, [r4, r2]
 8009610:	e7b3      	b.n	800957a <_malloc_r+0x22>
 8009612:	6862      	ldr	r2, [r4, #4]
 8009614:	42a3      	cmp	r3, r4
 8009616:	bf0c      	ite	eq
 8009618:	6032      	streq	r2, [r6, #0]
 800961a:	605a      	strne	r2, [r3, #4]
 800961c:	e7ec      	b.n	80095f8 <_malloc_r+0xa0>
 800961e:	4623      	mov	r3, r4
 8009620:	6864      	ldr	r4, [r4, #4]
 8009622:	e7b2      	b.n	800958a <_malloc_r+0x32>
 8009624:	4634      	mov	r4, r6
 8009626:	6876      	ldr	r6, [r6, #4]
 8009628:	e7b9      	b.n	800959e <_malloc_r+0x46>
 800962a:	230c      	movs	r3, #12
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	4638      	mov	r0, r7
 8009630:	f000 fe38 	bl	800a2a4 <__malloc_unlock>
 8009634:	e7a1      	b.n	800957a <_malloc_r+0x22>
 8009636:	6025      	str	r5, [r4, #0]
 8009638:	e7de      	b.n	80095f8 <_malloc_r+0xa0>
 800963a:	bf00      	nop
 800963c:	20000104 	.word	0x20000104

08009640 <__sfputc_r>:
 8009640:	6893      	ldr	r3, [r2, #8]
 8009642:	3b01      	subs	r3, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	b410      	push	{r4}
 8009648:	6093      	str	r3, [r2, #8]
 800964a:	da08      	bge.n	800965e <__sfputc_r+0x1e>
 800964c:	6994      	ldr	r4, [r2, #24]
 800964e:	42a3      	cmp	r3, r4
 8009650:	db01      	blt.n	8009656 <__sfputc_r+0x16>
 8009652:	290a      	cmp	r1, #10
 8009654:	d103      	bne.n	800965e <__sfputc_r+0x1e>
 8009656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800965a:	f000 bb35 	b.w	8009cc8 <__swbuf_r>
 800965e:	6813      	ldr	r3, [r2, #0]
 8009660:	1c58      	adds	r0, r3, #1
 8009662:	6010      	str	r0, [r2, #0]
 8009664:	7019      	strb	r1, [r3, #0]
 8009666:	4608      	mov	r0, r1
 8009668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800966c:	4770      	bx	lr

0800966e <__sfputs_r>:
 800966e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009670:	4606      	mov	r6, r0
 8009672:	460f      	mov	r7, r1
 8009674:	4614      	mov	r4, r2
 8009676:	18d5      	adds	r5, r2, r3
 8009678:	42ac      	cmp	r4, r5
 800967a:	d101      	bne.n	8009680 <__sfputs_r+0x12>
 800967c:	2000      	movs	r0, #0
 800967e:	e007      	b.n	8009690 <__sfputs_r+0x22>
 8009680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009684:	463a      	mov	r2, r7
 8009686:	4630      	mov	r0, r6
 8009688:	f7ff ffda 	bl	8009640 <__sfputc_r>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d1f3      	bne.n	8009678 <__sfputs_r+0xa>
 8009690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009694 <_vfiprintf_r>:
 8009694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	460d      	mov	r5, r1
 800969a:	b09d      	sub	sp, #116	; 0x74
 800969c:	4614      	mov	r4, r2
 800969e:	4698      	mov	r8, r3
 80096a0:	4606      	mov	r6, r0
 80096a2:	b118      	cbz	r0, 80096ac <_vfiprintf_r+0x18>
 80096a4:	6983      	ldr	r3, [r0, #24]
 80096a6:	b90b      	cbnz	r3, 80096ac <_vfiprintf_r+0x18>
 80096a8:	f000 fcf0 	bl	800a08c <__sinit>
 80096ac:	4b89      	ldr	r3, [pc, #548]	; (80098d4 <_vfiprintf_r+0x240>)
 80096ae:	429d      	cmp	r5, r3
 80096b0:	d11b      	bne.n	80096ea <_vfiprintf_r+0x56>
 80096b2:	6875      	ldr	r5, [r6, #4]
 80096b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096b6:	07d9      	lsls	r1, r3, #31
 80096b8:	d405      	bmi.n	80096c6 <_vfiprintf_r+0x32>
 80096ba:	89ab      	ldrh	r3, [r5, #12]
 80096bc:	059a      	lsls	r2, r3, #22
 80096be:	d402      	bmi.n	80096c6 <_vfiprintf_r+0x32>
 80096c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096c2:	f000 fd81 	bl	800a1c8 <__retarget_lock_acquire_recursive>
 80096c6:	89ab      	ldrh	r3, [r5, #12]
 80096c8:	071b      	lsls	r3, r3, #28
 80096ca:	d501      	bpl.n	80096d0 <_vfiprintf_r+0x3c>
 80096cc:	692b      	ldr	r3, [r5, #16]
 80096ce:	b9eb      	cbnz	r3, 800970c <_vfiprintf_r+0x78>
 80096d0:	4629      	mov	r1, r5
 80096d2:	4630      	mov	r0, r6
 80096d4:	f000 fb4a 	bl	8009d6c <__swsetup_r>
 80096d8:	b1c0      	cbz	r0, 800970c <_vfiprintf_r+0x78>
 80096da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096dc:	07dc      	lsls	r4, r3, #31
 80096de:	d50e      	bpl.n	80096fe <_vfiprintf_r+0x6a>
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096e4:	b01d      	add	sp, #116	; 0x74
 80096e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ea:	4b7b      	ldr	r3, [pc, #492]	; (80098d8 <_vfiprintf_r+0x244>)
 80096ec:	429d      	cmp	r5, r3
 80096ee:	d101      	bne.n	80096f4 <_vfiprintf_r+0x60>
 80096f0:	68b5      	ldr	r5, [r6, #8]
 80096f2:	e7df      	b.n	80096b4 <_vfiprintf_r+0x20>
 80096f4:	4b79      	ldr	r3, [pc, #484]	; (80098dc <_vfiprintf_r+0x248>)
 80096f6:	429d      	cmp	r5, r3
 80096f8:	bf08      	it	eq
 80096fa:	68f5      	ldreq	r5, [r6, #12]
 80096fc:	e7da      	b.n	80096b4 <_vfiprintf_r+0x20>
 80096fe:	89ab      	ldrh	r3, [r5, #12]
 8009700:	0598      	lsls	r0, r3, #22
 8009702:	d4ed      	bmi.n	80096e0 <_vfiprintf_r+0x4c>
 8009704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009706:	f000 fd60 	bl	800a1ca <__retarget_lock_release_recursive>
 800970a:	e7e9      	b.n	80096e0 <_vfiprintf_r+0x4c>
 800970c:	2300      	movs	r3, #0
 800970e:	9309      	str	r3, [sp, #36]	; 0x24
 8009710:	2320      	movs	r3, #32
 8009712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009716:	f8cd 800c 	str.w	r8, [sp, #12]
 800971a:	2330      	movs	r3, #48	; 0x30
 800971c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098e0 <_vfiprintf_r+0x24c>
 8009720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009724:	f04f 0901 	mov.w	r9, #1
 8009728:	4623      	mov	r3, r4
 800972a:	469a      	mov	sl, r3
 800972c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009730:	b10a      	cbz	r2, 8009736 <_vfiprintf_r+0xa2>
 8009732:	2a25      	cmp	r2, #37	; 0x25
 8009734:	d1f9      	bne.n	800972a <_vfiprintf_r+0x96>
 8009736:	ebba 0b04 	subs.w	fp, sl, r4
 800973a:	d00b      	beq.n	8009754 <_vfiprintf_r+0xc0>
 800973c:	465b      	mov	r3, fp
 800973e:	4622      	mov	r2, r4
 8009740:	4629      	mov	r1, r5
 8009742:	4630      	mov	r0, r6
 8009744:	f7ff ff93 	bl	800966e <__sfputs_r>
 8009748:	3001      	adds	r0, #1
 800974a:	f000 80aa 	beq.w	80098a2 <_vfiprintf_r+0x20e>
 800974e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009750:	445a      	add	r2, fp
 8009752:	9209      	str	r2, [sp, #36]	; 0x24
 8009754:	f89a 3000 	ldrb.w	r3, [sl]
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 80a2 	beq.w	80098a2 <_vfiprintf_r+0x20e>
 800975e:	2300      	movs	r3, #0
 8009760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009768:	f10a 0a01 	add.w	sl, sl, #1
 800976c:	9304      	str	r3, [sp, #16]
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009774:	931a      	str	r3, [sp, #104]	; 0x68
 8009776:	4654      	mov	r4, sl
 8009778:	2205      	movs	r2, #5
 800977a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977e:	4858      	ldr	r0, [pc, #352]	; (80098e0 <_vfiprintf_r+0x24c>)
 8009780:	f7f6 fd3e 	bl	8000200 <memchr>
 8009784:	9a04      	ldr	r2, [sp, #16]
 8009786:	b9d8      	cbnz	r0, 80097c0 <_vfiprintf_r+0x12c>
 8009788:	06d1      	lsls	r1, r2, #27
 800978a:	bf44      	itt	mi
 800978c:	2320      	movmi	r3, #32
 800978e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009792:	0713      	lsls	r3, r2, #28
 8009794:	bf44      	itt	mi
 8009796:	232b      	movmi	r3, #43	; 0x2b
 8009798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979c:	f89a 3000 	ldrb.w	r3, [sl]
 80097a0:	2b2a      	cmp	r3, #42	; 0x2a
 80097a2:	d015      	beq.n	80097d0 <_vfiprintf_r+0x13c>
 80097a4:	9a07      	ldr	r2, [sp, #28]
 80097a6:	4654      	mov	r4, sl
 80097a8:	2000      	movs	r0, #0
 80097aa:	f04f 0c0a 	mov.w	ip, #10
 80097ae:	4621      	mov	r1, r4
 80097b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b4:	3b30      	subs	r3, #48	; 0x30
 80097b6:	2b09      	cmp	r3, #9
 80097b8:	d94e      	bls.n	8009858 <_vfiprintf_r+0x1c4>
 80097ba:	b1b0      	cbz	r0, 80097ea <_vfiprintf_r+0x156>
 80097bc:	9207      	str	r2, [sp, #28]
 80097be:	e014      	b.n	80097ea <_vfiprintf_r+0x156>
 80097c0:	eba0 0308 	sub.w	r3, r0, r8
 80097c4:	fa09 f303 	lsl.w	r3, r9, r3
 80097c8:	4313      	orrs	r3, r2
 80097ca:	9304      	str	r3, [sp, #16]
 80097cc:	46a2      	mov	sl, r4
 80097ce:	e7d2      	b.n	8009776 <_vfiprintf_r+0xe2>
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	1d19      	adds	r1, r3, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	9103      	str	r1, [sp, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	bfbb      	ittet	lt
 80097dc:	425b      	neglt	r3, r3
 80097de:	f042 0202 	orrlt.w	r2, r2, #2
 80097e2:	9307      	strge	r3, [sp, #28]
 80097e4:	9307      	strlt	r3, [sp, #28]
 80097e6:	bfb8      	it	lt
 80097e8:	9204      	strlt	r2, [sp, #16]
 80097ea:	7823      	ldrb	r3, [r4, #0]
 80097ec:	2b2e      	cmp	r3, #46	; 0x2e
 80097ee:	d10c      	bne.n	800980a <_vfiprintf_r+0x176>
 80097f0:	7863      	ldrb	r3, [r4, #1]
 80097f2:	2b2a      	cmp	r3, #42	; 0x2a
 80097f4:	d135      	bne.n	8009862 <_vfiprintf_r+0x1ce>
 80097f6:	9b03      	ldr	r3, [sp, #12]
 80097f8:	1d1a      	adds	r2, r3, #4
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	9203      	str	r2, [sp, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bfb8      	it	lt
 8009802:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009806:	3402      	adds	r4, #2
 8009808:	9305      	str	r3, [sp, #20]
 800980a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098f0 <_vfiprintf_r+0x25c>
 800980e:	7821      	ldrb	r1, [r4, #0]
 8009810:	2203      	movs	r2, #3
 8009812:	4650      	mov	r0, sl
 8009814:	f7f6 fcf4 	bl	8000200 <memchr>
 8009818:	b140      	cbz	r0, 800982c <_vfiprintf_r+0x198>
 800981a:	2340      	movs	r3, #64	; 0x40
 800981c:	eba0 000a 	sub.w	r0, r0, sl
 8009820:	fa03 f000 	lsl.w	r0, r3, r0
 8009824:	9b04      	ldr	r3, [sp, #16]
 8009826:	4303      	orrs	r3, r0
 8009828:	3401      	adds	r4, #1
 800982a:	9304      	str	r3, [sp, #16]
 800982c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009830:	482c      	ldr	r0, [pc, #176]	; (80098e4 <_vfiprintf_r+0x250>)
 8009832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009836:	2206      	movs	r2, #6
 8009838:	f7f6 fce2 	bl	8000200 <memchr>
 800983c:	2800      	cmp	r0, #0
 800983e:	d03f      	beq.n	80098c0 <_vfiprintf_r+0x22c>
 8009840:	4b29      	ldr	r3, [pc, #164]	; (80098e8 <_vfiprintf_r+0x254>)
 8009842:	bb1b      	cbnz	r3, 800988c <_vfiprintf_r+0x1f8>
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	3307      	adds	r3, #7
 8009848:	f023 0307 	bic.w	r3, r3, #7
 800984c:	3308      	adds	r3, #8
 800984e:	9303      	str	r3, [sp, #12]
 8009850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009852:	443b      	add	r3, r7
 8009854:	9309      	str	r3, [sp, #36]	; 0x24
 8009856:	e767      	b.n	8009728 <_vfiprintf_r+0x94>
 8009858:	fb0c 3202 	mla	r2, ip, r2, r3
 800985c:	460c      	mov	r4, r1
 800985e:	2001      	movs	r0, #1
 8009860:	e7a5      	b.n	80097ae <_vfiprintf_r+0x11a>
 8009862:	2300      	movs	r3, #0
 8009864:	3401      	adds	r4, #1
 8009866:	9305      	str	r3, [sp, #20]
 8009868:	4619      	mov	r1, r3
 800986a:	f04f 0c0a 	mov.w	ip, #10
 800986e:	4620      	mov	r0, r4
 8009870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009874:	3a30      	subs	r2, #48	; 0x30
 8009876:	2a09      	cmp	r2, #9
 8009878:	d903      	bls.n	8009882 <_vfiprintf_r+0x1ee>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0c5      	beq.n	800980a <_vfiprintf_r+0x176>
 800987e:	9105      	str	r1, [sp, #20]
 8009880:	e7c3      	b.n	800980a <_vfiprintf_r+0x176>
 8009882:	fb0c 2101 	mla	r1, ip, r1, r2
 8009886:	4604      	mov	r4, r0
 8009888:	2301      	movs	r3, #1
 800988a:	e7f0      	b.n	800986e <_vfiprintf_r+0x1da>
 800988c:	ab03      	add	r3, sp, #12
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	462a      	mov	r2, r5
 8009892:	4b16      	ldr	r3, [pc, #88]	; (80098ec <_vfiprintf_r+0x258>)
 8009894:	a904      	add	r1, sp, #16
 8009896:	4630      	mov	r0, r6
 8009898:	f3af 8000 	nop.w
 800989c:	4607      	mov	r7, r0
 800989e:	1c78      	adds	r0, r7, #1
 80098a0:	d1d6      	bne.n	8009850 <_vfiprintf_r+0x1bc>
 80098a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098a4:	07d9      	lsls	r1, r3, #31
 80098a6:	d405      	bmi.n	80098b4 <_vfiprintf_r+0x220>
 80098a8:	89ab      	ldrh	r3, [r5, #12]
 80098aa:	059a      	lsls	r2, r3, #22
 80098ac:	d402      	bmi.n	80098b4 <_vfiprintf_r+0x220>
 80098ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098b0:	f000 fc8b 	bl	800a1ca <__retarget_lock_release_recursive>
 80098b4:	89ab      	ldrh	r3, [r5, #12]
 80098b6:	065b      	lsls	r3, r3, #25
 80098b8:	f53f af12 	bmi.w	80096e0 <_vfiprintf_r+0x4c>
 80098bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098be:	e711      	b.n	80096e4 <_vfiprintf_r+0x50>
 80098c0:	ab03      	add	r3, sp, #12
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	462a      	mov	r2, r5
 80098c6:	4b09      	ldr	r3, [pc, #36]	; (80098ec <_vfiprintf_r+0x258>)
 80098c8:	a904      	add	r1, sp, #16
 80098ca:	4630      	mov	r0, r6
 80098cc:	f000 f880 	bl	80099d0 <_printf_i>
 80098d0:	e7e4      	b.n	800989c <_vfiprintf_r+0x208>
 80098d2:	bf00      	nop
 80098d4:	0800b074 	.word	0x0800b074
 80098d8:	0800b094 	.word	0x0800b094
 80098dc:	0800b054 	.word	0x0800b054
 80098e0:	0800b020 	.word	0x0800b020
 80098e4:	0800b02a 	.word	0x0800b02a
 80098e8:	00000000 	.word	0x00000000
 80098ec:	0800966f 	.word	0x0800966f
 80098f0:	0800b026 	.word	0x0800b026

080098f4 <_printf_common>:
 80098f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f8:	4616      	mov	r6, r2
 80098fa:	4699      	mov	r9, r3
 80098fc:	688a      	ldr	r2, [r1, #8]
 80098fe:	690b      	ldr	r3, [r1, #16]
 8009900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009904:	4293      	cmp	r3, r2
 8009906:	bfb8      	it	lt
 8009908:	4613      	movlt	r3, r2
 800990a:	6033      	str	r3, [r6, #0]
 800990c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009910:	4607      	mov	r7, r0
 8009912:	460c      	mov	r4, r1
 8009914:	b10a      	cbz	r2, 800991a <_printf_common+0x26>
 8009916:	3301      	adds	r3, #1
 8009918:	6033      	str	r3, [r6, #0]
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	0699      	lsls	r1, r3, #26
 800991e:	bf42      	ittt	mi
 8009920:	6833      	ldrmi	r3, [r6, #0]
 8009922:	3302      	addmi	r3, #2
 8009924:	6033      	strmi	r3, [r6, #0]
 8009926:	6825      	ldr	r5, [r4, #0]
 8009928:	f015 0506 	ands.w	r5, r5, #6
 800992c:	d106      	bne.n	800993c <_printf_common+0x48>
 800992e:	f104 0a19 	add.w	sl, r4, #25
 8009932:	68e3      	ldr	r3, [r4, #12]
 8009934:	6832      	ldr	r2, [r6, #0]
 8009936:	1a9b      	subs	r3, r3, r2
 8009938:	42ab      	cmp	r3, r5
 800993a:	dc26      	bgt.n	800998a <_printf_common+0x96>
 800993c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009940:	1e13      	subs	r3, r2, #0
 8009942:	6822      	ldr	r2, [r4, #0]
 8009944:	bf18      	it	ne
 8009946:	2301      	movne	r3, #1
 8009948:	0692      	lsls	r2, r2, #26
 800994a:	d42b      	bmi.n	80099a4 <_printf_common+0xb0>
 800994c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009950:	4649      	mov	r1, r9
 8009952:	4638      	mov	r0, r7
 8009954:	47c0      	blx	r8
 8009956:	3001      	adds	r0, #1
 8009958:	d01e      	beq.n	8009998 <_printf_common+0xa4>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	68e5      	ldr	r5, [r4, #12]
 800995e:	6832      	ldr	r2, [r6, #0]
 8009960:	f003 0306 	and.w	r3, r3, #6
 8009964:	2b04      	cmp	r3, #4
 8009966:	bf08      	it	eq
 8009968:	1aad      	subeq	r5, r5, r2
 800996a:	68a3      	ldr	r3, [r4, #8]
 800996c:	6922      	ldr	r2, [r4, #16]
 800996e:	bf0c      	ite	eq
 8009970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009974:	2500      	movne	r5, #0
 8009976:	4293      	cmp	r3, r2
 8009978:	bfc4      	itt	gt
 800997a:	1a9b      	subgt	r3, r3, r2
 800997c:	18ed      	addgt	r5, r5, r3
 800997e:	2600      	movs	r6, #0
 8009980:	341a      	adds	r4, #26
 8009982:	42b5      	cmp	r5, r6
 8009984:	d11a      	bne.n	80099bc <_printf_common+0xc8>
 8009986:	2000      	movs	r0, #0
 8009988:	e008      	b.n	800999c <_printf_common+0xa8>
 800998a:	2301      	movs	r3, #1
 800998c:	4652      	mov	r2, sl
 800998e:	4649      	mov	r1, r9
 8009990:	4638      	mov	r0, r7
 8009992:	47c0      	blx	r8
 8009994:	3001      	adds	r0, #1
 8009996:	d103      	bne.n	80099a0 <_printf_common+0xac>
 8009998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800999c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a0:	3501      	adds	r5, #1
 80099a2:	e7c6      	b.n	8009932 <_printf_common+0x3e>
 80099a4:	18e1      	adds	r1, r4, r3
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	2030      	movs	r0, #48	; 0x30
 80099aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099ae:	4422      	add	r2, r4
 80099b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099b8:	3302      	adds	r3, #2
 80099ba:	e7c7      	b.n	800994c <_printf_common+0x58>
 80099bc:	2301      	movs	r3, #1
 80099be:	4622      	mov	r2, r4
 80099c0:	4649      	mov	r1, r9
 80099c2:	4638      	mov	r0, r7
 80099c4:	47c0      	blx	r8
 80099c6:	3001      	adds	r0, #1
 80099c8:	d0e6      	beq.n	8009998 <_printf_common+0xa4>
 80099ca:	3601      	adds	r6, #1
 80099cc:	e7d9      	b.n	8009982 <_printf_common+0x8e>
	...

080099d0 <_printf_i>:
 80099d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	7e0f      	ldrb	r7, [r1, #24]
 80099d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099d8:	2f78      	cmp	r7, #120	; 0x78
 80099da:	4691      	mov	r9, r2
 80099dc:	4680      	mov	r8, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	469a      	mov	sl, r3
 80099e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099e6:	d807      	bhi.n	80099f8 <_printf_i+0x28>
 80099e8:	2f62      	cmp	r7, #98	; 0x62
 80099ea:	d80a      	bhi.n	8009a02 <_printf_i+0x32>
 80099ec:	2f00      	cmp	r7, #0
 80099ee:	f000 80d8 	beq.w	8009ba2 <_printf_i+0x1d2>
 80099f2:	2f58      	cmp	r7, #88	; 0x58
 80099f4:	f000 80a3 	beq.w	8009b3e <_printf_i+0x16e>
 80099f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a00:	e03a      	b.n	8009a78 <_printf_i+0xa8>
 8009a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a06:	2b15      	cmp	r3, #21
 8009a08:	d8f6      	bhi.n	80099f8 <_printf_i+0x28>
 8009a0a:	a101      	add	r1, pc, #4	; (adr r1, 8009a10 <_printf_i+0x40>)
 8009a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a10:	08009a69 	.word	0x08009a69
 8009a14:	08009a7d 	.word	0x08009a7d
 8009a18:	080099f9 	.word	0x080099f9
 8009a1c:	080099f9 	.word	0x080099f9
 8009a20:	080099f9 	.word	0x080099f9
 8009a24:	080099f9 	.word	0x080099f9
 8009a28:	08009a7d 	.word	0x08009a7d
 8009a2c:	080099f9 	.word	0x080099f9
 8009a30:	080099f9 	.word	0x080099f9
 8009a34:	080099f9 	.word	0x080099f9
 8009a38:	080099f9 	.word	0x080099f9
 8009a3c:	08009b89 	.word	0x08009b89
 8009a40:	08009aad 	.word	0x08009aad
 8009a44:	08009b6b 	.word	0x08009b6b
 8009a48:	080099f9 	.word	0x080099f9
 8009a4c:	080099f9 	.word	0x080099f9
 8009a50:	08009bab 	.word	0x08009bab
 8009a54:	080099f9 	.word	0x080099f9
 8009a58:	08009aad 	.word	0x08009aad
 8009a5c:	080099f9 	.word	0x080099f9
 8009a60:	080099f9 	.word	0x080099f9
 8009a64:	08009b73 	.word	0x08009b73
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	1d1a      	adds	r2, r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	602a      	str	r2, [r5, #0]
 8009a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e0a3      	b.n	8009bc4 <_printf_i+0x1f4>
 8009a7c:	6820      	ldr	r0, [r4, #0]
 8009a7e:	6829      	ldr	r1, [r5, #0]
 8009a80:	0606      	lsls	r6, r0, #24
 8009a82:	f101 0304 	add.w	r3, r1, #4
 8009a86:	d50a      	bpl.n	8009a9e <_printf_i+0xce>
 8009a88:	680e      	ldr	r6, [r1, #0]
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	2e00      	cmp	r6, #0
 8009a8e:	da03      	bge.n	8009a98 <_printf_i+0xc8>
 8009a90:	232d      	movs	r3, #45	; 0x2d
 8009a92:	4276      	negs	r6, r6
 8009a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a98:	485e      	ldr	r0, [pc, #376]	; (8009c14 <_printf_i+0x244>)
 8009a9a:	230a      	movs	r3, #10
 8009a9c:	e019      	b.n	8009ad2 <_printf_i+0x102>
 8009a9e:	680e      	ldr	r6, [r1, #0]
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009aa6:	bf18      	it	ne
 8009aa8:	b236      	sxthne	r6, r6
 8009aaa:	e7ef      	b.n	8009a8c <_printf_i+0xbc>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	6820      	ldr	r0, [r4, #0]
 8009ab0:	1d19      	adds	r1, r3, #4
 8009ab2:	6029      	str	r1, [r5, #0]
 8009ab4:	0601      	lsls	r1, r0, #24
 8009ab6:	d501      	bpl.n	8009abc <_printf_i+0xec>
 8009ab8:	681e      	ldr	r6, [r3, #0]
 8009aba:	e002      	b.n	8009ac2 <_printf_i+0xf2>
 8009abc:	0646      	lsls	r6, r0, #25
 8009abe:	d5fb      	bpl.n	8009ab8 <_printf_i+0xe8>
 8009ac0:	881e      	ldrh	r6, [r3, #0]
 8009ac2:	4854      	ldr	r0, [pc, #336]	; (8009c14 <_printf_i+0x244>)
 8009ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ac6:	bf0c      	ite	eq
 8009ac8:	2308      	moveq	r3, #8
 8009aca:	230a      	movne	r3, #10
 8009acc:	2100      	movs	r1, #0
 8009ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ad2:	6865      	ldr	r5, [r4, #4]
 8009ad4:	60a5      	str	r5, [r4, #8]
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	bfa2      	ittt	ge
 8009ada:	6821      	ldrge	r1, [r4, #0]
 8009adc:	f021 0104 	bicge.w	r1, r1, #4
 8009ae0:	6021      	strge	r1, [r4, #0]
 8009ae2:	b90e      	cbnz	r6, 8009ae8 <_printf_i+0x118>
 8009ae4:	2d00      	cmp	r5, #0
 8009ae6:	d04d      	beq.n	8009b84 <_printf_i+0x1b4>
 8009ae8:	4615      	mov	r5, r2
 8009aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8009aee:	fb03 6711 	mls	r7, r3, r1, r6
 8009af2:	5dc7      	ldrb	r7, [r0, r7]
 8009af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009af8:	4637      	mov	r7, r6
 8009afa:	42bb      	cmp	r3, r7
 8009afc:	460e      	mov	r6, r1
 8009afe:	d9f4      	bls.n	8009aea <_printf_i+0x11a>
 8009b00:	2b08      	cmp	r3, #8
 8009b02:	d10b      	bne.n	8009b1c <_printf_i+0x14c>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	07de      	lsls	r6, r3, #31
 8009b08:	d508      	bpl.n	8009b1c <_printf_i+0x14c>
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	6861      	ldr	r1, [r4, #4]
 8009b0e:	4299      	cmp	r1, r3
 8009b10:	bfde      	ittt	le
 8009b12:	2330      	movle	r3, #48	; 0x30
 8009b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b1c:	1b52      	subs	r2, r2, r5
 8009b1e:	6122      	str	r2, [r4, #16]
 8009b20:	f8cd a000 	str.w	sl, [sp]
 8009b24:	464b      	mov	r3, r9
 8009b26:	aa03      	add	r2, sp, #12
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	f7ff fee2 	bl	80098f4 <_printf_common>
 8009b30:	3001      	adds	r0, #1
 8009b32:	d14c      	bne.n	8009bce <_printf_i+0x1fe>
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b38:	b004      	add	sp, #16
 8009b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3e:	4835      	ldr	r0, [pc, #212]	; (8009c14 <_printf_i+0x244>)
 8009b40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b44:	6829      	ldr	r1, [r5, #0]
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b4c:	6029      	str	r1, [r5, #0]
 8009b4e:	061d      	lsls	r5, r3, #24
 8009b50:	d514      	bpl.n	8009b7c <_printf_i+0x1ac>
 8009b52:	07df      	lsls	r7, r3, #31
 8009b54:	bf44      	itt	mi
 8009b56:	f043 0320 	orrmi.w	r3, r3, #32
 8009b5a:	6023      	strmi	r3, [r4, #0]
 8009b5c:	b91e      	cbnz	r6, 8009b66 <_printf_i+0x196>
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	f023 0320 	bic.w	r3, r3, #32
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	2310      	movs	r3, #16
 8009b68:	e7b0      	b.n	8009acc <_printf_i+0xfc>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	f043 0320 	orr.w	r3, r3, #32
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	2378      	movs	r3, #120	; 0x78
 8009b74:	4828      	ldr	r0, [pc, #160]	; (8009c18 <_printf_i+0x248>)
 8009b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b7a:	e7e3      	b.n	8009b44 <_printf_i+0x174>
 8009b7c:	0659      	lsls	r1, r3, #25
 8009b7e:	bf48      	it	mi
 8009b80:	b2b6      	uxthmi	r6, r6
 8009b82:	e7e6      	b.n	8009b52 <_printf_i+0x182>
 8009b84:	4615      	mov	r5, r2
 8009b86:	e7bb      	b.n	8009b00 <_printf_i+0x130>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	6826      	ldr	r6, [r4, #0]
 8009b8c:	6961      	ldr	r1, [r4, #20]
 8009b8e:	1d18      	adds	r0, r3, #4
 8009b90:	6028      	str	r0, [r5, #0]
 8009b92:	0635      	lsls	r5, r6, #24
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	d501      	bpl.n	8009b9c <_printf_i+0x1cc>
 8009b98:	6019      	str	r1, [r3, #0]
 8009b9a:	e002      	b.n	8009ba2 <_printf_i+0x1d2>
 8009b9c:	0670      	lsls	r0, r6, #25
 8009b9e:	d5fb      	bpl.n	8009b98 <_printf_i+0x1c8>
 8009ba0:	8019      	strh	r1, [r3, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	6123      	str	r3, [r4, #16]
 8009ba6:	4615      	mov	r5, r2
 8009ba8:	e7ba      	b.n	8009b20 <_printf_i+0x150>
 8009baa:	682b      	ldr	r3, [r5, #0]
 8009bac:	1d1a      	adds	r2, r3, #4
 8009bae:	602a      	str	r2, [r5, #0]
 8009bb0:	681d      	ldr	r5, [r3, #0]
 8009bb2:	6862      	ldr	r2, [r4, #4]
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f7f6 fb22 	bl	8000200 <memchr>
 8009bbc:	b108      	cbz	r0, 8009bc2 <_printf_i+0x1f2>
 8009bbe:	1b40      	subs	r0, r0, r5
 8009bc0:	6060      	str	r0, [r4, #4]
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	6123      	str	r3, [r4, #16]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bcc:	e7a8      	b.n	8009b20 <_printf_i+0x150>
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	47d0      	blx	sl
 8009bd8:	3001      	adds	r0, #1
 8009bda:	d0ab      	beq.n	8009b34 <_printf_i+0x164>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	079b      	lsls	r3, r3, #30
 8009be0:	d413      	bmi.n	8009c0a <_printf_i+0x23a>
 8009be2:	68e0      	ldr	r0, [r4, #12]
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	4298      	cmp	r0, r3
 8009be8:	bfb8      	it	lt
 8009bea:	4618      	movlt	r0, r3
 8009bec:	e7a4      	b.n	8009b38 <_printf_i+0x168>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	4632      	mov	r2, r6
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	47d0      	blx	sl
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d09b      	beq.n	8009b34 <_printf_i+0x164>
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	68e3      	ldr	r3, [r4, #12]
 8009c00:	9903      	ldr	r1, [sp, #12]
 8009c02:	1a5b      	subs	r3, r3, r1
 8009c04:	42ab      	cmp	r3, r5
 8009c06:	dcf2      	bgt.n	8009bee <_printf_i+0x21e>
 8009c08:	e7eb      	b.n	8009be2 <_printf_i+0x212>
 8009c0a:	2500      	movs	r5, #0
 8009c0c:	f104 0619 	add.w	r6, r4, #25
 8009c10:	e7f5      	b.n	8009bfe <_printf_i+0x22e>
 8009c12:	bf00      	nop
 8009c14:	0800b031 	.word	0x0800b031
 8009c18:	0800b042 	.word	0x0800b042

08009c1c <iprintf>:
 8009c1c:	b40f      	push	{r0, r1, r2, r3}
 8009c1e:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <iprintf+0x2c>)
 8009c20:	b513      	push	{r0, r1, r4, lr}
 8009c22:	681c      	ldr	r4, [r3, #0]
 8009c24:	b124      	cbz	r4, 8009c30 <iprintf+0x14>
 8009c26:	69a3      	ldr	r3, [r4, #24]
 8009c28:	b913      	cbnz	r3, 8009c30 <iprintf+0x14>
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 fa2e 	bl	800a08c <__sinit>
 8009c30:	ab05      	add	r3, sp, #20
 8009c32:	9a04      	ldr	r2, [sp, #16]
 8009c34:	68a1      	ldr	r1, [r4, #8]
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f7ff fd2b 	bl	8009694 <_vfiprintf_r>
 8009c3e:	b002      	add	sp, #8
 8009c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c44:	b004      	add	sp, #16
 8009c46:	4770      	bx	lr
 8009c48:	2000000c 	.word	0x2000000c

08009c4c <_sbrk_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4d06      	ldr	r5, [pc, #24]	; (8009c68 <_sbrk_r+0x1c>)
 8009c50:	2300      	movs	r3, #0
 8009c52:	4604      	mov	r4, r0
 8009c54:	4608      	mov	r0, r1
 8009c56:	602b      	str	r3, [r5, #0]
 8009c58:	f7f6 ff2e 	bl	8000ab8 <_sbrk>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_sbrk_r+0x1a>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_sbrk_r+0x1a>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	20000110 	.word	0x20000110

08009c6c <strchr>:
 8009c6c:	b2c9      	uxtb	r1, r1
 8009c6e:	4603      	mov	r3, r0
 8009c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c74:	b11a      	cbz	r2, 8009c7e <strchr+0x12>
 8009c76:	428a      	cmp	r2, r1
 8009c78:	d1f9      	bne.n	8009c6e <strchr+0x2>
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	4770      	bx	lr
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	bf18      	it	ne
 8009c82:	2300      	movne	r3, #0
 8009c84:	e7f9      	b.n	8009c7a <strchr+0xe>

08009c86 <strcspn>:
 8009c86:	b570      	push	{r4, r5, r6, lr}
 8009c88:	4603      	mov	r3, r0
 8009c8a:	461e      	mov	r6, r3
 8009c8c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009c90:	b144      	cbz	r4, 8009ca4 <strcspn+0x1e>
 8009c92:	1e4a      	subs	r2, r1, #1
 8009c94:	e001      	b.n	8009c9a <strcspn+0x14>
 8009c96:	42a5      	cmp	r5, r4
 8009c98:	d004      	beq.n	8009ca4 <strcspn+0x1e>
 8009c9a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	d1f9      	bne.n	8009c96 <strcspn+0x10>
 8009ca2:	e7f2      	b.n	8009c8a <strcspn+0x4>
 8009ca4:	1a30      	subs	r0, r6, r0
 8009ca6:	bd70      	pop	{r4, r5, r6, pc}

08009ca8 <strspn>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	4603      	mov	r3, r0
 8009cac:	461e      	mov	r6, r3
 8009cae:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009cb2:	b13c      	cbz	r4, 8009cc4 <strspn+0x1c>
 8009cb4:	1e4a      	subs	r2, r1, #1
 8009cb6:	e001      	b.n	8009cbc <strspn+0x14>
 8009cb8:	42a5      	cmp	r5, r4
 8009cba:	d0f7      	beq.n	8009cac <strspn+0x4>
 8009cbc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009cc0:	2d00      	cmp	r5, #0
 8009cc2:	d1f9      	bne.n	8009cb8 <strspn+0x10>
 8009cc4:	1a30      	subs	r0, r6, r0
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}

08009cc8 <__swbuf_r>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	460e      	mov	r6, r1
 8009ccc:	4614      	mov	r4, r2
 8009cce:	4605      	mov	r5, r0
 8009cd0:	b118      	cbz	r0, 8009cda <__swbuf_r+0x12>
 8009cd2:	6983      	ldr	r3, [r0, #24]
 8009cd4:	b90b      	cbnz	r3, 8009cda <__swbuf_r+0x12>
 8009cd6:	f000 f9d9 	bl	800a08c <__sinit>
 8009cda:	4b21      	ldr	r3, [pc, #132]	; (8009d60 <__swbuf_r+0x98>)
 8009cdc:	429c      	cmp	r4, r3
 8009cde:	d12b      	bne.n	8009d38 <__swbuf_r+0x70>
 8009ce0:	686c      	ldr	r4, [r5, #4]
 8009ce2:	69a3      	ldr	r3, [r4, #24]
 8009ce4:	60a3      	str	r3, [r4, #8]
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	071a      	lsls	r2, r3, #28
 8009cea:	d52f      	bpl.n	8009d4c <__swbuf_r+0x84>
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	b36b      	cbz	r3, 8009d4c <__swbuf_r+0x84>
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	6820      	ldr	r0, [r4, #0]
 8009cf4:	1ac0      	subs	r0, r0, r3
 8009cf6:	6963      	ldr	r3, [r4, #20]
 8009cf8:	b2f6      	uxtb	r6, r6
 8009cfa:	4283      	cmp	r3, r0
 8009cfc:	4637      	mov	r7, r6
 8009cfe:	dc04      	bgt.n	8009d0a <__swbuf_r+0x42>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4628      	mov	r0, r5
 8009d04:	f000 f92e 	bl	8009f64 <_fflush_r>
 8009d08:	bb30      	cbnz	r0, 8009d58 <__swbuf_r+0x90>
 8009d0a:	68a3      	ldr	r3, [r4, #8]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	60a3      	str	r3, [r4, #8]
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	6022      	str	r2, [r4, #0]
 8009d16:	701e      	strb	r6, [r3, #0]
 8009d18:	6963      	ldr	r3, [r4, #20]
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	4283      	cmp	r3, r0
 8009d1e:	d004      	beq.n	8009d2a <__swbuf_r+0x62>
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	07db      	lsls	r3, r3, #31
 8009d24:	d506      	bpl.n	8009d34 <__swbuf_r+0x6c>
 8009d26:	2e0a      	cmp	r6, #10
 8009d28:	d104      	bne.n	8009d34 <__swbuf_r+0x6c>
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f000 f919 	bl	8009f64 <_fflush_r>
 8009d32:	b988      	cbnz	r0, 8009d58 <__swbuf_r+0x90>
 8009d34:	4638      	mov	r0, r7
 8009d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d38:	4b0a      	ldr	r3, [pc, #40]	; (8009d64 <__swbuf_r+0x9c>)
 8009d3a:	429c      	cmp	r4, r3
 8009d3c:	d101      	bne.n	8009d42 <__swbuf_r+0x7a>
 8009d3e:	68ac      	ldr	r4, [r5, #8]
 8009d40:	e7cf      	b.n	8009ce2 <__swbuf_r+0x1a>
 8009d42:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <__swbuf_r+0xa0>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	bf08      	it	eq
 8009d48:	68ec      	ldreq	r4, [r5, #12]
 8009d4a:	e7ca      	b.n	8009ce2 <__swbuf_r+0x1a>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f000 f80c 	bl	8009d6c <__swsetup_r>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d0cb      	beq.n	8009cf0 <__swbuf_r+0x28>
 8009d58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d5c:	e7ea      	b.n	8009d34 <__swbuf_r+0x6c>
 8009d5e:	bf00      	nop
 8009d60:	0800b074 	.word	0x0800b074
 8009d64:	0800b094 	.word	0x0800b094
 8009d68:	0800b054 	.word	0x0800b054

08009d6c <__swsetup_r>:
 8009d6c:	4b32      	ldr	r3, [pc, #200]	; (8009e38 <__swsetup_r+0xcc>)
 8009d6e:	b570      	push	{r4, r5, r6, lr}
 8009d70:	681d      	ldr	r5, [r3, #0]
 8009d72:	4606      	mov	r6, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	b125      	cbz	r5, 8009d82 <__swsetup_r+0x16>
 8009d78:	69ab      	ldr	r3, [r5, #24]
 8009d7a:	b913      	cbnz	r3, 8009d82 <__swsetup_r+0x16>
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f000 f985 	bl	800a08c <__sinit>
 8009d82:	4b2e      	ldr	r3, [pc, #184]	; (8009e3c <__swsetup_r+0xd0>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	d10f      	bne.n	8009da8 <__swsetup_r+0x3c>
 8009d88:	686c      	ldr	r4, [r5, #4]
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d90:	0719      	lsls	r1, r3, #28
 8009d92:	d42c      	bmi.n	8009dee <__swsetup_r+0x82>
 8009d94:	06dd      	lsls	r5, r3, #27
 8009d96:	d411      	bmi.n	8009dbc <__swsetup_r+0x50>
 8009d98:	2309      	movs	r3, #9
 8009d9a:	6033      	str	r3, [r6, #0]
 8009d9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009da6:	e03e      	b.n	8009e26 <__swsetup_r+0xba>
 8009da8:	4b25      	ldr	r3, [pc, #148]	; (8009e40 <__swsetup_r+0xd4>)
 8009daa:	429c      	cmp	r4, r3
 8009dac:	d101      	bne.n	8009db2 <__swsetup_r+0x46>
 8009dae:	68ac      	ldr	r4, [r5, #8]
 8009db0:	e7eb      	b.n	8009d8a <__swsetup_r+0x1e>
 8009db2:	4b24      	ldr	r3, [pc, #144]	; (8009e44 <__swsetup_r+0xd8>)
 8009db4:	429c      	cmp	r4, r3
 8009db6:	bf08      	it	eq
 8009db8:	68ec      	ldreq	r4, [r5, #12]
 8009dba:	e7e6      	b.n	8009d8a <__swsetup_r+0x1e>
 8009dbc:	0758      	lsls	r0, r3, #29
 8009dbe:	d512      	bpl.n	8009de6 <__swsetup_r+0x7a>
 8009dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc2:	b141      	cbz	r1, 8009dd6 <__swsetup_r+0x6a>
 8009dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc8:	4299      	cmp	r1, r3
 8009dca:	d002      	beq.n	8009dd2 <__swsetup_r+0x66>
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff fb57 	bl	8009480 <_free_r>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	2300      	movs	r3, #0
 8009de0:	6063      	str	r3, [r4, #4]
 8009de2:	6923      	ldr	r3, [r4, #16]
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	f043 0308 	orr.w	r3, r3, #8
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	b94b      	cbnz	r3, 8009e06 <__swsetup_r+0x9a>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dfc:	d003      	beq.n	8009e06 <__swsetup_r+0x9a>
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4630      	mov	r0, r6
 8009e02:	f000 fa09 	bl	800a218 <__smakebuf_r>
 8009e06:	89a0      	ldrh	r0, [r4, #12]
 8009e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e0c:	f010 0301 	ands.w	r3, r0, #1
 8009e10:	d00a      	beq.n	8009e28 <__swsetup_r+0xbc>
 8009e12:	2300      	movs	r3, #0
 8009e14:	60a3      	str	r3, [r4, #8]
 8009e16:	6963      	ldr	r3, [r4, #20]
 8009e18:	425b      	negs	r3, r3
 8009e1a:	61a3      	str	r3, [r4, #24]
 8009e1c:	6923      	ldr	r3, [r4, #16]
 8009e1e:	b943      	cbnz	r3, 8009e32 <__swsetup_r+0xc6>
 8009e20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e24:	d1ba      	bne.n	8009d9c <__swsetup_r+0x30>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	0781      	lsls	r1, r0, #30
 8009e2a:	bf58      	it	pl
 8009e2c:	6963      	ldrpl	r3, [r4, #20]
 8009e2e:	60a3      	str	r3, [r4, #8]
 8009e30:	e7f4      	b.n	8009e1c <__swsetup_r+0xb0>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e7f7      	b.n	8009e26 <__swsetup_r+0xba>
 8009e36:	bf00      	nop
 8009e38:	2000000c 	.word	0x2000000c
 8009e3c:	0800b074 	.word	0x0800b074
 8009e40:	0800b094 	.word	0x0800b094
 8009e44:	0800b054 	.word	0x0800b054

08009e48 <abort>:
 8009e48:	b508      	push	{r3, lr}
 8009e4a:	2006      	movs	r0, #6
 8009e4c:	f000 fa58 	bl	800a300 <raise>
 8009e50:	2001      	movs	r0, #1
 8009e52:	f7f6 fdb9 	bl	80009c8 <_exit>
	...

08009e58 <__sflush_r>:
 8009e58:	898a      	ldrh	r2, [r1, #12]
 8009e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5e:	4605      	mov	r5, r0
 8009e60:	0710      	lsls	r0, r2, #28
 8009e62:	460c      	mov	r4, r1
 8009e64:	d458      	bmi.n	8009f18 <__sflush_r+0xc0>
 8009e66:	684b      	ldr	r3, [r1, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	dc05      	bgt.n	8009e78 <__sflush_r+0x20>
 8009e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dc02      	bgt.n	8009e78 <__sflush_r+0x20>
 8009e72:	2000      	movs	r0, #0
 8009e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	d0f9      	beq.n	8009e72 <__sflush_r+0x1a>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e84:	682f      	ldr	r7, [r5, #0]
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	d032      	beq.n	8009ef0 <__sflush_r+0x98>
 8009e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	075a      	lsls	r2, r3, #29
 8009e90:	d505      	bpl.n	8009e9e <__sflush_r+0x46>
 8009e92:	6863      	ldr	r3, [r4, #4]
 8009e94:	1ac0      	subs	r0, r0, r3
 8009e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e98:	b10b      	cbz	r3, 8009e9e <__sflush_r+0x46>
 8009e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e9c:	1ac0      	subs	r0, r0, r3
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ea4:	6a21      	ldr	r1, [r4, #32]
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b0      	blx	r6
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	d106      	bne.n	8009ebe <__sflush_r+0x66>
 8009eb0:	6829      	ldr	r1, [r5, #0]
 8009eb2:	291d      	cmp	r1, #29
 8009eb4:	d82c      	bhi.n	8009f10 <__sflush_r+0xb8>
 8009eb6:	4a2a      	ldr	r2, [pc, #168]	; (8009f60 <__sflush_r+0x108>)
 8009eb8:	40ca      	lsrs	r2, r1
 8009eba:	07d6      	lsls	r6, r2, #31
 8009ebc:	d528      	bpl.n	8009f10 <__sflush_r+0xb8>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	6062      	str	r2, [r4, #4]
 8009ec2:	04d9      	lsls	r1, r3, #19
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	6022      	str	r2, [r4, #0]
 8009ec8:	d504      	bpl.n	8009ed4 <__sflush_r+0x7c>
 8009eca:	1c42      	adds	r2, r0, #1
 8009ecc:	d101      	bne.n	8009ed2 <__sflush_r+0x7a>
 8009ece:	682b      	ldr	r3, [r5, #0]
 8009ed0:	b903      	cbnz	r3, 8009ed4 <__sflush_r+0x7c>
 8009ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed6:	602f      	str	r7, [r5, #0]
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	d0ca      	beq.n	8009e72 <__sflush_r+0x1a>
 8009edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ee0:	4299      	cmp	r1, r3
 8009ee2:	d002      	beq.n	8009eea <__sflush_r+0x92>
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f7ff facb 	bl	8009480 <_free_r>
 8009eea:	2000      	movs	r0, #0
 8009eec:	6360      	str	r0, [r4, #52]	; 0x34
 8009eee:	e7c1      	b.n	8009e74 <__sflush_r+0x1c>
 8009ef0:	6a21      	ldr	r1, [r4, #32]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b0      	blx	r6
 8009ef8:	1c41      	adds	r1, r0, #1
 8009efa:	d1c7      	bne.n	8009e8c <__sflush_r+0x34>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0c4      	beq.n	8009e8c <__sflush_r+0x34>
 8009f02:	2b1d      	cmp	r3, #29
 8009f04:	d001      	beq.n	8009f0a <__sflush_r+0xb2>
 8009f06:	2b16      	cmp	r3, #22
 8009f08:	d101      	bne.n	8009f0e <__sflush_r+0xb6>
 8009f0a:	602f      	str	r7, [r5, #0]
 8009f0c:	e7b1      	b.n	8009e72 <__sflush_r+0x1a>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	e7ad      	b.n	8009e74 <__sflush_r+0x1c>
 8009f18:	690f      	ldr	r7, [r1, #16]
 8009f1a:	2f00      	cmp	r7, #0
 8009f1c:	d0a9      	beq.n	8009e72 <__sflush_r+0x1a>
 8009f1e:	0793      	lsls	r3, r2, #30
 8009f20:	680e      	ldr	r6, [r1, #0]
 8009f22:	bf08      	it	eq
 8009f24:	694b      	ldreq	r3, [r1, #20]
 8009f26:	600f      	str	r7, [r1, #0]
 8009f28:	bf18      	it	ne
 8009f2a:	2300      	movne	r3, #0
 8009f2c:	eba6 0807 	sub.w	r8, r6, r7
 8009f30:	608b      	str	r3, [r1, #8]
 8009f32:	f1b8 0f00 	cmp.w	r8, #0
 8009f36:	dd9c      	ble.n	8009e72 <__sflush_r+0x1a>
 8009f38:	6a21      	ldr	r1, [r4, #32]
 8009f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f3c:	4643      	mov	r3, r8
 8009f3e:	463a      	mov	r2, r7
 8009f40:	4628      	mov	r0, r5
 8009f42:	47b0      	blx	r6
 8009f44:	2800      	cmp	r0, #0
 8009f46:	dc06      	bgt.n	8009f56 <__sflush_r+0xfe>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f54:	e78e      	b.n	8009e74 <__sflush_r+0x1c>
 8009f56:	4407      	add	r7, r0
 8009f58:	eba8 0800 	sub.w	r8, r8, r0
 8009f5c:	e7e9      	b.n	8009f32 <__sflush_r+0xda>
 8009f5e:	bf00      	nop
 8009f60:	20400001 	.word	0x20400001

08009f64 <_fflush_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	690b      	ldr	r3, [r1, #16]
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	b913      	cbnz	r3, 8009f74 <_fflush_r+0x10>
 8009f6e:	2500      	movs	r5, #0
 8009f70:	4628      	mov	r0, r5
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	b118      	cbz	r0, 8009f7e <_fflush_r+0x1a>
 8009f76:	6983      	ldr	r3, [r0, #24]
 8009f78:	b90b      	cbnz	r3, 8009f7e <_fflush_r+0x1a>
 8009f7a:	f000 f887 	bl	800a08c <__sinit>
 8009f7e:	4b14      	ldr	r3, [pc, #80]	; (8009fd0 <_fflush_r+0x6c>)
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d11b      	bne.n	8009fbc <_fflush_r+0x58>
 8009f84:	686c      	ldr	r4, [r5, #4]
 8009f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0ef      	beq.n	8009f6e <_fflush_r+0xa>
 8009f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f90:	07d0      	lsls	r0, r2, #31
 8009f92:	d404      	bmi.n	8009f9e <_fflush_r+0x3a>
 8009f94:	0599      	lsls	r1, r3, #22
 8009f96:	d402      	bmi.n	8009f9e <_fflush_r+0x3a>
 8009f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9a:	f000 f915 	bl	800a1c8 <__retarget_lock_acquire_recursive>
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	f7ff ff59 	bl	8009e58 <__sflush_r>
 8009fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fa8:	07da      	lsls	r2, r3, #31
 8009faa:	4605      	mov	r5, r0
 8009fac:	d4e0      	bmi.n	8009f70 <_fflush_r+0xc>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	059b      	lsls	r3, r3, #22
 8009fb2:	d4dd      	bmi.n	8009f70 <_fflush_r+0xc>
 8009fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fb6:	f000 f908 	bl	800a1ca <__retarget_lock_release_recursive>
 8009fba:	e7d9      	b.n	8009f70 <_fflush_r+0xc>
 8009fbc:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <_fflush_r+0x70>)
 8009fbe:	429c      	cmp	r4, r3
 8009fc0:	d101      	bne.n	8009fc6 <_fflush_r+0x62>
 8009fc2:	68ac      	ldr	r4, [r5, #8]
 8009fc4:	e7df      	b.n	8009f86 <_fflush_r+0x22>
 8009fc6:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <_fflush_r+0x74>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	bf08      	it	eq
 8009fcc:	68ec      	ldreq	r4, [r5, #12]
 8009fce:	e7da      	b.n	8009f86 <_fflush_r+0x22>
 8009fd0:	0800b074 	.word	0x0800b074
 8009fd4:	0800b094 	.word	0x0800b094
 8009fd8:	0800b054 	.word	0x0800b054

08009fdc <std>:
 8009fdc:	2300      	movs	r3, #0
 8009fde:	b510      	push	{r4, lr}
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fea:	6083      	str	r3, [r0, #8]
 8009fec:	8181      	strh	r1, [r0, #12]
 8009fee:	6643      	str	r3, [r0, #100]	; 0x64
 8009ff0:	81c2      	strh	r2, [r0, #14]
 8009ff2:	6183      	str	r3, [r0, #24]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	2208      	movs	r2, #8
 8009ff8:	305c      	adds	r0, #92	; 0x5c
 8009ffa:	f7ff fa39 	bl	8009470 <memset>
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <std+0x38>)
 800a000:	6263      	str	r3, [r4, #36]	; 0x24
 800a002:	4b05      	ldr	r3, [pc, #20]	; (800a018 <std+0x3c>)
 800a004:	62a3      	str	r3, [r4, #40]	; 0x28
 800a006:	4b05      	ldr	r3, [pc, #20]	; (800a01c <std+0x40>)
 800a008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a00a:	4b05      	ldr	r3, [pc, #20]	; (800a020 <std+0x44>)
 800a00c:	6224      	str	r4, [r4, #32]
 800a00e:	6323      	str	r3, [r4, #48]	; 0x30
 800a010:	bd10      	pop	{r4, pc}
 800a012:	bf00      	nop
 800a014:	0800a339 	.word	0x0800a339
 800a018:	0800a35b 	.word	0x0800a35b
 800a01c:	0800a393 	.word	0x0800a393
 800a020:	0800a3b7 	.word	0x0800a3b7

0800a024 <_cleanup_r>:
 800a024:	4901      	ldr	r1, [pc, #4]	; (800a02c <_cleanup_r+0x8>)
 800a026:	f000 b8af 	b.w	800a188 <_fwalk_reent>
 800a02a:	bf00      	nop
 800a02c:	08009f65 	.word	0x08009f65

0800a030 <__sfmoreglue>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	2268      	movs	r2, #104	; 0x68
 800a034:	1e4d      	subs	r5, r1, #1
 800a036:	4355      	muls	r5, r2
 800a038:	460e      	mov	r6, r1
 800a03a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a03e:	f7ff fa8b 	bl	8009558 <_malloc_r>
 800a042:	4604      	mov	r4, r0
 800a044:	b140      	cbz	r0, 800a058 <__sfmoreglue+0x28>
 800a046:	2100      	movs	r1, #0
 800a048:	e9c0 1600 	strd	r1, r6, [r0]
 800a04c:	300c      	adds	r0, #12
 800a04e:	60a0      	str	r0, [r4, #8]
 800a050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a054:	f7ff fa0c 	bl	8009470 <memset>
 800a058:	4620      	mov	r0, r4
 800a05a:	bd70      	pop	{r4, r5, r6, pc}

0800a05c <__sfp_lock_acquire>:
 800a05c:	4801      	ldr	r0, [pc, #4]	; (800a064 <__sfp_lock_acquire+0x8>)
 800a05e:	f000 b8b3 	b.w	800a1c8 <__retarget_lock_acquire_recursive>
 800a062:	bf00      	nop
 800a064:	2000010d 	.word	0x2000010d

0800a068 <__sfp_lock_release>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__sfp_lock_release+0x8>)
 800a06a:	f000 b8ae 	b.w	800a1ca <__retarget_lock_release_recursive>
 800a06e:	bf00      	nop
 800a070:	2000010d 	.word	0x2000010d

0800a074 <__sinit_lock_acquire>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__sinit_lock_acquire+0x8>)
 800a076:	f000 b8a7 	b.w	800a1c8 <__retarget_lock_acquire_recursive>
 800a07a:	bf00      	nop
 800a07c:	2000010e 	.word	0x2000010e

0800a080 <__sinit_lock_release>:
 800a080:	4801      	ldr	r0, [pc, #4]	; (800a088 <__sinit_lock_release+0x8>)
 800a082:	f000 b8a2 	b.w	800a1ca <__retarget_lock_release_recursive>
 800a086:	bf00      	nop
 800a088:	2000010e 	.word	0x2000010e

0800a08c <__sinit>:
 800a08c:	b510      	push	{r4, lr}
 800a08e:	4604      	mov	r4, r0
 800a090:	f7ff fff0 	bl	800a074 <__sinit_lock_acquire>
 800a094:	69a3      	ldr	r3, [r4, #24]
 800a096:	b11b      	cbz	r3, 800a0a0 <__sinit+0x14>
 800a098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a09c:	f7ff bff0 	b.w	800a080 <__sinit_lock_release>
 800a0a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0a4:	6523      	str	r3, [r4, #80]	; 0x50
 800a0a6:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <__sinit+0x68>)
 800a0a8:	4a13      	ldr	r2, [pc, #76]	; (800a0f8 <__sinit+0x6c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	bf04      	itt	eq
 800a0b2:	2301      	moveq	r3, #1
 800a0b4:	61a3      	streq	r3, [r4, #24]
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 f820 	bl	800a0fc <__sfp>
 800a0bc:	6060      	str	r0, [r4, #4]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 f81c 	bl	800a0fc <__sfp>
 800a0c4:	60a0      	str	r0, [r4, #8]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 f818 	bl	800a0fc <__sfp>
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	60e0      	str	r0, [r4, #12]
 800a0d0:	2104      	movs	r1, #4
 800a0d2:	6860      	ldr	r0, [r4, #4]
 800a0d4:	f7ff ff82 	bl	8009fdc <std>
 800a0d8:	68a0      	ldr	r0, [r4, #8]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	2109      	movs	r1, #9
 800a0de:	f7ff ff7d 	bl	8009fdc <std>
 800a0e2:	68e0      	ldr	r0, [r4, #12]
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	2112      	movs	r1, #18
 800a0e8:	f7ff ff78 	bl	8009fdc <std>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	61a3      	str	r3, [r4, #24]
 800a0f0:	e7d2      	b.n	800a098 <__sinit+0xc>
 800a0f2:	bf00      	nop
 800a0f4:	0800b01c 	.word	0x0800b01c
 800a0f8:	0800a025 	.word	0x0800a025

0800a0fc <__sfp>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	4607      	mov	r7, r0
 800a100:	f7ff ffac 	bl	800a05c <__sfp_lock_acquire>
 800a104:	4b1e      	ldr	r3, [pc, #120]	; (800a180 <__sfp+0x84>)
 800a106:	681e      	ldr	r6, [r3, #0]
 800a108:	69b3      	ldr	r3, [r6, #24]
 800a10a:	b913      	cbnz	r3, 800a112 <__sfp+0x16>
 800a10c:	4630      	mov	r0, r6
 800a10e:	f7ff ffbd 	bl	800a08c <__sinit>
 800a112:	3648      	adds	r6, #72	; 0x48
 800a114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a118:	3b01      	subs	r3, #1
 800a11a:	d503      	bpl.n	800a124 <__sfp+0x28>
 800a11c:	6833      	ldr	r3, [r6, #0]
 800a11e:	b30b      	cbz	r3, 800a164 <__sfp+0x68>
 800a120:	6836      	ldr	r6, [r6, #0]
 800a122:	e7f7      	b.n	800a114 <__sfp+0x18>
 800a124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a128:	b9d5      	cbnz	r5, 800a160 <__sfp+0x64>
 800a12a:	4b16      	ldr	r3, [pc, #88]	; (800a184 <__sfp+0x88>)
 800a12c:	60e3      	str	r3, [r4, #12]
 800a12e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a132:	6665      	str	r5, [r4, #100]	; 0x64
 800a134:	f000 f847 	bl	800a1c6 <__retarget_lock_init_recursive>
 800a138:	f7ff ff96 	bl	800a068 <__sfp_lock_release>
 800a13c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a144:	6025      	str	r5, [r4, #0]
 800a146:	61a5      	str	r5, [r4, #24]
 800a148:	2208      	movs	r2, #8
 800a14a:	4629      	mov	r1, r5
 800a14c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a150:	f7ff f98e 	bl	8009470 <memset>
 800a154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a15c:	4620      	mov	r0, r4
 800a15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a160:	3468      	adds	r4, #104	; 0x68
 800a162:	e7d9      	b.n	800a118 <__sfp+0x1c>
 800a164:	2104      	movs	r1, #4
 800a166:	4638      	mov	r0, r7
 800a168:	f7ff ff62 	bl	800a030 <__sfmoreglue>
 800a16c:	4604      	mov	r4, r0
 800a16e:	6030      	str	r0, [r6, #0]
 800a170:	2800      	cmp	r0, #0
 800a172:	d1d5      	bne.n	800a120 <__sfp+0x24>
 800a174:	f7ff ff78 	bl	800a068 <__sfp_lock_release>
 800a178:	230c      	movs	r3, #12
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	e7ee      	b.n	800a15c <__sfp+0x60>
 800a17e:	bf00      	nop
 800a180:	0800b01c 	.word	0x0800b01c
 800a184:	ffff0001 	.word	0xffff0001

0800a188 <_fwalk_reent>:
 800a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	4606      	mov	r6, r0
 800a18e:	4688      	mov	r8, r1
 800a190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a194:	2700      	movs	r7, #0
 800a196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a19a:	f1b9 0901 	subs.w	r9, r9, #1
 800a19e:	d505      	bpl.n	800a1ac <_fwalk_reent+0x24>
 800a1a0:	6824      	ldr	r4, [r4, #0]
 800a1a2:	2c00      	cmp	r4, #0
 800a1a4:	d1f7      	bne.n	800a196 <_fwalk_reent+0xe>
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ac:	89ab      	ldrh	r3, [r5, #12]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d907      	bls.n	800a1c2 <_fwalk_reent+0x3a>
 800a1b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	d003      	beq.n	800a1c2 <_fwalk_reent+0x3a>
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4630      	mov	r0, r6
 800a1be:	47c0      	blx	r8
 800a1c0:	4307      	orrs	r7, r0
 800a1c2:	3568      	adds	r5, #104	; 0x68
 800a1c4:	e7e9      	b.n	800a19a <_fwalk_reent+0x12>

0800a1c6 <__retarget_lock_init_recursive>:
 800a1c6:	4770      	bx	lr

0800a1c8 <__retarget_lock_acquire_recursive>:
 800a1c8:	4770      	bx	lr

0800a1ca <__retarget_lock_release_recursive>:
 800a1ca:	4770      	bx	lr

0800a1cc <__swhatbuf_r>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	460e      	mov	r6, r1
 800a1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	b096      	sub	sp, #88	; 0x58
 800a1d8:	4614      	mov	r4, r2
 800a1da:	461d      	mov	r5, r3
 800a1dc:	da08      	bge.n	800a1f0 <__swhatbuf_r+0x24>
 800a1de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	602a      	str	r2, [r5, #0]
 800a1e6:	061a      	lsls	r2, r3, #24
 800a1e8:	d410      	bmi.n	800a20c <__swhatbuf_r+0x40>
 800a1ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ee:	e00e      	b.n	800a20e <__swhatbuf_r+0x42>
 800a1f0:	466a      	mov	r2, sp
 800a1f2:	f000 f907 	bl	800a404 <_fstat_r>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	dbf1      	blt.n	800a1de <__swhatbuf_r+0x12>
 800a1fa:	9a01      	ldr	r2, [sp, #4]
 800a1fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a200:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a204:	425a      	negs	r2, r3
 800a206:	415a      	adcs	r2, r3
 800a208:	602a      	str	r2, [r5, #0]
 800a20a:	e7ee      	b.n	800a1ea <__swhatbuf_r+0x1e>
 800a20c:	2340      	movs	r3, #64	; 0x40
 800a20e:	2000      	movs	r0, #0
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	b016      	add	sp, #88	; 0x58
 800a214:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a218 <__smakebuf_r>:
 800a218:	898b      	ldrh	r3, [r1, #12]
 800a21a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a21c:	079d      	lsls	r5, r3, #30
 800a21e:	4606      	mov	r6, r0
 800a220:	460c      	mov	r4, r1
 800a222:	d507      	bpl.n	800a234 <__smakebuf_r+0x1c>
 800a224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	6123      	str	r3, [r4, #16]
 800a22c:	2301      	movs	r3, #1
 800a22e:	6163      	str	r3, [r4, #20]
 800a230:	b002      	add	sp, #8
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	ab01      	add	r3, sp, #4
 800a236:	466a      	mov	r2, sp
 800a238:	f7ff ffc8 	bl	800a1cc <__swhatbuf_r>
 800a23c:	9900      	ldr	r1, [sp, #0]
 800a23e:	4605      	mov	r5, r0
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff f989 	bl	8009558 <_malloc_r>
 800a246:	b948      	cbnz	r0, 800a25c <__smakebuf_r+0x44>
 800a248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24c:	059a      	lsls	r2, r3, #22
 800a24e:	d4ef      	bmi.n	800a230 <__smakebuf_r+0x18>
 800a250:	f023 0303 	bic.w	r3, r3, #3
 800a254:	f043 0302 	orr.w	r3, r3, #2
 800a258:	81a3      	strh	r3, [r4, #12]
 800a25a:	e7e3      	b.n	800a224 <__smakebuf_r+0xc>
 800a25c:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <__smakebuf_r+0x7c>)
 800a25e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	6020      	str	r0, [r4, #0]
 800a264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	9b00      	ldr	r3, [sp, #0]
 800a26c:	6163      	str	r3, [r4, #20]
 800a26e:	9b01      	ldr	r3, [sp, #4]
 800a270:	6120      	str	r0, [r4, #16]
 800a272:	b15b      	cbz	r3, 800a28c <__smakebuf_r+0x74>
 800a274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a278:	4630      	mov	r0, r6
 800a27a:	f000 f8d5 	bl	800a428 <_isatty_r>
 800a27e:	b128      	cbz	r0, 800a28c <__smakebuf_r+0x74>
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	89a0      	ldrh	r0, [r4, #12]
 800a28e:	4305      	orrs	r5, r0
 800a290:	81a5      	strh	r5, [r4, #12]
 800a292:	e7cd      	b.n	800a230 <__smakebuf_r+0x18>
 800a294:	0800a025 	.word	0x0800a025

0800a298 <__malloc_lock>:
 800a298:	4801      	ldr	r0, [pc, #4]	; (800a2a0 <__malloc_lock+0x8>)
 800a29a:	f7ff bf95 	b.w	800a1c8 <__retarget_lock_acquire_recursive>
 800a29e:	bf00      	nop
 800a2a0:	2000010c 	.word	0x2000010c

0800a2a4 <__malloc_unlock>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	; (800a2ac <__malloc_unlock+0x8>)
 800a2a6:	f7ff bf90 	b.w	800a1ca <__retarget_lock_release_recursive>
 800a2aa:	bf00      	nop
 800a2ac:	2000010c 	.word	0x2000010c

0800a2b0 <_raise_r>:
 800a2b0:	291f      	cmp	r1, #31
 800a2b2:	b538      	push	{r3, r4, r5, lr}
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	460d      	mov	r5, r1
 800a2b8:	d904      	bls.n	800a2c4 <_raise_r+0x14>
 800a2ba:	2316      	movs	r3, #22
 800a2bc:	6003      	str	r3, [r0, #0]
 800a2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2c6:	b112      	cbz	r2, 800a2ce <_raise_r+0x1e>
 800a2c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2cc:	b94b      	cbnz	r3, 800a2e2 <_raise_r+0x32>
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f000 f830 	bl	800a334 <_getpid_r>
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	4620      	mov	r0, r4
 800a2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2de:	f000 b817 	b.w	800a310 <_kill_r>
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d00a      	beq.n	800a2fc <_raise_r+0x4c>
 800a2e6:	1c59      	adds	r1, r3, #1
 800a2e8:	d103      	bne.n	800a2f2 <_raise_r+0x42>
 800a2ea:	2316      	movs	r3, #22
 800a2ec:	6003      	str	r3, [r0, #0]
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	e7e7      	b.n	800a2c2 <_raise_r+0x12>
 800a2f2:	2400      	movs	r4, #0
 800a2f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	4798      	blx	r3
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	e7e0      	b.n	800a2c2 <_raise_r+0x12>

0800a300 <raise>:
 800a300:	4b02      	ldr	r3, [pc, #8]	; (800a30c <raise+0xc>)
 800a302:	4601      	mov	r1, r0
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	f7ff bfd3 	b.w	800a2b0 <_raise_r>
 800a30a:	bf00      	nop
 800a30c:	2000000c 	.word	0x2000000c

0800a310 <_kill_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d07      	ldr	r5, [pc, #28]	; (800a330 <_kill_r+0x20>)
 800a314:	2300      	movs	r3, #0
 800a316:	4604      	mov	r4, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	4611      	mov	r1, r2
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	f7f6 fb43 	bl	80009a8 <_kill>
 800a322:	1c43      	adds	r3, r0, #1
 800a324:	d102      	bne.n	800a32c <_kill_r+0x1c>
 800a326:	682b      	ldr	r3, [r5, #0]
 800a328:	b103      	cbz	r3, 800a32c <_kill_r+0x1c>
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	bf00      	nop
 800a330:	20000110 	.word	0x20000110

0800a334 <_getpid_r>:
 800a334:	f7f6 bb30 	b.w	8000998 <_getpid>

0800a338 <__sread>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	460c      	mov	r4, r1
 800a33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a340:	f000 f894 	bl	800a46c <_read_r>
 800a344:	2800      	cmp	r0, #0
 800a346:	bfab      	itete	ge
 800a348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a34a:	89a3      	ldrhlt	r3, [r4, #12]
 800a34c:	181b      	addge	r3, r3, r0
 800a34e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a352:	bfac      	ite	ge
 800a354:	6563      	strge	r3, [r4, #84]	; 0x54
 800a356:	81a3      	strhlt	r3, [r4, #12]
 800a358:	bd10      	pop	{r4, pc}

0800a35a <__swrite>:
 800a35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35e:	461f      	mov	r7, r3
 800a360:	898b      	ldrh	r3, [r1, #12]
 800a362:	05db      	lsls	r3, r3, #23
 800a364:	4605      	mov	r5, r0
 800a366:	460c      	mov	r4, r1
 800a368:	4616      	mov	r6, r2
 800a36a:	d505      	bpl.n	800a378 <__swrite+0x1e>
 800a36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a370:	2302      	movs	r3, #2
 800a372:	2200      	movs	r2, #0
 800a374:	f000 f868 	bl	800a448 <_lseek_r>
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a37e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	4632      	mov	r2, r6
 800a386:	463b      	mov	r3, r7
 800a388:	4628      	mov	r0, r5
 800a38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a38e:	f000 b817 	b.w	800a3c0 <_write_r>

0800a392 <__sseek>:
 800a392:	b510      	push	{r4, lr}
 800a394:	460c      	mov	r4, r1
 800a396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a39a:	f000 f855 	bl	800a448 <_lseek_r>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	bf15      	itete	ne
 800a3a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3ae:	81a3      	strheq	r3, [r4, #12]
 800a3b0:	bf18      	it	ne
 800a3b2:	81a3      	strhne	r3, [r4, #12]
 800a3b4:	bd10      	pop	{r4, pc}

0800a3b6 <__sclose>:
 800a3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ba:	f000 b813 	b.w	800a3e4 <_close_r>
	...

0800a3c0 <_write_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d07      	ldr	r5, [pc, #28]	; (800a3e0 <_write_r+0x20>)
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	602a      	str	r2, [r5, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	f7f6 fb21 	bl	8000a16 <_write>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_write_r+0x1e>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_write_r+0x1e>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	20000110 	.word	0x20000110

0800a3e4 <_close_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d06      	ldr	r5, [pc, #24]	; (800a400 <_close_r+0x1c>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	f7f6 fb2d 	bl	8000a4e <_close>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_close_r+0x1a>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_close_r+0x1a>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	20000110 	.word	0x20000110

0800a404 <_fstat_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d07      	ldr	r5, [pc, #28]	; (800a424 <_fstat_r+0x20>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	4611      	mov	r1, r2
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	f7f6 fb28 	bl	8000a66 <_fstat>
 800a416:	1c43      	adds	r3, r0, #1
 800a418:	d102      	bne.n	800a420 <_fstat_r+0x1c>
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	b103      	cbz	r3, 800a420 <_fstat_r+0x1c>
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	bd38      	pop	{r3, r4, r5, pc}
 800a422:	bf00      	nop
 800a424:	20000110 	.word	0x20000110

0800a428 <_isatty_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d06      	ldr	r5, [pc, #24]	; (800a444 <_isatty_r+0x1c>)
 800a42c:	2300      	movs	r3, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f7f6 fb27 	bl	8000a86 <_isatty>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_isatty_r+0x1a>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_isatty_r+0x1a>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20000110 	.word	0x20000110

0800a448 <_lseek_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d07      	ldr	r5, [pc, #28]	; (800a468 <_lseek_r+0x20>)
 800a44c:	4604      	mov	r4, r0
 800a44e:	4608      	mov	r0, r1
 800a450:	4611      	mov	r1, r2
 800a452:	2200      	movs	r2, #0
 800a454:	602a      	str	r2, [r5, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	f7f6 fb20 	bl	8000a9c <_lseek>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	d102      	bne.n	800a466 <_lseek_r+0x1e>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	b103      	cbz	r3, 800a466 <_lseek_r+0x1e>
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	20000110 	.word	0x20000110

0800a46c <_read_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d07      	ldr	r5, [pc, #28]	; (800a48c <_read_r+0x20>)
 800a470:	4604      	mov	r4, r0
 800a472:	4608      	mov	r0, r1
 800a474:	4611      	mov	r1, r2
 800a476:	2200      	movs	r2, #0
 800a478:	602a      	str	r2, [r5, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	f7f6 faae 	bl	80009dc <_read>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_read_r+0x1e>
 800a484:	682b      	ldr	r3, [r5, #0]
 800a486:	b103      	cbz	r3, 800a48a <_read_r+0x1e>
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	20000110 	.word	0x20000110

0800a490 <_init>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	bf00      	nop
 800a494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a496:	bc08      	pop	{r3}
 800a498:	469e      	mov	lr, r3
 800a49a:	4770      	bx	lr

0800a49c <_fini>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr
